03/10/2020 11:05:09 AM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/10/2020 11:05:09 AM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/10/2020 11:05:09 AM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/10/2020 11:05:09 AM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/10/2020 11:05:09 AM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/10/2020 11:05:09 AM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/10/2020 11:05:09 AM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/10/2020 11:05:09 AM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/10/2020 11:05:09 AM DEBUG [spec] No of nodes: 6
03/10/2020 11:05:09 AM DEBUG [spec] No of edges: 10
03/10/2020 11:05:09 AM DEBUG 
End of translate


03/10/2020 11:05:09 AM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/10/2020 11:05:09 AM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/10/2020 11:05:09 AM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r23', 'r21'])
03/10/2020 11:05:09 AM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 2 r21 )
03/10/2020 11:05:09 AM DEBUG [hold] Prop: r23 Duration: 1 Negation: False Props: set(['r23', 'r21'])
03/10/2020 11:05:09 AM DEBUG [eventually] Low: 0 High: 4 DFA: (Hold 1 r23 )
03/10/2020 11:05:09 AM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 5 ) DFA2: (Eventually (Hold 1 r23 ) 0 4 )
03/10/2020 11:05:09 AM DEBUG [spec] spec: [H^2 r21]^[0, 5] * [H^1 r23]^[0, 4]
03/10/2020 11:05:09 AM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 5 ) (Eventually (Hold 1 r23 ) 0 4 ) )
Directed: True
Multi: False
Props: {'r23': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r23', 'weight': 0, 'label': u'r23'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r23', 'weight': 0, 'label': u'r23'})]
		
03/10/2020 11:05:09 AM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/10/2020 11:05:09 AM DEBUG [spec] No of nodes: 6
03/10/2020 11:05:09 AM DEBUG [spec] No of edges: 10
03/10/2020 11:05:09 AM DEBUG 
End of translate


03/10/2020 11:05:09 AM INFO The bound of formula "[H^2 r21]^[0, 5] * [H^1 r23]^[0, 4]" is (4, 10)!
03/10/2020 11:05:09 AM INFO Translated formula "[H^2 r21]^[0, 5] * [H^1 r23]^[0, 4]" to infinity DFA of size (6, 10)!
03/10/2020 11:05:09 AM DEBUG [hold] Prop: r86 Duration: 1 Negation: False Props: set(['r97', 'r86'])
03/10/2020 11:05:09 AM DEBUG [eventually] Low: 0 High: 4 DFA: (Hold 1 r86 )
03/10/2020 11:05:09 AM DEBUG [hold] Prop: r97 Duration: 2 Negation: False Props: set(['r97', 'r86'])
03/10/2020 11:05:09 AM DEBUG [eventually] Low: 0 High: 4 DFA: (Hold 2 r97 )
03/10/2020 11:05:09 AM DEBUG [concatenation] DFA1: (Eventually (Hold 1 r86 ) 0 4 ) DFA2: (Eventually (Hold 2 r97 ) 0 4 )
03/10/2020 11:05:09 AM DEBUG [spec] spec: [H^1 r86]^[0, 4] * [H^2 r97]^[0, 4]
03/10/2020 11:05:09 AM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 1 r86 ) 0 4 ) (Eventually (Hold 2 r97 ) 0 4 ) )
Directed: True
Multi: False
Props: {'r97': 1, 'r86': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r86', 'weight': 0, 'label': u'r86'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r86', 'weight': 0, 'label': u'r86'}), (2, 2, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([1, 3]), 'guard': u'r97', 'weight': 0, 'label': u'r97'}), (3, 2, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r97', 'weight': 0, 'label': u'r97'}), (4, 2, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r97', 'weight': 0, 'label': u'r97'})]
		
03/10/2020 11:05:09 AM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([2])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([2])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([2])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([2])
     Final: set([5])

03/10/2020 11:05:09 AM DEBUG [spec] No of nodes: 6
03/10/2020 11:05:09 AM DEBUG [spec] No of edges: 10
03/10/2020 11:05:09 AM DEBUG 
End of translate


03/10/2020 11:05:09 AM INFO The bound of formula "[H^1 r86]^[0, 4] * [H^2 r97]^[0, 4]" is (4, 9)!
03/10/2020 11:05:09 AM INFO Translated formula "[H^1 r86]^[0, 4] * [H^2 r97]^[0, 4]" to infinity DFA of size (6, 10)!
03/10/2020 11:05:09 AM DEBUG [hold] Prop: r89 Duration: 2 Negation: False Props: set(['r89', 'Base4'])
03/10/2020 11:05:09 AM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 2 r89 )
03/10/2020 11:05:09 AM DEBUG [hold] Prop: Base4 Duration: 1 Negation: False Props: set(['r89', 'Base4'])
03/10/2020 11:05:09 AM DEBUG [eventually] Low: 0 High: 3 DFA: (Hold 1 Base4 )
03/10/2020 11:05:09 AM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r89 ) 0 5 ) DFA2: (Eventually (Hold 1 Base4 ) 0 3 )
03/10/2020 11:05:09 AM DEBUG [spec] spec: [H^2 r89]^[0, 5] * [H^1 Base4]^[0, 3]
03/10/2020 11:05:09 AM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r89 ) 0 5 ) (Eventually (Hold 1 Base4 ) 0 3 ) )
Directed: True
Multi: False
Props: {'r89': 1, 'Base4': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([1, 3]), 'guard': u'r89', 'weight': 0, 'label': u'r89'}), (1, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1, 3]), 'guard': u'r89', 'weight': 0, 'label': u'r89'}), (2, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([1, 3]), 'guard': u'r89', 'weight': 0, 'label': u'r89'}), (3, 3, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([2, 3]), 'guard': u'Base4', 'weight': 0, 'label': u'Base4'}), (4, 3, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([2, 3]), 'guard': u'Base4', 'weight': 0, 'label': u'Base4'})]
		
03/10/2020 11:05:09 AM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/10/2020 11:05:09 AM DEBUG [spec] No of nodes: 6
03/10/2020 11:05:09 AM DEBUG [spec] No of edges: 10
03/10/2020 11:05:09 AM DEBUG 
End of translate


03/10/2020 11:05:09 AM INFO The bound of formula "[H^2 r89]^[0, 5] * [H^1 Base4]^[0, 3]" is (4, 9)!
03/10/2020 11:05:09 AM INFO Translated formula "[H^2 r89]^[0, 5] * [H^1 Base4]^[0, 3]" to infinity DFA of size (6, 10)!
03/10/2020 11:05:09 AM DEBUG [hold] Prop: r105 Duration: 1 Negation: False Props: set(['Base5', 'r105'])
03/10/2020 11:05:09 AM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 1 r105 )
03/10/2020 11:05:09 AM DEBUG [hold] Prop: Base5 Duration: 1 Negation: False Props: set(['Base5', 'r105'])
03/10/2020 11:05:09 AM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 1 Base5 )
03/10/2020 11:05:09 AM DEBUG [concatenation] DFA1: (Eventually (Hold 1 r105 ) 0 6 ) DFA2: (Eventually (Hold 1 Base5 ) 0 6 )
03/10/2020 11:05:09 AM DEBUG [spec] spec: [H^1 r105]^[0, 6] * [H^1 Base5]^[0, 6]
03/10/2020 11:05:09 AM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 1 r105 ) 0 6 ) (Eventually (Hold 1 Base5 ) 0 6 ) )
Directed: True
Multi: False
Props: {'Base5': 1, 'r105': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([4])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r105', 'weight': 0, 'label': u'r105'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r105', 'weight': 0, 'label': u'r105'}), (2, 2, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([1, 3]), 'guard': u'Base5', 'weight': 0, 'label': u'Base5'}), (3, 2, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'Base5', 'weight': 0, 'label': u'Base5'})]
		
03/10/2020 11:05:09 AM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([4])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([2])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([2])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([2])
   Final: set([4])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([2])
     Final: set([4])

03/10/2020 11:05:09 AM DEBUG [spec] No of nodes: 5
03/10/2020 11:05:09 AM DEBUG [spec] No of edges: 8
03/10/2020 11:05:09 AM DEBUG 
End of translate


03/10/2020 11:05:09 AM INFO The bound of formula "[H^1 r105]^[0, 6] * [H^1 Base5]^[0, 6]" is (3, 13)!
03/10/2020 11:05:09 AM INFO Translated formula "[H^1 r105]^[0, 6] * [H^1 Base5]^[0, 6]" to infinity DFA of size (5, 8)!
03/10/2020 11:05:09 AM DEBUG 

Start policy computation

03/10/2020 11:05:09 AM DEBUG [extend_ts] TS: (102, 1594) ETS:(102, 1594)
03/10/2020 11:05:09 AM DEBUG [extend_ts] TS: (102, 1594) ETS:(102, 1594)
03/10/2020 11:05:09 AM DEBUG [extend_ts] TS: (102, 1594) ETS:(102, 1594)
03/10/2020 11:05:09 AM DEBUG [extend_ts] TS: (102, 1594) ETS:(102, 1594)
03/10/2020 11:05:09 AM DEBUG [extend_ts] TS: (102, 1594) ETS:(102, 1594)
03/10/2020 11:05:09 AM INFO Constructing product automaton with infinity DFA!
03/10/2020 11:05:09 AM INFO Product automaton size is: (206, 3204)
03/10/2020 11:05:09 AM INFO Constructing product automaton with infinity DFA!
03/10/2020 11:05:09 AM INFO Product automaton size is: (206, 3204)
03/10/2020 11:05:09 AM INFO Constructing product automaton with infinity DFA!
03/10/2020 11:05:09 AM INFO Product automaton size is: (206, 3204)
03/10/2020 11:05:09 AM INFO Constructing product automaton with infinity DFA!
03/10/2020 11:05:09 AM INFO Product automaton size is: (206, 3200)
03/10/2020 11:05:09 AM INFO Constructing product automaton with infinity DFA!
03/10/2020 11:05:09 AM INFO Product automaton size is: (205, 3188)
03/10/2020 11:14:59 AM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/10/2020 11:14:59 AM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/10/2020 11:14:59 AM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/10/2020 11:14:59 AM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/10/2020 11:14:59 AM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/10/2020 11:14:59 AM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/10/2020 11:14:59 AM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/10/2020 11:14:59 AM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/10/2020 11:14:59 AM DEBUG [spec] No of nodes: 6
03/10/2020 11:14:59 AM DEBUG [spec] No of edges: 10
03/10/2020 11:14:59 AM DEBUG 
End of translate


03/10/2020 11:14:59 AM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/10/2020 11:14:59 AM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/10/2020 11:14:59 AM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r23', 'r21'])
03/10/2020 11:14:59 AM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 2 r21 )
03/10/2020 11:14:59 AM DEBUG [hold] Prop: r23 Duration: 1 Negation: False Props: set(['r23', 'r21'])
03/10/2020 11:14:59 AM DEBUG [eventually] Low: 0 High: 4 DFA: (Hold 1 r23 )
03/10/2020 11:14:59 AM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 5 ) DFA2: (Eventually (Hold 1 r23 ) 0 4 )
03/10/2020 11:14:59 AM DEBUG [spec] spec: [H^2 r21]^[0, 5] * [H^1 r23]^[0, 4]
03/10/2020 11:14:59 AM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 5 ) (Eventually (Hold 1 r23 ) 0 4 ) )
Directed: True
Multi: False
Props: {'r23': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r23', 'weight': 0, 'label': u'r23'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r23', 'weight': 0, 'label': u'r23'})]
		
03/10/2020 11:14:59 AM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/10/2020 11:14:59 AM DEBUG [spec] No of nodes: 6
03/10/2020 11:14:59 AM DEBUG [spec] No of edges: 10
03/10/2020 11:14:59 AM DEBUG 
End of translate


03/10/2020 11:14:59 AM INFO The bound of formula "[H^2 r21]^[0, 5] * [H^1 r23]^[0, 4]" is (4, 10)!
03/10/2020 11:14:59 AM INFO Translated formula "[H^2 r21]^[0, 5] * [H^1 r23]^[0, 4]" to infinity DFA of size (6, 10)!
03/10/2020 11:14:59 AM DEBUG [hold] Prop: r86 Duration: 1 Negation: False Props: set(['r97', 'r86'])
03/10/2020 11:14:59 AM DEBUG [eventually] Low: 0 High: 4 DFA: (Hold 1 r86 )
03/10/2020 11:14:59 AM DEBUG [hold] Prop: r97 Duration: 2 Negation: False Props: set(['r97', 'r86'])
03/10/2020 11:14:59 AM DEBUG [eventually] Low: 0 High: 4 DFA: (Hold 2 r97 )
03/10/2020 11:14:59 AM DEBUG [concatenation] DFA1: (Eventually (Hold 1 r86 ) 0 4 ) DFA2: (Eventually (Hold 2 r97 ) 0 4 )
03/10/2020 11:14:59 AM DEBUG [spec] spec: [H^1 r86]^[0, 4] * [H^2 r97]^[0, 4]
03/10/2020 11:14:59 AM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 1 r86 ) 0 4 ) (Eventually (Hold 2 r97 ) 0 4 ) )
Directed: True
Multi: False
Props: {'r97': 1, 'r86': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r86', 'weight': 0, 'label': u'r86'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r86', 'weight': 0, 'label': u'r86'}), (2, 2, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([1, 3]), 'guard': u'r97', 'weight': 0, 'label': u'r97'}), (3, 2, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r97', 'weight': 0, 'label': u'r97'}), (4, 2, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r97', 'weight': 0, 'label': u'r97'})]
		
03/10/2020 11:14:59 AM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([2])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([2])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([2])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([2])
     Final: set([5])

03/10/2020 11:14:59 AM DEBUG [spec] No of nodes: 6
03/10/2020 11:14:59 AM DEBUG [spec] No of edges: 10
03/10/2020 11:14:59 AM DEBUG 
End of translate


03/10/2020 11:14:59 AM INFO The bound of formula "[H^1 r86]^[0, 4] * [H^2 r97]^[0, 4]" is (4, 9)!
03/10/2020 11:14:59 AM INFO Translated formula "[H^1 r86]^[0, 4] * [H^2 r97]^[0, 4]" to infinity DFA of size (6, 10)!
03/10/2020 11:14:59 AM DEBUG [hold] Prop: r89 Duration: 2 Negation: False Props: set(['r89', 'Base4'])
03/10/2020 11:14:59 AM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 2 r89 )
03/10/2020 11:14:59 AM DEBUG [hold] Prop: Base4 Duration: 1 Negation: False Props: set(['r89', 'Base4'])
03/10/2020 11:14:59 AM DEBUG [eventually] Low: 0 High: 3 DFA: (Hold 1 Base4 )
03/10/2020 11:14:59 AM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r89 ) 0 5 ) DFA2: (Eventually (Hold 1 Base4 ) 0 3 )
03/10/2020 11:14:59 AM DEBUG [spec] spec: [H^2 r89]^[0, 5] * [H^1 Base4]^[0, 3]
03/10/2020 11:14:59 AM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r89 ) 0 5 ) (Eventually (Hold 1 Base4 ) 0 3 ) )
Directed: True
Multi: False
Props: {'r89': 1, 'Base4': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([1, 3]), 'guard': u'r89', 'weight': 0, 'label': u'r89'}), (1, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1, 3]), 'guard': u'r89', 'weight': 0, 'label': u'r89'}), (2, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([1, 3]), 'guard': u'r89', 'weight': 0, 'label': u'r89'}), (3, 3, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([2, 3]), 'guard': u'Base4', 'weight': 0, 'label': u'Base4'}), (4, 3, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([2, 3]), 'guard': u'Base4', 'weight': 0, 'label': u'Base4'})]
		
03/10/2020 11:14:59 AM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/10/2020 11:14:59 AM DEBUG [spec] No of nodes: 6
03/10/2020 11:14:59 AM DEBUG [spec] No of edges: 10
03/10/2020 11:14:59 AM DEBUG 
End of translate


03/10/2020 11:14:59 AM INFO The bound of formula "[H^2 r89]^[0, 5] * [H^1 Base4]^[0, 3]" is (4, 9)!
03/10/2020 11:14:59 AM INFO Translated formula "[H^2 r89]^[0, 5] * [H^1 Base4]^[0, 3]" to infinity DFA of size (6, 10)!
03/10/2020 11:14:59 AM DEBUG [hold] Prop: r105 Duration: 1 Negation: False Props: set(['Base5', 'r105'])
03/10/2020 11:14:59 AM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 1 r105 )
03/10/2020 11:14:59 AM DEBUG [hold] Prop: Base5 Duration: 1 Negation: False Props: set(['Base5', 'r105'])
03/10/2020 11:14:59 AM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 1 Base5 )
03/10/2020 11:14:59 AM DEBUG [concatenation] DFA1: (Eventually (Hold 1 r105 ) 0 6 ) DFA2: (Eventually (Hold 1 Base5 ) 0 6 )
03/10/2020 11:14:59 AM DEBUG [spec] spec: [H^1 r105]^[0, 6] * [H^1 Base5]^[0, 6]
03/10/2020 11:14:59 AM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 1 r105 ) 0 6 ) (Eventually (Hold 1 Base5 ) 0 6 ) )
Directed: True
Multi: False
Props: {'Base5': 1, 'r105': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([4])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r105', 'weight': 0, 'label': u'r105'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r105', 'weight': 0, 'label': u'r105'}), (2, 2, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([1, 3]), 'guard': u'Base5', 'weight': 0, 'label': u'Base5'}), (3, 2, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'Base5', 'weight': 0, 'label': u'Base5'})]
		
03/10/2020 11:14:59 AM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([4])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([2])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([2])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([2])
   Final: set([4])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([2])
     Final: set([4])

03/10/2020 11:14:59 AM DEBUG [spec] No of nodes: 5
03/10/2020 11:14:59 AM DEBUG [spec] No of edges: 8
03/10/2020 11:14:59 AM DEBUG 
End of translate


03/10/2020 11:14:59 AM INFO The bound of formula "[H^1 r105]^[0, 6] * [H^1 Base5]^[0, 6]" is (3, 13)!
03/10/2020 11:14:59 AM INFO Translated formula "[H^1 r105]^[0, 6] * [H^1 Base5]^[0, 6]" to infinity DFA of size (5, 8)!
03/10/2020 11:14:59 AM DEBUG 

Start policy computation

03/10/2020 11:14:59 AM DEBUG [extend_ts] TS: (102, 1594) ETS:(102, 1594)
03/10/2020 11:14:59 AM DEBUG [extend_ts] TS: (102, 1594) ETS:(102, 1594)
03/10/2020 11:14:59 AM DEBUG [extend_ts] TS: (102, 1594) ETS:(102, 1594)
03/10/2020 11:14:59 AM DEBUG [extend_ts] TS: (102, 1594) ETS:(102, 1594)
03/10/2020 11:15:00 AM DEBUG [extend_ts] TS: (102, 1594) ETS:(102, 1594)
03/10/2020 11:15:00 AM INFO Constructing product automaton with infinity DFA!
03/10/2020 11:15:00 AM INFO Product automaton size is: (206, 3204)
03/10/2020 11:15:00 AM INFO Constructing product automaton with infinity DFA!
03/10/2020 11:15:00 AM INFO Product automaton size is: (206, 3204)
03/10/2020 11:15:00 AM INFO Constructing product automaton with infinity DFA!
03/10/2020 11:15:00 AM INFO Product automaton size is: (206, 3204)
03/10/2020 11:15:00 AM INFO Constructing product automaton with infinity DFA!
03/10/2020 11:15:00 AM INFO Product automaton size is: (206, 3200)
03/10/2020 11:15:00 AM INFO Constructing product automaton with infinity DFA!
03/10/2020 11:15:00 AM INFO Product automaton size is: (205, 3188)
03/10/2020 11:15:03 AM INFO Max deadline: 2
03/10/2020 11:15:03 AM INFO Generated control policy is: Base -> 1 -> r61 -> 1 -> r26 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r50 -> 1 -> r7 -> 1 -> r12 -> 1 -> r12
03/10/2020 11:15:03 AM INFO Max deadline: -1
03/10/2020 11:15:03 AM INFO Generated control policy is: Base2 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r58 -> 1 -> r23 -> 1 -> r23
03/10/2020 11:15:03 AM INFO Max deadline: -1
03/10/2020 11:15:03 AM INFO Generated control policy is: Base3 -> 1 -> r44 -> 1 -> r86 -> 1 -> r86 -> 1 -> r91 -> 1 -> r97 -> 1 -> r97 -> 1 -> r97
03/10/2020 11:15:03 AM INFO Max deadline: -1
03/10/2020 11:15:03 AM INFO Generated control policy is: Base4 -> 1 -> r47 -> 1 -> r89 -> 1 -> r89 -> 1 -> r89 -> 1 -> r47 -> 1 -> Base4 -> 1 -> Base4
03/10/2020 11:15:03 AM INFO Max deadline: -1
03/10/2020 11:15:03 AM INFO Generated control policy is: Base5 -> 1 -> r48 -> 1 -> r55 -> 1 -> r62 -> 1 -> r105 -> 1 -> r105 -> 1 -> r98 -> 1 -> r91 -> 1 -> r49 -> 1 -> Base5 -> 1 -> Base5
03/10/2020 01:11:16 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/10/2020 01:11:16 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/10/2020 01:11:16 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/10/2020 01:11:16 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/10/2020 01:11:16 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/10/2020 01:11:16 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/10/2020 01:11:16 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/10/2020 01:11:16 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/10/2020 01:11:16 PM DEBUG [spec] No of nodes: 6
03/10/2020 01:11:16 PM DEBUG [spec] No of edges: 10
03/10/2020 01:11:16 PM DEBUG 
End of translate


03/10/2020 01:11:16 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/10/2020 01:11:16 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/10/2020 01:11:16 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r23', 'r21'])
03/10/2020 01:11:16 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 2 r21 )
03/10/2020 01:11:16 PM DEBUG [hold] Prop: r23 Duration: 1 Negation: False Props: set(['r23', 'r21'])
03/10/2020 01:11:16 PM DEBUG [eventually] Low: 0 High: 4 DFA: (Hold 1 r23 )
03/10/2020 01:11:16 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 5 ) DFA2: (Eventually (Hold 1 r23 ) 0 4 )
03/10/2020 01:11:16 PM DEBUG [spec] spec: [H^2 r21]^[0, 5] * [H^1 r23]^[0, 4]
03/10/2020 01:11:16 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 5 ) (Eventually (Hold 1 r23 ) 0 4 ) )
Directed: True
Multi: False
Props: {'r23': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r23', 'weight': 0, 'label': u'r23'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r23', 'weight': 0, 'label': u'r23'})]
		
03/10/2020 01:11:16 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/10/2020 01:11:16 PM DEBUG [spec] No of nodes: 6
03/10/2020 01:11:16 PM DEBUG [spec] No of edges: 10
03/10/2020 01:11:16 PM DEBUG 
End of translate


03/10/2020 01:11:16 PM INFO The bound of formula "[H^2 r21]^[0, 5] * [H^1 r23]^[0, 4]" is (4, 10)!
03/10/2020 01:11:16 PM INFO Translated formula "[H^2 r21]^[0, 5] * [H^1 r23]^[0, 4]" to infinity DFA of size (6, 10)!
03/10/2020 01:11:16 PM DEBUG [hold] Prop: r86 Duration: 1 Negation: False Props: set(['r97', 'r86'])
03/10/2020 01:11:16 PM DEBUG [eventually] Low: 0 High: 4 DFA: (Hold 1 r86 )
03/10/2020 01:11:16 PM DEBUG [hold] Prop: r97 Duration: 2 Negation: False Props: set(['r97', 'r86'])
03/10/2020 01:11:16 PM DEBUG [eventually] Low: 0 High: 4 DFA: (Hold 2 r97 )
03/10/2020 01:11:16 PM DEBUG [concatenation] DFA1: (Eventually (Hold 1 r86 ) 0 4 ) DFA2: (Eventually (Hold 2 r97 ) 0 4 )
03/10/2020 01:11:16 PM DEBUG [spec] spec: [H^1 r86]^[0, 4] * [H^2 r97]^[0, 4]
03/10/2020 01:11:16 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 1 r86 ) 0 4 ) (Eventually (Hold 2 r97 ) 0 4 ) )
Directed: True
Multi: False
Props: {'r97': 1, 'r86': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r86', 'weight': 0, 'label': u'r86'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r86', 'weight': 0, 'label': u'r86'}), (2, 2, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([1, 3]), 'guard': u'r97', 'weight': 0, 'label': u'r97'}), (3, 2, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r97', 'weight': 0, 'label': u'r97'}), (4, 2, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r97', 'weight': 0, 'label': u'r97'})]
		
03/10/2020 01:11:16 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([2])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([2])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([2])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([2])
     Final: set([5])

03/10/2020 01:11:16 PM DEBUG [spec] No of nodes: 6
03/10/2020 01:11:16 PM DEBUG [spec] No of edges: 10
03/10/2020 01:11:16 PM DEBUG 
End of translate


03/10/2020 01:11:16 PM INFO The bound of formula "[H^1 r86]^[0, 4] * [H^2 r97]^[0, 4]" is (4, 9)!
03/10/2020 01:11:16 PM INFO Translated formula "[H^1 r86]^[0, 4] * [H^2 r97]^[0, 4]" to infinity DFA of size (6, 10)!
03/10/2020 01:11:16 PM DEBUG [hold] Prop: r89 Duration: 2 Negation: False Props: set(['r89', 'Base4'])
03/10/2020 01:11:16 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 2 r89 )
03/10/2020 01:11:16 PM DEBUG [hold] Prop: Base4 Duration: 1 Negation: False Props: set(['r89', 'Base4'])
03/10/2020 01:11:16 PM DEBUG [eventually] Low: 0 High: 3 DFA: (Hold 1 Base4 )
03/10/2020 01:11:16 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r89 ) 0 5 ) DFA2: (Eventually (Hold 1 Base4 ) 0 3 )
03/10/2020 01:11:16 PM DEBUG [spec] spec: [H^2 r89]^[0, 5] * [H^1 Base4]^[0, 3]
03/10/2020 01:11:16 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r89 ) 0 5 ) (Eventually (Hold 1 Base4 ) 0 3 ) )
Directed: True
Multi: False
Props: {'r89': 1, 'Base4': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([1, 3]), 'guard': u'r89', 'weight': 0, 'label': u'r89'}), (1, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1, 3]), 'guard': u'r89', 'weight': 0, 'label': u'r89'}), (2, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([1, 3]), 'guard': u'r89', 'weight': 0, 'label': u'r89'}), (3, 3, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([2, 3]), 'guard': u'Base4', 'weight': 0, 'label': u'Base4'}), (4, 3, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([2, 3]), 'guard': u'Base4', 'weight': 0, 'label': u'Base4'})]
		
03/10/2020 01:11:16 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/10/2020 01:11:16 PM DEBUG [spec] No of nodes: 6
03/10/2020 01:11:16 PM DEBUG [spec] No of edges: 10
03/10/2020 01:11:16 PM DEBUG 
End of translate


03/10/2020 01:11:16 PM INFO The bound of formula "[H^2 r89]^[0, 5] * [H^1 Base4]^[0, 3]" is (4, 9)!
03/10/2020 01:11:16 PM INFO Translated formula "[H^2 r89]^[0, 5] * [H^1 Base4]^[0, 3]" to infinity DFA of size (6, 10)!
03/10/2020 01:11:16 PM DEBUG [hold] Prop: r105 Duration: 1 Negation: False Props: set(['Base5', 'r105'])
03/10/2020 01:11:16 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 1 r105 )
03/10/2020 01:11:16 PM DEBUG [hold] Prop: Base5 Duration: 1 Negation: False Props: set(['Base5', 'r105'])
03/10/2020 01:11:16 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 1 Base5 )
03/10/2020 01:11:16 PM DEBUG [concatenation] DFA1: (Eventually (Hold 1 r105 ) 0 6 ) DFA2: (Eventually (Hold 1 Base5 ) 0 6 )
03/10/2020 01:11:16 PM DEBUG [spec] spec: [H^1 r105]^[0, 6] * [H^1 Base5]^[0, 6]
03/10/2020 01:11:16 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 1 r105 ) 0 6 ) (Eventually (Hold 1 Base5 ) 0 6 ) )
Directed: True
Multi: False
Props: {'Base5': 1, 'r105': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([4])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r105', 'weight': 0, 'label': u'r105'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r105', 'weight': 0, 'label': u'r105'}), (2, 2, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([1, 3]), 'guard': u'Base5', 'weight': 0, 'label': u'Base5'}), (3, 2, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'Base5', 'weight': 0, 'label': u'Base5'})]
		
03/10/2020 01:11:16 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([4])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([2])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([2])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([2])
   Final: set([4])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([2])
     Final: set([4])

03/10/2020 01:11:16 PM DEBUG [spec] No of nodes: 5
03/10/2020 01:11:16 PM DEBUG [spec] No of edges: 8
03/10/2020 01:11:16 PM DEBUG 
End of translate


03/10/2020 01:11:16 PM INFO The bound of formula "[H^1 r105]^[0, 6] * [H^1 Base5]^[0, 6]" is (3, 13)!
03/10/2020 01:11:16 PM INFO Translated formula "[H^1 r105]^[0, 6] * [H^1 Base5]^[0, 6]" to infinity DFA of size (5, 8)!
03/10/2020 01:11:16 PM DEBUG 

Start policy computation

03/10/2020 01:11:16 PM DEBUG [extend_ts] TS: (102, 1594) ETS:(102, 1594)
03/10/2020 01:11:16 PM DEBUG [extend_ts] TS: (102, 1594) ETS:(102, 1594)
03/10/2020 01:11:16 PM DEBUG [extend_ts] TS: (102, 1594) ETS:(102, 1594)
03/10/2020 01:11:16 PM DEBUG [extend_ts] TS: (102, 1594) ETS:(102, 1594)
03/10/2020 01:11:16 PM DEBUG [extend_ts] TS: (102, 1594) ETS:(102, 1594)
03/10/2020 01:11:16 PM INFO Constructing product automaton with infinity DFA!
03/10/2020 01:11:16 PM INFO Product automaton size is: (206, 3204)
03/10/2020 01:11:16 PM INFO Constructing product automaton with infinity DFA!
03/10/2020 01:11:17 PM INFO Product automaton size is: (206, 3204)
03/10/2020 01:11:17 PM INFO Constructing product automaton with infinity DFA!
03/10/2020 01:11:17 PM INFO Product automaton size is: (206, 3204)
03/10/2020 01:11:17 PM INFO Constructing product automaton with infinity DFA!
03/10/2020 01:11:17 PM INFO Product automaton size is: (206, 3200)
03/10/2020 01:11:17 PM INFO Constructing product automaton with infinity DFA!
03/10/2020 01:11:17 PM INFO Product automaton size is: (205, 3188)
03/10/2020 01:11:20 PM INFO Max deadline: 2
03/10/2020 01:11:20 PM INFO Generated control policy is: Base1 -> 1 -> r61 -> 1 -> r26 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r50 -> 1 -> r7 -> 1 -> r12 -> 1 -> r12
03/10/2020 01:11:20 PM INFO Max deadline: -1
03/10/2020 01:11:20 PM INFO Generated control policy is: Base2 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r58 -> 1 -> r23 -> 1 -> r23
03/10/2020 01:11:20 PM INFO Max deadline: -1
03/10/2020 01:11:20 PM INFO Generated control policy is: Base3 -> 1 -> r44 -> 1 -> r86 -> 1 -> r86 -> 1 -> r91 -> 1 -> r97 -> 1 -> r97 -> 1 -> r97
03/10/2020 01:11:20 PM INFO Max deadline: -1
03/10/2020 01:11:20 PM INFO Generated control policy is: Base4 -> 1 -> r47 -> 1 -> r89 -> 1 -> r89 -> 1 -> r89 -> 1 -> r47 -> 1 -> Base4 -> 1 -> Base4
03/10/2020 01:11:20 PM INFO Max deadline: -1
03/10/2020 01:11:20 PM INFO Generated control policy is: Base5 -> 1 -> r48 -> 1 -> r55 -> 1 -> r62 -> 1 -> r105 -> 1 -> r105 -> 1 -> r98 -> 1 -> r91 -> 1 -> r49 -> 1 -> Base5 -> 1 -> Base5
03/10/2020 11:34:39 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/10/2020 11:34:39 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/10/2020 11:34:39 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/10/2020 11:34:39 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/10/2020 11:34:39 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/10/2020 11:34:39 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/10/2020 11:34:39 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/10/2020 11:34:39 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/10/2020 11:34:39 PM DEBUG [spec] No of nodes: 6
03/10/2020 11:34:39 PM DEBUG [spec] No of edges: 10
03/10/2020 11:34:39 PM DEBUG 
End of translate


03/10/2020 11:34:39 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/10/2020 11:34:39 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/10/2020 11:34:39 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r23', 'r21'])
03/10/2020 11:34:39 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 2 r21 )
03/10/2020 11:34:39 PM DEBUG [hold] Prop: r23 Duration: 1 Negation: False Props: set(['r23', 'r21'])
03/10/2020 11:34:39 PM DEBUG [eventually] Low: 0 High: 4 DFA: (Hold 1 r23 )
03/10/2020 11:34:39 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 5 ) DFA2: (Eventually (Hold 1 r23 ) 0 4 )
03/10/2020 11:34:39 PM DEBUG [spec] spec: [H^2 r21]^[0, 5] * [H^1 r23]^[0, 4]
03/10/2020 11:34:39 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 5 ) (Eventually (Hold 1 r23 ) 0 4 ) )
Directed: True
Multi: False
Props: {'r23': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r23', 'weight': 0, 'label': u'r23'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r23', 'weight': 0, 'label': u'r23'})]
		
03/10/2020 11:34:39 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/10/2020 11:34:39 PM DEBUG [spec] No of nodes: 6
03/10/2020 11:34:39 PM DEBUG [spec] No of edges: 10
03/10/2020 11:34:39 PM DEBUG 
End of translate


03/10/2020 11:34:39 PM INFO The bound of formula "[H^2 r21]^[0, 5] * [H^1 r23]^[0, 4]" is (4, 10)!
03/10/2020 11:34:39 PM INFO Translated formula "[H^2 r21]^[0, 5] * [H^1 r23]^[0, 4]" to infinity DFA of size (6, 10)!
03/10/2020 11:34:39 PM DEBUG [hold] Prop: r86 Duration: 1 Negation: False Props: set(['r97', 'r86'])
03/10/2020 11:34:39 PM DEBUG [eventually] Low: 0 High: 4 DFA: (Hold 1 r86 )
03/10/2020 11:34:39 PM DEBUG [hold] Prop: r97 Duration: 2 Negation: False Props: set(['r97', 'r86'])
03/10/2020 11:34:39 PM DEBUG [eventually] Low: 0 High: 4 DFA: (Hold 2 r97 )
03/10/2020 11:34:39 PM DEBUG [concatenation] DFA1: (Eventually (Hold 1 r86 ) 0 4 ) DFA2: (Eventually (Hold 2 r97 ) 0 4 )
03/10/2020 11:34:39 PM DEBUG [spec] spec: [H^1 r86]^[0, 4] * [H^2 r97]^[0, 4]
03/10/2020 11:34:39 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 1 r86 ) 0 4 ) (Eventually (Hold 2 r97 ) 0 4 ) )
Directed: True
Multi: False
Props: {'r97': 1, 'r86': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r86', 'weight': 0, 'label': u'r86'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r86', 'weight': 0, 'label': u'r86'}), (2, 2, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([1, 3]), 'guard': u'r97', 'weight': 0, 'label': u'r97'}), (3, 2, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r97', 'weight': 0, 'label': u'r97'}), (4, 2, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r97', 'weight': 0, 'label': u'r97'})]
		
03/10/2020 11:34:39 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([2])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([2])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([2])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([2])
     Final: set([5])

03/10/2020 11:34:39 PM DEBUG [spec] No of nodes: 6
03/10/2020 11:34:39 PM DEBUG [spec] No of edges: 10
03/10/2020 11:34:39 PM DEBUG 
End of translate


03/10/2020 11:34:39 PM INFO The bound of formula "[H^1 r86]^[0, 4] * [H^2 r97]^[0, 4]" is (4, 9)!
03/10/2020 11:34:39 PM INFO Translated formula "[H^1 r86]^[0, 4] * [H^2 r97]^[0, 4]" to infinity DFA of size (6, 10)!
03/10/2020 11:34:39 PM DEBUG [hold] Prop: r89 Duration: 2 Negation: False Props: set(['r89', 'Base4'])
03/10/2020 11:34:39 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 2 r89 )
03/10/2020 11:34:39 PM DEBUG [hold] Prop: Base4 Duration: 1 Negation: False Props: set(['r89', 'Base4'])
03/10/2020 11:34:39 PM DEBUG [eventually] Low: 0 High: 3 DFA: (Hold 1 Base4 )
03/10/2020 11:34:39 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r89 ) 0 5 ) DFA2: (Eventually (Hold 1 Base4 ) 0 3 )
03/10/2020 11:34:39 PM DEBUG [spec] spec: [H^2 r89]^[0, 5] * [H^1 Base4]^[0, 3]
03/10/2020 11:34:39 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r89 ) 0 5 ) (Eventually (Hold 1 Base4 ) 0 3 ) )
Directed: True
Multi: False
Props: {'r89': 1, 'Base4': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([1, 3]), 'guard': u'r89', 'weight': 0, 'label': u'r89'}), (1, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1, 3]), 'guard': u'r89', 'weight': 0, 'label': u'r89'}), (2, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([1, 3]), 'guard': u'r89', 'weight': 0, 'label': u'r89'}), (3, 3, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([2, 3]), 'guard': u'Base4', 'weight': 0, 'label': u'Base4'}), (4, 3, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([2, 3]), 'guard': u'Base4', 'weight': 0, 'label': u'Base4'})]
		
03/10/2020 11:34:39 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/10/2020 11:34:39 PM DEBUG [spec] No of nodes: 6
03/10/2020 11:34:39 PM DEBUG [spec] No of edges: 10
03/10/2020 11:34:39 PM DEBUG 
End of translate


03/10/2020 11:34:39 PM INFO The bound of formula "[H^2 r89]^[0, 5] * [H^1 Base4]^[0, 3]" is (4, 9)!
03/10/2020 11:34:39 PM INFO Translated formula "[H^2 r89]^[0, 5] * [H^1 Base4]^[0, 3]" to infinity DFA of size (6, 10)!
03/10/2020 11:34:39 PM DEBUG [hold] Prop: r105 Duration: 1 Negation: False Props: set(['Base5', 'r105'])
03/10/2020 11:34:39 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 1 r105 )
03/10/2020 11:34:39 PM DEBUG [hold] Prop: Base5 Duration: 1 Negation: False Props: set(['Base5', 'r105'])
03/10/2020 11:34:39 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 1 Base5 )
03/10/2020 11:34:39 PM DEBUG [concatenation] DFA1: (Eventually (Hold 1 r105 ) 0 6 ) DFA2: (Eventually (Hold 1 Base5 ) 0 6 )
03/10/2020 11:34:39 PM DEBUG [spec] spec: [H^1 r105]^[0, 6] * [H^1 Base5]^[0, 6]
03/10/2020 11:34:39 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 1 r105 ) 0 6 ) (Eventually (Hold 1 Base5 ) 0 6 ) )
Directed: True
Multi: False
Props: {'Base5': 1, 'r105': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([4])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r105', 'weight': 0, 'label': u'r105'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r105', 'weight': 0, 'label': u'r105'}), (2, 2, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([1, 3]), 'guard': u'Base5', 'weight': 0, 'label': u'Base5'}), (3, 2, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'Base5', 'weight': 0, 'label': u'Base5'})]
		
03/10/2020 11:34:39 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([4])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([2])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([2])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([2])
   Final: set([4])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([2])
     Final: set([4])

03/10/2020 11:34:39 PM DEBUG [spec] No of nodes: 5
03/10/2020 11:34:39 PM DEBUG [spec] No of edges: 8
03/10/2020 11:34:39 PM DEBUG 
End of translate


03/10/2020 11:34:39 PM INFO The bound of formula "[H^1 r105]^[0, 6] * [H^1 Base5]^[0, 6]" is (3, 13)!
03/10/2020 11:34:39 PM INFO Translated formula "[H^1 r105]^[0, 6] * [H^1 Base5]^[0, 6]" to infinity DFA of size (5, 8)!
03/10/2020 11:34:39 PM DEBUG 

Start policy computation

03/10/2020 11:34:39 PM DEBUG [extend_ts] TS: (102, 1594) ETS:(102, 1594)
03/10/2020 11:34:39 PM DEBUG [extend_ts] TS: (102, 1594) ETS:(102, 1594)
03/10/2020 11:34:39 PM DEBUG [extend_ts] TS: (102, 1594) ETS:(102, 1594)
03/10/2020 11:34:40 PM DEBUG [extend_ts] TS: (102, 1594) ETS:(102, 1594)
03/10/2020 11:34:40 PM DEBUG [extend_ts] TS: (102, 1594) ETS:(102, 1594)
03/10/2020 11:34:40 PM INFO Constructing product automaton with infinity DFA!
03/10/2020 11:34:40 PM INFO Product automaton size is: (206, 3204)
03/10/2020 11:34:40 PM INFO Constructing product automaton with infinity DFA!
03/10/2020 11:34:40 PM INFO Product automaton size is: (206, 3204)
03/10/2020 11:34:40 PM INFO Constructing product automaton with infinity DFA!
03/10/2020 11:34:40 PM INFO Product automaton size is: (206, 3204)
03/10/2020 11:34:40 PM INFO Constructing product automaton with infinity DFA!
03/10/2020 11:34:40 PM INFO Product automaton size is: (206, 3200)
03/10/2020 11:34:40 PM INFO Constructing product automaton with infinity DFA!
03/10/2020 11:34:40 PM INFO Product automaton size is: (205, 3188)
03/10/2020 11:34:45 PM INFO Max deadline: 2
03/10/2020 11:34:45 PM INFO Generated control policy is: Base1 -> 1 -> r61 -> 1 -> r26 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r50 -> 1 -> r7 -> 1 -> r12 -> 1 -> r12
03/10/2020 11:34:45 PM INFO Max deadline: -1
03/10/2020 11:34:45 PM INFO Generated control policy is: Base2 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r58 -> 1 -> r23 -> 1 -> r23
03/10/2020 11:34:45 PM INFO Max deadline: -1
03/10/2020 11:34:45 PM INFO Generated control policy is: Base3 -> 1 -> r44 -> 1 -> r86 -> 1 -> r86 -> 1 -> r91 -> 1 -> r97 -> 1 -> r97 -> 1 -> r97
03/10/2020 11:34:45 PM INFO Max deadline: -1
03/10/2020 11:34:45 PM INFO Generated control policy is: Base4 -> 1 -> r47 -> 1 -> r89 -> 1 -> r89 -> 1 -> r89 -> 1 -> r47 -> 1 -> Base4 -> 1 -> Base4
03/10/2020 11:34:45 PM INFO Max deadline: -1
03/10/2020 11:34:45 PM INFO Generated control policy is: Base5 -> 1 -> r48 -> 1 -> r55 -> 1 -> r62 -> 1 -> r105 -> 1 -> r105 -> 1 -> r98 -> 1 -> r91 -> 1 -> r49 -> 1 -> Base5 -> 1 -> Base5
03/11/2020 06:35:12 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/11/2020 06:35:12 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/11/2020 06:35:12 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/11/2020 06:35:12 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/11/2020 06:35:12 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/11/2020 06:35:12 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/11/2020 06:35:12 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/11/2020 06:35:12 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/11/2020 06:35:12 PM DEBUG [spec] No of nodes: 6
03/11/2020 06:35:12 PM DEBUG [spec] No of edges: 10
03/11/2020 06:35:12 PM DEBUG 
End of translate


03/11/2020 06:35:12 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/11/2020 06:35:12 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/11/2020 06:35:12 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r23', 'r21'])
03/11/2020 06:35:12 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 2 r21 )
03/11/2020 06:35:12 PM DEBUG [hold] Prop: r23 Duration: 1 Negation: False Props: set(['r23', 'r21'])
03/11/2020 06:35:12 PM DEBUG [eventually] Low: 0 High: 4 DFA: (Hold 1 r23 )
03/11/2020 06:35:12 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 5 ) DFA2: (Eventually (Hold 1 r23 ) 0 4 )
03/11/2020 06:35:12 PM DEBUG [spec] spec: [H^2 r21]^[0, 5] * [H^1 r23]^[0, 4]
03/11/2020 06:35:12 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 5 ) (Eventually (Hold 1 r23 ) 0 4 ) )
Directed: True
Multi: False
Props: {'r23': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r23', 'weight': 0, 'label': u'r23'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r23', 'weight': 0, 'label': u'r23'})]
		
03/11/2020 06:35:12 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/11/2020 06:35:12 PM DEBUG [spec] No of nodes: 6
03/11/2020 06:35:12 PM DEBUG [spec] No of edges: 10
03/11/2020 06:35:12 PM DEBUG 
End of translate


03/11/2020 06:35:12 PM INFO The bound of formula "[H^2 r21]^[0, 5] * [H^1 r23]^[0, 4]" is (4, 10)!
03/11/2020 06:35:12 PM INFO Translated formula "[H^2 r21]^[0, 5] * [H^1 r23]^[0, 4]" to infinity DFA of size (6, 10)!
03/11/2020 06:35:12 PM DEBUG [hold] Prop: r86 Duration: 1 Negation: False Props: set(['r97', 'r86'])
03/11/2020 06:35:12 PM DEBUG [eventually] Low: 0 High: 4 DFA: (Hold 1 r86 )
03/11/2020 06:35:12 PM DEBUG [hold] Prop: r97 Duration: 2 Negation: False Props: set(['r97', 'r86'])
03/11/2020 06:35:12 PM DEBUG [eventually] Low: 0 High: 4 DFA: (Hold 2 r97 )
03/11/2020 06:35:12 PM DEBUG [concatenation] DFA1: (Eventually (Hold 1 r86 ) 0 4 ) DFA2: (Eventually (Hold 2 r97 ) 0 4 )
03/11/2020 06:35:12 PM DEBUG [spec] spec: [H^1 r86]^[0, 4] * [H^2 r97]^[0, 4]
03/11/2020 06:35:12 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 1 r86 ) 0 4 ) (Eventually (Hold 2 r97 ) 0 4 ) )
Directed: True
Multi: False
Props: {'r97': 1, 'r86': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r86', 'weight': 0, 'label': u'r86'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r86', 'weight': 0, 'label': u'r86'}), (2, 2, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([1, 3]), 'guard': u'r97', 'weight': 0, 'label': u'r97'}), (3, 2, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r97', 'weight': 0, 'label': u'r97'}), (4, 2, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r97', 'weight': 0, 'label': u'r97'})]
		
03/11/2020 06:35:12 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([2])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([2])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([2])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([2])
     Final: set([5])

03/11/2020 06:35:12 PM DEBUG [spec] No of nodes: 6
03/11/2020 06:35:12 PM DEBUG [spec] No of edges: 10
03/11/2020 06:35:12 PM DEBUG 
End of translate


03/11/2020 06:35:12 PM INFO The bound of formula "[H^1 r86]^[0, 4] * [H^2 r97]^[0, 4]" is (4, 9)!
03/11/2020 06:35:12 PM INFO Translated formula "[H^1 r86]^[0, 4] * [H^2 r97]^[0, 4]" to infinity DFA of size (6, 10)!
03/11/2020 06:35:12 PM DEBUG [hold] Prop: r89 Duration: 2 Negation: False Props: set(['r89', 'Base4'])
03/11/2020 06:35:12 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 2 r89 )
03/11/2020 06:35:12 PM DEBUG [hold] Prop: Base4 Duration: 1 Negation: False Props: set(['r89', 'Base4'])
03/11/2020 06:35:12 PM DEBUG [eventually] Low: 0 High: 3 DFA: (Hold 1 Base4 )
03/11/2020 06:35:12 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r89 ) 0 5 ) DFA2: (Eventually (Hold 1 Base4 ) 0 3 )
03/11/2020 06:35:12 PM DEBUG [spec] spec: [H^2 r89]^[0, 5] * [H^1 Base4]^[0, 3]
03/11/2020 06:35:12 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r89 ) 0 5 ) (Eventually (Hold 1 Base4 ) 0 3 ) )
Directed: True
Multi: False
Props: {'r89': 1, 'Base4': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([1, 3]), 'guard': u'r89', 'weight': 0, 'label': u'r89'}), (1, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1, 3]), 'guard': u'r89', 'weight': 0, 'label': u'r89'}), (2, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([1, 3]), 'guard': u'r89', 'weight': 0, 'label': u'r89'}), (3, 3, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([2, 3]), 'guard': u'Base4', 'weight': 0, 'label': u'Base4'}), (4, 3, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([2, 3]), 'guard': u'Base4', 'weight': 0, 'label': u'Base4'})]
		
03/11/2020 06:35:12 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/11/2020 06:35:12 PM DEBUG [spec] No of nodes: 6
03/11/2020 06:35:12 PM DEBUG [spec] No of edges: 10
03/11/2020 06:35:12 PM DEBUG 
End of translate


03/11/2020 06:35:12 PM INFO The bound of formula "[H^2 r89]^[0, 5] * [H^1 Base4]^[0, 3]" is (4, 9)!
03/11/2020 06:35:12 PM INFO Translated formula "[H^2 r89]^[0, 5] * [H^1 Base4]^[0, 3]" to infinity DFA of size (6, 10)!
03/11/2020 06:35:12 PM DEBUG [hold] Prop: r105 Duration: 1 Negation: False Props: set(['Base5', 'r105'])
03/11/2020 06:35:12 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 1 r105 )
03/11/2020 06:35:12 PM DEBUG [hold] Prop: Base5 Duration: 1 Negation: False Props: set(['Base5', 'r105'])
03/11/2020 06:35:12 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 1 Base5 )
03/11/2020 06:35:12 PM DEBUG [concatenation] DFA1: (Eventually (Hold 1 r105 ) 0 6 ) DFA2: (Eventually (Hold 1 Base5 ) 0 6 )
03/11/2020 06:35:12 PM DEBUG [spec] spec: [H^1 r105]^[0, 6] * [H^1 Base5]^[0, 6]
03/11/2020 06:35:12 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 1 r105 ) 0 6 ) (Eventually (Hold 1 Base5 ) 0 6 ) )
Directed: True
Multi: False
Props: {'Base5': 1, 'r105': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([4])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r105', 'weight': 0, 'label': u'r105'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r105', 'weight': 0, 'label': u'r105'}), (2, 2, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([1, 3]), 'guard': u'Base5', 'weight': 0, 'label': u'Base5'}), (3, 2, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'Base5', 'weight': 0, 'label': u'Base5'})]
		
03/11/2020 06:35:12 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([4])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([2])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([2])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([2])
   Final: set([4])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([2])
     Final: set([4])

03/11/2020 06:35:12 PM DEBUG [spec] No of nodes: 5
03/11/2020 06:35:12 PM DEBUG [spec] No of edges: 8
03/11/2020 06:35:12 PM DEBUG 
End of translate


03/11/2020 06:35:12 PM INFO The bound of formula "[H^1 r105]^[0, 6] * [H^1 Base5]^[0, 6]" is (3, 13)!
03/11/2020 06:35:12 PM INFO Translated formula "[H^1 r105]^[0, 6] * [H^1 Base5]^[0, 6]" to infinity DFA of size (5, 8)!
03/11/2020 06:35:12 PM DEBUG 

Start policy computation

03/11/2020 06:35:12 PM DEBUG [extend_ts] TS: (102, 1594) ETS:(102, 1594)
03/11/2020 06:35:13 PM DEBUG [extend_ts] TS: (102, 1594) ETS:(102, 1594)
03/11/2020 06:35:13 PM DEBUG [extend_ts] TS: (102, 1594) ETS:(102, 1594)
03/11/2020 06:35:13 PM DEBUG [extend_ts] TS: (102, 1594) ETS:(102, 1594)
03/11/2020 06:35:13 PM DEBUG [extend_ts] TS: (102, 1594) ETS:(102, 1594)
03/11/2020 06:35:13 PM INFO Constructing product automaton with infinity DFA!
03/11/2020 06:35:13 PM INFO Product automaton size is: (206, 3204)
03/11/2020 06:35:13 PM INFO Constructing product automaton with infinity DFA!
03/11/2020 06:35:13 PM INFO Product automaton size is: (206, 3204)
03/11/2020 06:35:13 PM INFO Constructing product automaton with infinity DFA!
03/11/2020 06:35:13 PM INFO Product automaton size is: (206, 3204)
03/11/2020 06:35:13 PM INFO Constructing product automaton with infinity DFA!
03/11/2020 06:35:13 PM INFO Product automaton size is: (206, 3200)
03/11/2020 06:35:13 PM INFO Constructing product automaton with infinity DFA!
03/11/2020 06:35:13 PM INFO Product automaton size is: (205, 3188)
03/11/2020 06:35:17 PM INFO Max deadline: 2
03/11/2020 06:35:17 PM INFO Generated control policy is: Base1 -> 1 -> r61 -> 1 -> r26 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r50 -> 1 -> r7 -> 1 -> r12 -> 1 -> r12
03/11/2020 06:35:17 PM INFO Max deadline: -1
03/11/2020 06:35:17 PM INFO Generated control policy is: Base2 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r58 -> 1 -> r23 -> 1 -> r23
03/11/2020 06:35:17 PM INFO Max deadline: -1
03/11/2020 06:35:17 PM INFO Generated control policy is: Base3 -> 1 -> r44 -> 1 -> r86 -> 1 -> r86 -> 1 -> r91 -> 1 -> r97 -> 1 -> r97 -> 1 -> r97
03/11/2020 06:35:17 PM INFO Max deadline: -1
03/11/2020 06:35:17 PM INFO Generated control policy is: Base4 -> 1 -> r47 -> 1 -> r89 -> 1 -> r89 -> 1 -> r89 -> 1 -> r47 -> 1 -> Base4 -> 1 -> Base4
03/11/2020 06:35:17 PM INFO Max deadline: -1
03/11/2020 06:35:17 PM INFO Generated control policy is: Base5 -> 1 -> r48 -> 1 -> r55 -> 1 -> r62 -> 1 -> r105 -> 1 -> r105 -> 1 -> r98 -> 1 -> r91 -> 1 -> r49 -> 1 -> Base5 -> 1 -> Base5
03/11/2020 06:38:44 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/11/2020 06:38:44 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/11/2020 06:38:44 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/11/2020 06:38:44 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/11/2020 06:38:44 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/11/2020 06:38:44 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/11/2020 06:38:44 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/11/2020 06:38:44 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/11/2020 06:38:44 PM DEBUG [spec] No of nodes: 6
03/11/2020 06:38:44 PM DEBUG [spec] No of edges: 10
03/11/2020 06:38:44 PM DEBUG 
End of translate


03/11/2020 06:38:44 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/11/2020 06:38:44 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/11/2020 06:38:44 PM DEBUG 

Start policy computation

03/11/2020 06:38:44 PM DEBUG [extend_ts] TS: (61, 433) ETS:(61, 433)
03/11/2020 06:38:44 PM INFO Constructing product automaton with infinity DFA!
03/11/2020 06:38:44 PM INFO Product automaton size is: (61, 433)
03/11/2020 06:43:03 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/11/2020 06:43:03 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/11/2020 06:43:03 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/11/2020 06:43:03 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/11/2020 06:43:03 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/11/2020 06:43:03 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/11/2020 06:43:03 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/11/2020 06:43:03 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/11/2020 06:43:03 PM DEBUG [spec] No of nodes: 6
03/11/2020 06:43:03 PM DEBUG [spec] No of edges: 10
03/11/2020 06:43:03 PM DEBUG 
End of translate


03/11/2020 06:43:03 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/11/2020 06:43:03 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/11/2020 06:43:03 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r23', 'r21'])
03/11/2020 06:43:03 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 2 r21 )
03/11/2020 06:43:03 PM DEBUG [hold] Prop: r23 Duration: 1 Negation: False Props: set(['r23', 'r21'])
03/11/2020 06:43:03 PM DEBUG [eventually] Low: 0 High: 4 DFA: (Hold 1 r23 )
03/11/2020 06:43:03 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 5 ) DFA2: (Eventually (Hold 1 r23 ) 0 4 )
03/11/2020 06:43:03 PM DEBUG [spec] spec: [H^2 r21]^[0, 5] * [H^1 r23]^[0, 4]
03/11/2020 06:43:03 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 5 ) (Eventually (Hold 1 r23 ) 0 4 ) )
Directed: True
Multi: False
Props: {'r23': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r23', 'weight': 0, 'label': u'r23'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r23', 'weight': 0, 'label': u'r23'})]
		
03/11/2020 06:43:03 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/11/2020 06:43:03 PM DEBUG [spec] No of nodes: 6
03/11/2020 06:43:03 PM DEBUG [spec] No of edges: 10
03/11/2020 06:43:03 PM DEBUG 
End of translate


03/11/2020 06:43:03 PM INFO The bound of formula "[H^2 r21]^[0, 5] * [H^1 r23]^[0, 4]" is (4, 10)!
03/11/2020 06:43:03 PM INFO Translated formula "[H^2 r21]^[0, 5] * [H^1 r23]^[0, 4]" to infinity DFA of size (6, 10)!
03/11/2020 06:43:03 PM DEBUG [hold] Prop: r86 Duration: 1 Negation: False Props: set(['r97', 'r86'])
03/11/2020 06:43:03 PM DEBUG [eventually] Low: 0 High: 4 DFA: (Hold 1 r86 )
03/11/2020 06:43:03 PM DEBUG [hold] Prop: r97 Duration: 2 Negation: False Props: set(['r97', 'r86'])
03/11/2020 06:43:03 PM DEBUG [eventually] Low: 0 High: 4 DFA: (Hold 2 r97 )
03/11/2020 06:43:03 PM DEBUG [concatenation] DFA1: (Eventually (Hold 1 r86 ) 0 4 ) DFA2: (Eventually (Hold 2 r97 ) 0 4 )
03/11/2020 06:43:03 PM DEBUG [spec] spec: [H^1 r86]^[0, 4] * [H^2 r97]^[0, 4]
03/11/2020 06:43:03 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 1 r86 ) 0 4 ) (Eventually (Hold 2 r97 ) 0 4 ) )
Directed: True
Multi: False
Props: {'r97': 1, 'r86': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r86', 'weight': 0, 'label': u'r86'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r86', 'weight': 0, 'label': u'r86'}), (2, 2, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([1, 3]), 'guard': u'r97', 'weight': 0, 'label': u'r97'}), (3, 2, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r97', 'weight': 0, 'label': u'r97'}), (4, 2, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r97', 'weight': 0, 'label': u'r97'})]
		
03/11/2020 06:43:03 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([2])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([2])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([2])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([2])
     Final: set([5])

03/11/2020 06:43:03 PM DEBUG [spec] No of nodes: 6
03/11/2020 06:43:03 PM DEBUG [spec] No of edges: 10
03/11/2020 06:43:03 PM DEBUG 
End of translate


03/11/2020 06:43:03 PM INFO The bound of formula "[H^1 r86]^[0, 4] * [H^2 r97]^[0, 4]" is (4, 9)!
03/11/2020 06:43:03 PM INFO Translated formula "[H^1 r86]^[0, 4] * [H^2 r97]^[0, 4]" to infinity DFA of size (6, 10)!
03/11/2020 06:43:03 PM DEBUG [hold] Prop: r89 Duration: 2 Negation: False Props: set(['r89', 'Base4'])
03/11/2020 06:43:03 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 2 r89 )
03/11/2020 06:43:03 PM DEBUG [hold] Prop: Base4 Duration: 1 Negation: False Props: set(['r89', 'Base4'])
03/11/2020 06:43:03 PM DEBUG [eventually] Low: 0 High: 3 DFA: (Hold 1 Base4 )
03/11/2020 06:43:03 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r89 ) 0 5 ) DFA2: (Eventually (Hold 1 Base4 ) 0 3 )
03/11/2020 06:43:03 PM DEBUG [spec] spec: [H^2 r89]^[0, 5] * [H^1 Base4]^[0, 3]
03/11/2020 06:43:03 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r89 ) 0 5 ) (Eventually (Hold 1 Base4 ) 0 3 ) )
Directed: True
Multi: False
Props: {'r89': 1, 'Base4': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([1, 3]), 'guard': u'r89', 'weight': 0, 'label': u'r89'}), (1, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1, 3]), 'guard': u'r89', 'weight': 0, 'label': u'r89'}), (2, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([1, 3]), 'guard': u'r89', 'weight': 0, 'label': u'r89'}), (3, 3, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([2, 3]), 'guard': u'Base4', 'weight': 0, 'label': u'Base4'}), (4, 3, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([2, 3]), 'guard': u'Base4', 'weight': 0, 'label': u'Base4'})]
		
03/11/2020 06:43:03 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/11/2020 06:43:03 PM DEBUG [spec] No of nodes: 6
03/11/2020 06:43:03 PM DEBUG [spec] No of edges: 10
03/11/2020 06:43:03 PM DEBUG 
End of translate


03/11/2020 06:43:03 PM INFO The bound of formula "[H^2 r89]^[0, 5] * [H^1 Base4]^[0, 3]" is (4, 9)!
03/11/2020 06:43:03 PM INFO Translated formula "[H^2 r89]^[0, 5] * [H^1 Base4]^[0, 3]" to infinity DFA of size (6, 10)!
03/11/2020 06:43:03 PM DEBUG [hold] Prop: r105 Duration: 1 Negation: False Props: set(['Base5', 'r105'])
03/11/2020 06:43:03 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 1 r105 )
03/11/2020 06:43:03 PM DEBUG [hold] Prop: Base5 Duration: 1 Negation: False Props: set(['Base5', 'r105'])
03/11/2020 06:43:03 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 1 Base5 )
03/11/2020 06:43:03 PM DEBUG [concatenation] DFA1: (Eventually (Hold 1 r105 ) 0 6 ) DFA2: (Eventually (Hold 1 Base5 ) 0 6 )
03/11/2020 06:43:03 PM DEBUG [spec] spec: [H^1 r105]^[0, 6] * [H^1 Base5]^[0, 6]
03/11/2020 06:43:03 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 1 r105 ) 0 6 ) (Eventually (Hold 1 Base5 ) 0 6 ) )
Directed: True
Multi: False
Props: {'Base5': 1, 'r105': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([4])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r105', 'weight': 0, 'label': u'r105'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r105', 'weight': 0, 'label': u'r105'}), (2, 2, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([1, 3]), 'guard': u'Base5', 'weight': 0, 'label': u'Base5'}), (3, 2, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'Base5', 'weight': 0, 'label': u'Base5'})]
		
03/11/2020 06:43:03 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([4])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([2])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([2])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([2])
   Final: set([4])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([2])
     Final: set([4])

03/11/2020 06:43:03 PM DEBUG [spec] No of nodes: 5
03/11/2020 06:43:03 PM DEBUG [spec] No of edges: 8
03/11/2020 06:43:03 PM DEBUG 
End of translate


03/11/2020 06:43:03 PM INFO The bound of formula "[H^1 r105]^[0, 6] * [H^1 Base5]^[0, 6]" is (3, 13)!
03/11/2020 06:43:03 PM INFO Translated formula "[H^1 r105]^[0, 6] * [H^1 Base5]^[0, 6]" to infinity DFA of size (5, 8)!
03/11/2020 06:43:03 PM DEBUG 

Start policy computation

03/11/2020 06:43:03 PM DEBUG [extend_ts] TS: (102, 1594) ETS:(102, 1594)
03/11/2020 06:43:03 PM DEBUG [extend_ts] TS: (102, 1594) ETS:(102, 1594)
03/11/2020 06:43:03 PM DEBUG [extend_ts] TS: (102, 1594) ETS:(102, 1594)
03/11/2020 06:43:03 PM DEBUG [extend_ts] TS: (102, 1594) ETS:(102, 1594)
03/11/2020 06:43:03 PM DEBUG [extend_ts] TS: (102, 1594) ETS:(102, 1594)
03/11/2020 06:43:03 PM INFO Constructing product automaton with infinity DFA!
03/11/2020 06:43:03 PM INFO Product automaton size is: (206, 3204)
03/11/2020 06:43:03 PM INFO Constructing product automaton with infinity DFA!
03/11/2020 06:43:03 PM INFO Product automaton size is: (206, 3204)
03/11/2020 06:43:03 PM INFO Constructing product automaton with infinity DFA!
03/11/2020 06:43:03 PM INFO Product automaton size is: (206, 3204)
03/11/2020 06:43:03 PM INFO Constructing product automaton with infinity DFA!
03/11/2020 06:43:03 PM INFO Product automaton size is: (206, 3200)
03/11/2020 06:43:03 PM INFO Constructing product automaton with infinity DFA!
03/11/2020 06:43:03 PM INFO Product automaton size is: (205, 3188)
03/11/2020 06:43:07 PM INFO Max deadline: 2
03/11/2020 06:43:07 PM INFO Generated control policy is: Base1 -> 1 -> r61 -> 1 -> r26 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r50 -> 1 -> r7 -> 1 -> r12 -> 1 -> r12
03/11/2020 06:43:07 PM INFO Max deadline: -1
03/11/2020 06:43:07 PM INFO Generated control policy is: Base2 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r58 -> 1 -> r23 -> 1 -> r23
03/11/2020 06:43:07 PM INFO Max deadline: -1
03/11/2020 06:43:07 PM INFO Generated control policy is: Base3 -> 1 -> r44 -> 1 -> r86 -> 1 -> r86 -> 1 -> r91 -> 1 -> r97 -> 1 -> r97 -> 1 -> r97
03/11/2020 06:43:07 PM INFO Max deadline: -1
03/11/2020 06:43:07 PM INFO Generated control policy is: Base4 -> 1 -> r47 -> 1 -> r89 -> 1 -> r89 -> 1 -> r89 -> 1 -> r47 -> 1 -> Base4 -> 1 -> Base4
03/11/2020 06:43:07 PM INFO Max deadline: -1
03/11/2020 06:43:07 PM INFO Generated control policy is: Base5 -> 1 -> r48 -> 1 -> r55 -> 1 -> r62 -> 1 -> r105 -> 1 -> r105 -> 1 -> r98 -> 1 -> r91 -> 1 -> r49 -> 1 -> Base5 -> 1 -> Base5
03/11/2020 06:44:23 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/11/2020 06:44:23 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/11/2020 06:44:23 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/11/2020 06:44:23 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/11/2020 06:44:23 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/11/2020 06:44:23 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/11/2020 06:44:23 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/11/2020 06:44:23 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/11/2020 06:44:23 PM DEBUG [spec] No of nodes: 6
03/11/2020 06:44:23 PM DEBUG [spec] No of edges: 10
03/11/2020 06:44:23 PM DEBUG 
End of translate


03/11/2020 06:44:23 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/11/2020 06:44:23 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/11/2020 06:44:23 PM DEBUG 

Start policy computation

03/11/2020 06:44:23 PM DEBUG [extend_ts] TS: (61, 433) ETS:(61, 433)
03/11/2020 06:44:23 PM INFO Constructing product automaton with infinity DFA!
03/11/2020 06:44:23 PM INFO Product automaton size is: (61, 433)
03/11/2020 06:45:18 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/11/2020 06:45:18 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/11/2020 06:45:18 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/11/2020 06:45:18 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/11/2020 06:45:18 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/11/2020 06:45:18 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/11/2020 06:45:18 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/11/2020 06:45:18 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/11/2020 06:45:18 PM DEBUG [spec] No of nodes: 6
03/11/2020 06:45:18 PM DEBUG [spec] No of edges: 10
03/11/2020 06:45:18 PM DEBUG 
End of translate


03/11/2020 06:45:18 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/11/2020 06:45:18 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/11/2020 06:45:18 PM DEBUG 

Start policy computation

03/11/2020 06:45:18 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/11/2020 06:45:18 PM INFO Constructing product automaton with infinity DFA!
03/11/2020 06:45:18 PM INFO Product automaton size is: (130, 977)
03/11/2020 06:45:19 PM INFO Max deadline: 1
03/11/2020 06:45:19 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/12/2020 03:23:35 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/12/2020 03:23:35 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/12/2020 03:23:35 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/12/2020 03:23:35 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/12/2020 03:23:35 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/12/2020 03:23:35 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/12/2020 03:23:35 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/12/2020 03:23:35 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/12/2020 03:23:35 PM DEBUG [spec] No of nodes: 6
03/12/2020 03:23:35 PM DEBUG [spec] No of edges: 10
03/12/2020 03:23:35 PM DEBUG 
End of translate


03/12/2020 03:23:35 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/12/2020 03:23:35 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/12/2020 03:23:35 PM DEBUG 

Start policy computation

03/12/2020 03:23:36 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/12/2020 03:23:36 PM INFO Constructing product automaton with infinity DFA!
03/12/2020 03:23:36 PM INFO Product automaton size is: (130, 977)
03/12/2020 03:23:36 PM INFO Max deadline: 1
03/12/2020 03:23:36 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/12/2020 03:28:25 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/12/2020 03:28:25 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/12/2020 03:28:25 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/12/2020 03:28:25 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/12/2020 03:28:25 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/12/2020 03:28:25 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/12/2020 03:28:25 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/12/2020 03:28:25 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/12/2020 03:28:25 PM DEBUG [spec] No of nodes: 6
03/12/2020 03:28:25 PM DEBUG [spec] No of edges: 10
03/12/2020 03:28:25 PM DEBUG 
End of translate


03/12/2020 03:28:25 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/12/2020 03:28:25 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/12/2020 03:28:25 PM DEBUG 

Start policy computation

03/12/2020 03:28:25 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/12/2020 03:28:25 PM INFO Constructing product automaton with infinity DFA!
03/12/2020 03:28:25 PM INFO Product automaton size is: (130, 977)
03/12/2020 03:28:26 PM INFO Max deadline: 1
03/12/2020 03:28:26 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/12/2020 03:28:30 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/12/2020 03:28:30 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/12/2020 03:28:30 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/12/2020 03:28:30 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/12/2020 03:28:30 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/12/2020 03:28:30 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/12/2020 03:28:30 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/12/2020 03:28:30 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/12/2020 03:28:30 PM DEBUG [spec] No of nodes: 6
03/12/2020 03:28:30 PM DEBUG [spec] No of edges: 10
03/12/2020 03:28:30 PM DEBUG 
End of translate


03/12/2020 03:28:30 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/12/2020 03:28:30 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/12/2020 03:28:30 PM DEBUG 

Start policy computation

03/12/2020 03:28:30 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/12/2020 03:28:30 PM INFO Constructing product automaton with infinity DFA!
03/12/2020 03:28:30 PM INFO Product automaton size is: (130, 977)
03/12/2020 03:28:30 PM INFO Max deadline: 1
03/12/2020 03:28:30 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/12/2020 03:41:43 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/12/2020 03:41:43 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/12/2020 03:41:43 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/12/2020 03:41:43 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/12/2020 03:41:43 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/12/2020 03:41:43 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/12/2020 03:41:43 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/12/2020 03:41:43 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/12/2020 03:41:43 PM DEBUG [spec] No of nodes: 6
03/12/2020 03:41:43 PM DEBUG [spec] No of edges: 10
03/12/2020 03:41:43 PM DEBUG 
End of translate


03/12/2020 03:41:43 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/12/2020 03:41:43 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/12/2020 03:41:43 PM DEBUG 

Start policy computation

03/12/2020 03:41:43 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/12/2020 03:41:43 PM INFO Constructing product automaton with infinity DFA!
03/12/2020 03:41:43 PM INFO Product automaton size is: (130, 977)
03/12/2020 03:41:43 PM INFO Max deadline: 1
03/12/2020 03:41:43 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/12/2020 03:43:27 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/12/2020 03:43:27 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/12/2020 03:43:27 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/12/2020 03:43:27 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/12/2020 03:43:27 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/12/2020 03:43:27 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/12/2020 03:43:27 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/12/2020 03:43:27 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/12/2020 03:43:27 PM DEBUG [spec] No of nodes: 6
03/12/2020 03:43:27 PM DEBUG [spec] No of edges: 10
03/12/2020 03:43:27 PM DEBUG 
End of translate


03/12/2020 03:43:27 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/12/2020 03:43:27 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/12/2020 03:43:27 PM DEBUG 

Start policy computation

03/12/2020 03:43:27 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/12/2020 03:43:27 PM INFO Constructing product automaton with infinity DFA!
03/12/2020 03:43:27 PM INFO Product automaton size is: (130, 977)
03/12/2020 03:43:27 PM INFO Max deadline: 1
03/12/2020 03:43:27 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/12/2020 03:48:34 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/12/2020 03:48:34 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/12/2020 03:48:34 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/12/2020 03:48:34 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/12/2020 03:48:34 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/12/2020 03:48:34 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/12/2020 03:48:34 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/12/2020 03:48:35 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/12/2020 03:48:35 PM DEBUG [spec] No of nodes: 6
03/12/2020 03:48:35 PM DEBUG [spec] No of edges: 10
03/12/2020 03:48:35 PM DEBUG 
End of translate


03/12/2020 03:48:35 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/12/2020 03:48:35 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/12/2020 03:48:35 PM DEBUG 

Start policy computation

03/12/2020 03:48:35 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/12/2020 03:48:35 PM INFO Constructing product automaton with infinity DFA!
03/12/2020 03:48:35 PM INFO Product automaton size is: (130, 977)
03/12/2020 03:48:35 PM INFO Max deadline: 1
03/12/2020 03:48:35 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/12/2020 03:50:07 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/12/2020 03:50:07 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/12/2020 03:50:07 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/12/2020 03:50:07 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/12/2020 03:50:07 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/12/2020 03:50:07 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/12/2020 03:50:07 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/12/2020 03:50:07 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/12/2020 03:50:07 PM DEBUG [spec] No of nodes: 6
03/12/2020 03:50:07 PM DEBUG [spec] No of edges: 10
03/12/2020 03:50:07 PM DEBUG 
End of translate


03/12/2020 03:50:07 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/12/2020 03:50:07 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/12/2020 03:50:07 PM DEBUG 

Start policy computation

03/12/2020 03:50:07 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/12/2020 03:50:07 PM INFO Constructing product automaton with infinity DFA!
03/12/2020 03:50:07 PM INFO Product automaton size is: (130, 977)
03/12/2020 03:50:07 PM INFO Max deadline: 1
03/12/2020 03:50:07 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/12/2020 04:32:01 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/12/2020 04:32:01 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/12/2020 04:32:01 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/12/2020 04:32:01 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/12/2020 04:32:01 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/12/2020 04:32:01 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/12/2020 04:32:01 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/12/2020 04:32:01 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/12/2020 04:32:01 PM DEBUG [spec] No of nodes: 6
03/12/2020 04:32:01 PM DEBUG [spec] No of edges: 10
03/12/2020 04:32:01 PM DEBUG 
End of translate


03/12/2020 04:32:01 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/12/2020 04:32:01 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/12/2020 04:32:01 PM DEBUG 

Start policy computation

03/12/2020 04:32:01 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/12/2020 04:32:01 PM INFO Constructing product automaton with infinity DFA!
03/12/2020 04:32:01 PM INFO Product automaton size is: (130, 977)
03/12/2020 04:32:01 PM INFO Max deadline: 1
03/12/2020 04:32:01 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/12/2020 04:33:19 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/12/2020 04:33:19 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/12/2020 04:33:19 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/12/2020 04:33:19 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/12/2020 04:33:19 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/12/2020 04:33:19 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/12/2020 04:33:19 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/12/2020 04:33:19 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/12/2020 04:33:19 PM DEBUG [spec] No of nodes: 6
03/12/2020 04:33:19 PM DEBUG [spec] No of edges: 10
03/12/2020 04:33:19 PM DEBUG 
End of translate


03/12/2020 04:33:19 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/12/2020 04:33:19 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/12/2020 04:33:19 PM DEBUG 

Start policy computation

03/12/2020 04:33:19 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/12/2020 04:33:19 PM INFO Constructing product automaton with infinity DFA!
03/12/2020 04:33:19 PM INFO Product automaton size is: (130, 977)
03/12/2020 04:33:19 PM INFO Max deadline: 1
03/12/2020 04:33:19 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/12/2020 04:34:05 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/12/2020 04:34:05 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/12/2020 04:34:05 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/12/2020 04:34:05 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/12/2020 04:34:05 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/12/2020 04:34:05 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/12/2020 04:34:05 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/12/2020 04:34:05 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/12/2020 04:34:05 PM DEBUG [spec] No of nodes: 6
03/12/2020 04:34:05 PM DEBUG [spec] No of edges: 10
03/12/2020 04:34:05 PM DEBUG 
End of translate


03/12/2020 04:34:05 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/12/2020 04:34:05 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/12/2020 04:34:05 PM DEBUG 

Start policy computation

03/12/2020 04:34:05 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/12/2020 04:34:05 PM INFO Constructing product automaton with infinity DFA!
03/12/2020 04:34:05 PM INFO Product automaton size is: (130, 977)
03/12/2020 04:34:05 PM INFO Max deadline: 1
03/12/2020 04:34:05 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/12/2020 04:35:30 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/12/2020 04:35:30 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/12/2020 04:35:30 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/12/2020 04:35:30 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/12/2020 04:35:30 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/12/2020 04:35:30 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/12/2020 04:35:30 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/12/2020 04:35:30 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/12/2020 04:35:30 PM DEBUG [spec] No of nodes: 6
03/12/2020 04:35:30 PM DEBUG [spec] No of edges: 10
03/12/2020 04:35:30 PM DEBUG 
End of translate


03/12/2020 04:35:30 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/12/2020 04:35:30 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/12/2020 04:35:30 PM DEBUG 

Start policy computation

03/12/2020 04:35:31 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/12/2020 04:35:31 PM INFO Constructing product automaton with infinity DFA!
03/12/2020 04:35:31 PM INFO Product automaton size is: (130, 977)
03/12/2020 04:35:31 PM INFO Max deadline: 1
03/12/2020 04:35:31 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/12/2020 04:36:38 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/12/2020 04:36:38 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/12/2020 04:36:38 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/12/2020 04:36:38 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/12/2020 04:36:38 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/12/2020 04:36:38 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/12/2020 04:36:38 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/12/2020 04:36:38 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/12/2020 04:36:38 PM DEBUG [spec] No of nodes: 6
03/12/2020 04:36:38 PM DEBUG [spec] No of edges: 10
03/12/2020 04:36:38 PM DEBUG 
End of translate


03/12/2020 04:36:38 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/12/2020 04:36:38 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/12/2020 04:36:38 PM DEBUG 

Start policy computation

03/12/2020 04:36:38 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/12/2020 04:36:38 PM INFO Constructing product automaton with infinity DFA!
03/12/2020 04:36:38 PM INFO Product automaton size is: (130, 977)
03/12/2020 04:37:12 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/12/2020 04:37:12 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/12/2020 04:37:12 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/12/2020 04:37:12 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/12/2020 04:37:12 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/12/2020 04:37:12 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/12/2020 04:37:12 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/12/2020 04:37:12 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/12/2020 04:37:12 PM DEBUG [spec] No of nodes: 6
03/12/2020 04:37:12 PM DEBUG [spec] No of edges: 10
03/12/2020 04:37:12 PM DEBUG 
End of translate


03/12/2020 04:37:12 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/12/2020 04:37:12 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/12/2020 04:37:12 PM DEBUG 

Start policy computation

03/12/2020 04:37:12 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/12/2020 04:37:12 PM INFO Constructing product automaton with infinity DFA!
03/12/2020 04:37:12 PM INFO Product automaton size is: (130, 977)
03/12/2020 04:37:12 PM INFO Max deadline: 1
03/12/2020 04:37:12 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/12/2020 04:37:47 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/12/2020 04:37:47 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/12/2020 04:37:47 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/12/2020 04:37:47 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/12/2020 04:37:47 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/12/2020 04:37:47 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/12/2020 04:37:47 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/12/2020 04:37:47 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/12/2020 04:37:47 PM DEBUG [spec] No of nodes: 6
03/12/2020 04:37:47 PM DEBUG [spec] No of edges: 10
03/12/2020 04:37:47 PM DEBUG 
End of translate


03/12/2020 04:37:47 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/12/2020 04:37:47 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/12/2020 04:37:47 PM DEBUG 

Start policy computation

03/12/2020 04:37:47 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/12/2020 04:37:47 PM INFO Constructing product automaton with infinity DFA!
03/12/2020 04:37:47 PM INFO Product automaton size is: (130, 977)
03/12/2020 04:37:48 PM DEBUG findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans (u'/usr/share/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000
03/12/2020 04:37:48 PM DEBUG findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=14.0 to DejaVu Sans (u'/usr/share/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000
03/12/2020 04:37:57 PM INFO Max deadline: 1
03/12/2020 04:37:57 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/12/2020 04:39:14 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/12/2020 04:39:14 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/12/2020 04:39:14 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/12/2020 04:39:14 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/12/2020 04:39:14 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/12/2020 04:39:14 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/12/2020 04:39:14 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/12/2020 04:39:14 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/12/2020 04:39:14 PM DEBUG [spec] No of nodes: 6
03/12/2020 04:39:14 PM DEBUG [spec] No of edges: 10
03/12/2020 04:39:14 PM DEBUG 
End of translate


03/12/2020 04:39:14 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/12/2020 04:39:14 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/12/2020 04:39:14 PM DEBUG 

Start policy computation

03/12/2020 04:39:14 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/12/2020 04:39:14 PM INFO Constructing product automaton with infinity DFA!
03/12/2020 04:39:14 PM INFO Product automaton size is: (130, 977)
03/12/2020 04:39:20 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/12/2020 04:39:20 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/12/2020 04:39:20 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/12/2020 04:39:20 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/12/2020 04:39:20 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/12/2020 04:39:20 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/12/2020 04:39:20 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/12/2020 04:39:20 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/12/2020 04:39:20 PM DEBUG [spec] No of nodes: 6
03/12/2020 04:39:20 PM DEBUG [spec] No of edges: 10
03/12/2020 04:39:20 PM DEBUG 
End of translate


03/12/2020 04:39:20 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/12/2020 04:39:20 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/12/2020 04:39:20 PM DEBUG 

Start policy computation

03/12/2020 04:39:20 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/12/2020 04:39:20 PM INFO Constructing product automaton with infinity DFA!
03/12/2020 04:39:20 PM INFO Product automaton size is: (130, 977)
03/12/2020 04:39:33 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/12/2020 04:39:33 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/12/2020 04:39:33 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/12/2020 04:39:33 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/12/2020 04:39:33 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/12/2020 04:39:33 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/12/2020 04:39:33 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/12/2020 04:39:33 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/12/2020 04:39:33 PM DEBUG [spec] No of nodes: 6
03/12/2020 04:39:33 PM DEBUG [spec] No of edges: 10
03/12/2020 04:39:33 PM DEBUG 
End of translate


03/12/2020 04:39:33 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/12/2020 04:39:33 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/12/2020 04:39:33 PM DEBUG 

Start policy computation

03/12/2020 04:39:33 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/12/2020 04:39:33 PM INFO Constructing product automaton with infinity DFA!
03/12/2020 04:39:33 PM INFO Product automaton size is: (130, 977)
03/12/2020 04:40:10 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/12/2020 04:40:10 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/12/2020 04:40:10 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/12/2020 04:40:10 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/12/2020 04:40:10 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/12/2020 04:40:10 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/12/2020 04:40:10 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/12/2020 04:40:10 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/12/2020 04:40:10 PM DEBUG [spec] No of nodes: 6
03/12/2020 04:40:10 PM DEBUG [spec] No of edges: 10
03/12/2020 04:40:10 PM DEBUG 
End of translate


03/12/2020 04:40:10 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/12/2020 04:40:10 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/12/2020 04:40:10 PM DEBUG 

Start policy computation

03/12/2020 04:40:10 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/12/2020 04:40:10 PM INFO Constructing product automaton with infinity DFA!
03/12/2020 04:40:10 PM INFO Product automaton size is: (130, 977)
03/12/2020 04:40:10 PM DEBUG findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans (u'/usr/share/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000
03/12/2020 04:40:10 PM DEBUG findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=14.0 to DejaVu Sans (u'/usr/share/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000
03/12/2020 04:40:33 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/12/2020 04:40:33 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/12/2020 04:40:33 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/12/2020 04:40:33 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/12/2020 04:40:33 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/12/2020 04:40:33 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/12/2020 04:40:33 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/12/2020 04:40:33 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/12/2020 04:40:33 PM DEBUG [spec] No of nodes: 6
03/12/2020 04:40:33 PM DEBUG [spec] No of edges: 10
03/12/2020 04:40:33 PM DEBUG 
End of translate


03/12/2020 04:40:33 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/12/2020 04:40:33 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/12/2020 04:40:33 PM DEBUG 

Start policy computation

03/12/2020 04:40:33 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/12/2020 04:40:33 PM INFO Constructing product automaton with infinity DFA!
03/12/2020 04:40:33 PM INFO Product automaton size is: (130, 977)
03/12/2020 04:40:52 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/12/2020 04:40:52 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/12/2020 04:40:52 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/12/2020 04:40:52 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/12/2020 04:40:52 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/12/2020 04:40:52 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/12/2020 04:40:52 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/12/2020 04:40:52 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/12/2020 04:40:52 PM DEBUG [spec] No of nodes: 6
03/12/2020 04:40:52 PM DEBUG [spec] No of edges: 10
03/12/2020 04:40:52 PM DEBUG 
End of translate


03/12/2020 04:40:52 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/12/2020 04:40:52 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/12/2020 04:40:52 PM DEBUG 

Start policy computation

03/12/2020 04:40:52 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/12/2020 04:40:52 PM INFO Constructing product automaton with infinity DFA!
03/12/2020 04:40:52 PM INFO Product automaton size is: (130, 977)
03/12/2020 04:40:53 PM DEBUG findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans (u'/usr/share/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000
03/12/2020 04:40:53 PM DEBUG findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=14.0 to DejaVu Sans (u'/usr/share/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000
03/12/2020 04:40:56 PM INFO Max deadline: 1
03/12/2020 04:40:56 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/12/2020 05:37:48 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/12/2020 05:37:48 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/12/2020 05:37:48 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/12/2020 05:37:48 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/12/2020 05:37:48 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/12/2020 05:37:48 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/12/2020 05:37:48 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/12/2020 05:37:48 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/12/2020 05:37:48 PM DEBUG [spec] No of nodes: 6
03/12/2020 05:37:48 PM DEBUG [spec] No of edges: 10
03/12/2020 05:37:48 PM DEBUG 
End of translate


03/12/2020 05:37:48 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/12/2020 05:37:48 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/12/2020 05:37:48 PM DEBUG 

Start policy computation

03/12/2020 05:37:48 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/12/2020 05:37:48 PM INFO Constructing product automaton with infinity DFA!
03/12/2020 05:37:48 PM INFO Product automaton size is: (130, 977)
03/12/2020 05:37:48 PM INFO Max deadline: 1
03/12/2020 05:37:48 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/12/2020 05:38:01 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/12/2020 05:38:01 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/12/2020 05:38:01 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/12/2020 05:38:01 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/12/2020 05:38:01 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/12/2020 05:38:01 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/12/2020 05:38:01 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/12/2020 05:38:01 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/12/2020 05:38:01 PM DEBUG [spec] No of nodes: 6
03/12/2020 05:38:01 PM DEBUG [spec] No of edges: 10
03/12/2020 05:38:01 PM DEBUG 
End of translate


03/12/2020 05:38:01 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/12/2020 05:38:01 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/12/2020 05:38:01 PM DEBUG 

Start policy computation

03/12/2020 05:38:01 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/12/2020 05:38:01 PM INFO Constructing product automaton with infinity DFA!
03/12/2020 05:38:01 PM INFO Product automaton size is: (130, 977)
03/12/2020 05:38:02 PM INFO Max deadline: 1
03/12/2020 05:38:02 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/12/2020 05:38:55 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/12/2020 05:38:55 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/12/2020 05:38:55 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/12/2020 05:38:55 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/12/2020 05:38:55 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/12/2020 05:38:55 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/12/2020 05:38:55 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/12/2020 05:38:55 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/12/2020 05:38:55 PM DEBUG [spec] No of nodes: 6
03/12/2020 05:38:55 PM DEBUG [spec] No of edges: 10
03/12/2020 05:38:55 PM DEBUG 
End of translate


03/12/2020 05:38:55 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/12/2020 05:38:55 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/12/2020 05:38:55 PM DEBUG 

Start policy computation

03/12/2020 05:38:55 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/12/2020 05:38:55 PM INFO Constructing product automaton with infinity DFA!
03/12/2020 05:38:55 PM INFO Product automaton size is: (130, 977)
03/12/2020 05:38:56 PM INFO Max deadline: 1
03/12/2020 05:38:56 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/12/2020 05:39:17 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/12/2020 05:39:17 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/12/2020 05:39:17 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/12/2020 05:39:17 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/12/2020 05:39:17 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/12/2020 05:39:17 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/12/2020 05:39:17 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/12/2020 05:39:17 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/12/2020 05:39:17 PM DEBUG [spec] No of nodes: 6
03/12/2020 05:39:17 PM DEBUG [spec] No of edges: 10
03/12/2020 05:39:17 PM DEBUG 
End of translate


03/12/2020 05:39:17 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/12/2020 05:39:17 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/12/2020 05:39:17 PM DEBUG 

Start policy computation

03/12/2020 05:39:17 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/12/2020 05:39:17 PM INFO Constructing product automaton with infinity DFA!
03/12/2020 05:39:17 PM INFO Product automaton size is: (130, 977)
03/12/2020 05:39:17 PM INFO Max deadline: 1
03/12/2020 05:39:17 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/12/2020 05:39:46 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/12/2020 05:39:46 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/12/2020 05:39:46 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/12/2020 05:39:46 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/12/2020 05:39:46 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/12/2020 05:39:46 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/12/2020 05:39:46 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/12/2020 05:39:46 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/12/2020 05:39:46 PM DEBUG [spec] No of nodes: 6
03/12/2020 05:39:46 PM DEBUG [spec] No of edges: 10
03/12/2020 05:39:46 PM DEBUG 
End of translate


03/12/2020 05:39:46 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/12/2020 05:39:46 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/12/2020 05:39:46 PM DEBUG 

Start policy computation

03/12/2020 05:39:46 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/12/2020 05:39:46 PM INFO Constructing product automaton with infinity DFA!
03/12/2020 05:39:46 PM INFO Product automaton size is: (130, 977)
03/12/2020 05:40:12 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/12/2020 05:40:12 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/12/2020 05:40:12 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/12/2020 05:40:12 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/12/2020 05:40:12 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/12/2020 05:40:12 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/12/2020 05:40:12 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/12/2020 05:40:12 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/12/2020 05:40:12 PM DEBUG [spec] No of nodes: 6
03/12/2020 05:40:12 PM DEBUG [spec] No of edges: 10
03/12/2020 05:40:12 PM DEBUG 
End of translate


03/12/2020 05:40:12 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/12/2020 05:40:12 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/12/2020 05:40:12 PM DEBUG 

Start policy computation

03/12/2020 05:40:12 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/12/2020 05:40:12 PM INFO Constructing product automaton with infinity DFA!
03/12/2020 05:40:12 PM INFO Product automaton size is: (130, 977)
03/12/2020 05:40:25 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/12/2020 05:40:25 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/12/2020 05:40:25 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/12/2020 05:40:25 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/12/2020 05:40:25 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/12/2020 05:40:25 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/12/2020 05:40:25 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/12/2020 05:40:26 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/12/2020 05:40:26 PM DEBUG [spec] No of nodes: 6
03/12/2020 05:40:26 PM DEBUG [spec] No of edges: 10
03/12/2020 05:40:26 PM DEBUG 
End of translate


03/12/2020 05:40:26 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/12/2020 05:40:26 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/12/2020 05:40:26 PM DEBUG 

Start policy computation

03/12/2020 05:40:26 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/12/2020 05:40:26 PM INFO Constructing product automaton with infinity DFA!
03/12/2020 05:40:26 PM INFO Product automaton size is: (130, 977)
03/12/2020 05:40:26 PM INFO Max deadline: 1
03/12/2020 05:40:26 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/12/2020 05:40:58 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/12/2020 05:40:58 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/12/2020 05:40:58 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/12/2020 05:40:58 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/12/2020 05:40:58 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/12/2020 05:40:58 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/12/2020 05:40:58 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/12/2020 05:40:58 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/12/2020 05:40:58 PM DEBUG [spec] No of nodes: 6
03/12/2020 05:40:58 PM DEBUG [spec] No of edges: 10
03/12/2020 05:40:58 PM DEBUG 
End of translate


03/12/2020 05:40:58 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/12/2020 05:40:58 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/12/2020 05:40:58 PM DEBUG 

Start policy computation

03/12/2020 05:40:58 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/12/2020 05:40:58 PM INFO Constructing product automaton with infinity DFA!
03/12/2020 05:40:58 PM INFO Product automaton size is: (130, 977)
03/12/2020 05:40:59 PM INFO Max deadline: 1
03/12/2020 05:40:59 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/12/2020 05:43:10 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/12/2020 05:43:10 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/12/2020 05:43:10 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/12/2020 05:43:10 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/12/2020 05:43:10 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/12/2020 05:43:10 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/12/2020 05:43:10 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/12/2020 05:43:10 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/12/2020 05:43:10 PM DEBUG [spec] No of nodes: 6
03/12/2020 05:43:10 PM DEBUG [spec] No of edges: 10
03/12/2020 05:43:10 PM DEBUG 
End of translate


03/12/2020 05:43:10 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/12/2020 05:43:10 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/12/2020 05:43:10 PM DEBUG 

Start policy computation

03/12/2020 05:43:10 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/12/2020 05:43:10 PM INFO Constructing product automaton with infinity DFA!
03/12/2020 05:43:10 PM INFO Product automaton size is: (130, 977)
03/12/2020 05:43:11 PM INFO Max deadline: 1
03/12/2020 05:43:11 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/12/2020 05:48:13 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/12/2020 05:48:13 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/12/2020 05:48:13 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/12/2020 05:48:13 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/12/2020 05:48:13 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/12/2020 05:48:13 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/12/2020 05:48:13 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/12/2020 05:48:13 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/12/2020 05:48:13 PM DEBUG [spec] No of nodes: 6
03/12/2020 05:48:13 PM DEBUG [spec] No of edges: 10
03/12/2020 05:48:13 PM DEBUG 
End of translate


03/12/2020 05:48:13 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/12/2020 05:48:13 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/12/2020 05:48:13 PM DEBUG 

Start policy computation

03/12/2020 05:48:13 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/12/2020 05:48:13 PM INFO Constructing product automaton with infinity DFA!
03/12/2020 05:48:13 PM INFO Product automaton size is: (130, 977)
03/12/2020 05:48:34 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/12/2020 05:48:34 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/12/2020 05:48:34 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/12/2020 05:48:34 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/12/2020 05:48:34 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/12/2020 05:48:34 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/12/2020 05:48:34 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/12/2020 05:48:34 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/12/2020 05:48:34 PM DEBUG [spec] No of nodes: 6
03/12/2020 05:48:34 PM DEBUG [spec] No of edges: 10
03/12/2020 05:48:34 PM DEBUG 
End of translate


03/12/2020 05:48:34 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/12/2020 05:48:34 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/12/2020 05:48:34 PM DEBUG 

Start policy computation

03/12/2020 05:48:34 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/12/2020 05:48:34 PM INFO Constructing product automaton with infinity DFA!
03/12/2020 05:48:34 PM INFO Product automaton size is: (130, 977)
03/12/2020 05:48:53 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/12/2020 05:48:53 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/12/2020 05:48:53 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/12/2020 05:48:53 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/12/2020 05:48:53 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/12/2020 05:48:53 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/12/2020 05:48:53 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/12/2020 05:48:53 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/12/2020 05:48:53 PM DEBUG [spec] No of nodes: 6
03/12/2020 05:48:53 PM DEBUG [spec] No of edges: 10
03/12/2020 05:48:53 PM DEBUG 
End of translate


03/12/2020 05:48:53 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/12/2020 05:48:53 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/12/2020 05:48:53 PM DEBUG 

Start policy computation

03/12/2020 05:48:53 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/12/2020 05:48:53 PM INFO Constructing product automaton with infinity DFA!
03/12/2020 05:48:53 PM INFO Product automaton size is: (130, 977)
03/12/2020 05:48:53 PM INFO Max deadline: 1
03/12/2020 05:48:53 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/12/2020 05:49:33 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/12/2020 05:49:33 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/12/2020 05:49:33 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/12/2020 05:49:33 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/12/2020 05:49:33 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/12/2020 05:49:33 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/12/2020 05:49:33 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/12/2020 05:49:33 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/12/2020 05:49:33 PM DEBUG [spec] No of nodes: 6
03/12/2020 05:49:33 PM DEBUG [spec] No of edges: 10
03/12/2020 05:49:33 PM DEBUG 
End of translate


03/12/2020 05:49:33 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/12/2020 05:49:33 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/12/2020 05:49:33 PM DEBUG 

Start policy computation

03/12/2020 05:49:33 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/12/2020 05:49:33 PM INFO Constructing product automaton with infinity DFA!
03/12/2020 05:49:33 PM INFO Product automaton size is: (130, 977)
03/12/2020 05:49:33 PM INFO Max deadline: 1
03/12/2020 05:49:33 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/12/2020 05:50:11 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/12/2020 05:50:11 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/12/2020 05:50:11 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/12/2020 05:50:11 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/12/2020 05:50:11 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/12/2020 05:50:11 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/12/2020 05:50:11 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/12/2020 05:50:11 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/12/2020 05:50:11 PM DEBUG [spec] No of nodes: 6
03/12/2020 05:50:11 PM DEBUG [spec] No of edges: 10
03/12/2020 05:50:11 PM DEBUG 
End of translate


03/12/2020 05:50:11 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/12/2020 05:50:11 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/12/2020 05:50:11 PM DEBUG 

Start policy computation

03/12/2020 05:50:11 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/12/2020 05:50:11 PM INFO Constructing product automaton with infinity DFA!
03/12/2020 05:50:11 PM INFO Product automaton size is: (130, 977)
03/12/2020 05:50:11 PM INFO Max deadline: 1
03/12/2020 05:50:11 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/12/2020 05:50:29 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/12/2020 05:50:29 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/12/2020 05:50:29 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/12/2020 05:50:29 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/12/2020 05:50:29 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/12/2020 05:50:29 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/12/2020 05:50:29 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/12/2020 05:50:29 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/12/2020 05:50:29 PM DEBUG [spec] No of nodes: 6
03/12/2020 05:50:29 PM DEBUG [spec] No of edges: 10
03/12/2020 05:50:29 PM DEBUG 
End of translate


03/12/2020 05:50:29 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/12/2020 05:50:29 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/12/2020 05:50:29 PM DEBUG 

Start policy computation

03/12/2020 05:50:29 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/12/2020 05:50:29 PM INFO Constructing product automaton with infinity DFA!
03/12/2020 05:50:29 PM INFO Product automaton size is: (130, 977)
03/12/2020 05:50:30 PM INFO Max deadline: 1
03/12/2020 05:50:30 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/12/2020 05:51:09 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/12/2020 05:51:09 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/12/2020 05:51:09 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/12/2020 05:51:09 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/12/2020 05:51:09 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/12/2020 05:51:09 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/12/2020 05:51:09 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/12/2020 05:51:09 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/12/2020 05:51:09 PM DEBUG [spec] No of nodes: 6
03/12/2020 05:51:09 PM DEBUG [spec] No of edges: 10
03/12/2020 05:51:09 PM DEBUG 
End of translate


03/12/2020 05:51:09 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/12/2020 05:51:09 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/12/2020 05:51:09 PM DEBUG 

Start policy computation

03/12/2020 05:51:09 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/12/2020 05:51:09 PM INFO Constructing product automaton with infinity DFA!
03/12/2020 05:51:09 PM INFO Product automaton size is: (130, 977)
03/12/2020 05:51:09 PM INFO Max deadline: 1
03/12/2020 05:51:09 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/12/2020 05:51:20 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/12/2020 05:51:20 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/12/2020 05:51:20 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/12/2020 05:51:20 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/12/2020 05:51:20 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/12/2020 05:51:20 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/12/2020 05:51:20 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/12/2020 05:51:20 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/12/2020 05:51:20 PM DEBUG [spec] No of nodes: 6
03/12/2020 05:51:20 PM DEBUG [spec] No of edges: 10
03/12/2020 05:51:20 PM DEBUG 
End of translate


03/12/2020 05:51:20 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/12/2020 05:51:20 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/12/2020 05:51:20 PM DEBUG 

Start policy computation

03/12/2020 05:51:20 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/12/2020 05:51:20 PM INFO Constructing product automaton with infinity DFA!
03/12/2020 05:51:20 PM INFO Product automaton size is: (130, 977)
03/12/2020 05:51:20 PM INFO Max deadline: 1
03/12/2020 05:51:20 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/12/2020 05:52:30 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/12/2020 05:52:30 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/12/2020 05:52:30 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/12/2020 05:52:30 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/12/2020 05:52:30 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/12/2020 05:52:30 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/12/2020 05:52:30 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/12/2020 05:52:30 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/12/2020 05:52:30 PM DEBUG [spec] No of nodes: 6
03/12/2020 05:52:30 PM DEBUG [spec] No of edges: 10
03/12/2020 05:52:30 PM DEBUG 
End of translate


03/12/2020 05:52:30 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/12/2020 05:52:30 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/12/2020 05:52:30 PM DEBUG 

Start policy computation

03/12/2020 05:52:30 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/12/2020 05:52:30 PM INFO Constructing product automaton with infinity DFA!
03/12/2020 05:52:30 PM INFO Product automaton size is: (130, 977)
03/12/2020 05:52:47 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/12/2020 05:52:47 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/12/2020 05:52:47 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/12/2020 05:52:47 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/12/2020 05:52:47 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/12/2020 05:52:47 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/12/2020 05:52:47 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/12/2020 05:52:47 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/12/2020 05:52:47 PM DEBUG [spec] No of nodes: 6
03/12/2020 05:52:47 PM DEBUG [spec] No of edges: 10
03/12/2020 05:52:47 PM DEBUG 
End of translate


03/12/2020 05:52:47 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/12/2020 05:52:47 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/12/2020 05:52:47 PM DEBUG 

Start policy computation

03/12/2020 05:52:47 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/12/2020 05:52:47 PM INFO Constructing product automaton with infinity DFA!
03/12/2020 05:52:47 PM INFO Product automaton size is: (130, 977)
03/12/2020 05:53:20 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/12/2020 05:53:20 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/12/2020 05:53:20 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/12/2020 05:53:20 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/12/2020 05:53:20 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/12/2020 05:53:20 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/12/2020 05:53:20 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/12/2020 05:53:20 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/12/2020 05:53:20 PM DEBUG [spec] No of nodes: 6
03/12/2020 05:53:20 PM DEBUG [spec] No of edges: 10
03/12/2020 05:53:20 PM DEBUG 
End of translate


03/12/2020 05:53:20 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/12/2020 05:53:20 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/12/2020 05:53:20 PM DEBUG 

Start policy computation

03/12/2020 05:53:20 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/12/2020 05:53:20 PM INFO Constructing product automaton with infinity DFA!
03/12/2020 05:53:20 PM INFO Product automaton size is: (130, 977)
03/12/2020 05:53:32 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/12/2020 05:53:32 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/12/2020 05:53:32 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/12/2020 05:53:32 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/12/2020 05:53:32 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/12/2020 05:53:32 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/12/2020 05:53:32 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/12/2020 05:53:32 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/12/2020 05:53:32 PM DEBUG [spec] No of nodes: 6
03/12/2020 05:53:32 PM DEBUG [spec] No of edges: 10
03/12/2020 05:53:32 PM DEBUG 
End of translate


03/12/2020 05:53:32 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/12/2020 05:53:32 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/12/2020 05:53:32 PM DEBUG 

Start policy computation

03/12/2020 05:53:32 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/12/2020 05:53:32 PM INFO Constructing product automaton with infinity DFA!
03/12/2020 05:53:32 PM INFO Product automaton size is: (130, 977)
03/12/2020 05:53:48 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/12/2020 05:53:48 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/12/2020 05:53:48 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/12/2020 05:53:48 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/12/2020 05:53:48 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/12/2020 05:53:48 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/12/2020 05:53:48 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/12/2020 05:53:48 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/12/2020 05:53:48 PM DEBUG [spec] No of nodes: 6
03/12/2020 05:53:48 PM DEBUG [spec] No of edges: 10
03/12/2020 05:53:48 PM DEBUG 
End of translate


03/12/2020 05:53:48 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/12/2020 05:53:48 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/12/2020 05:53:48 PM DEBUG 

Start policy computation

03/12/2020 05:53:48 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/12/2020 05:53:48 PM INFO Constructing product automaton with infinity DFA!
03/12/2020 05:53:48 PM INFO Product automaton size is: (130, 977)
03/12/2020 05:53:48 PM INFO Max deadline: 1
03/12/2020 05:53:48 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/15/2020 03:54:38 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/15/2020 03:54:38 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/15/2020 03:54:38 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/15/2020 03:54:38 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/15/2020 03:54:38 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/15/2020 03:54:38 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/15/2020 03:54:38 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/15/2020 03:54:38 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/15/2020 03:54:38 PM DEBUG [spec] No of nodes: 6
03/15/2020 03:54:38 PM DEBUG [spec] No of edges: 10
03/15/2020 03:54:38 PM DEBUG 
End of translate


03/15/2020 03:54:38 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/15/2020 03:54:38 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/15/2020 03:54:38 PM DEBUG 

Start policy computation

03/15/2020 03:54:39 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/15/2020 03:54:39 PM INFO Constructing product automaton with infinity DFA!
03/15/2020 03:54:39 PM INFO Product automaton size is: (130, 977)
03/15/2020 03:54:39 PM INFO Max deadline: 1
03/15/2020 03:54:39 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/20/2020 07:43:24 AM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/20/2020 07:43:24 AM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/20/2020 07:43:24 AM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/20/2020 07:43:24 AM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/20/2020 07:43:24 AM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/20/2020 07:43:24 AM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/20/2020 07:43:24 AM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/20/2020 07:43:24 AM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/20/2020 07:43:24 AM DEBUG [spec] No of nodes: 6
03/20/2020 07:43:24 AM DEBUG [spec] No of edges: 10
03/20/2020 07:43:24 AM DEBUG 
End of translate


03/20/2020 07:43:24 AM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/20/2020 07:43:24 AM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/20/2020 07:43:24 AM DEBUG 

Start policy computation

03/20/2020 07:43:24 AM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/20/2020 07:43:24 AM INFO Constructing product automaton with infinity DFA!
03/20/2020 07:43:24 AM INFO Product automaton size is: (130, 977)
03/20/2020 07:43:25 AM INFO Max deadline: 1
03/20/2020 07:43:25 AM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/20/2020 07:43:48 AM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/20/2020 07:43:48 AM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/20/2020 07:43:48 AM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/20/2020 07:43:48 AM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/20/2020 07:43:48 AM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/20/2020 07:43:48 AM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/20/2020 07:43:48 AM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/20/2020 07:43:48 AM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/20/2020 07:43:48 AM DEBUG [spec] No of nodes: 6
03/20/2020 07:43:48 AM DEBUG [spec] No of edges: 10
03/20/2020 07:43:48 AM DEBUG 
End of translate


03/20/2020 07:43:48 AM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/20/2020 07:43:48 AM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/20/2020 07:43:48 AM DEBUG 

Start policy computation

03/20/2020 07:43:49 AM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/20/2020 07:43:49 AM INFO Constructing product automaton with infinity DFA!
03/20/2020 07:43:49 AM INFO Product automaton size is: (130, 977)
03/20/2020 07:43:49 AM INFO Max deadline: 1
03/20/2020 07:43:49 AM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/20/2020 08:09:05 AM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/20/2020 08:09:05 AM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/20/2020 08:09:05 AM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/20/2020 08:09:05 AM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/20/2020 08:09:05 AM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/20/2020 08:09:05 AM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/20/2020 08:09:05 AM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/20/2020 08:09:05 AM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/20/2020 08:09:05 AM DEBUG [spec] No of nodes: 6
03/20/2020 08:09:05 AM DEBUG [spec] No of edges: 10
03/20/2020 08:09:05 AM DEBUG 
End of translate


03/20/2020 08:09:05 AM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/20/2020 08:09:05 AM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/20/2020 08:09:05 AM DEBUG 

Start policy computation

03/20/2020 08:09:05 AM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/20/2020 08:09:05 AM INFO Constructing product automaton with infinity DFA!
03/20/2020 08:09:05 AM INFO Product automaton size is: (130, 977)
03/20/2020 08:09:05 AM INFO Max deadline: 1
03/20/2020 08:09:05 AM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/20/2020 08:10:13 AM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/20/2020 08:10:13 AM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/20/2020 08:10:13 AM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/20/2020 08:10:13 AM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/20/2020 08:10:13 AM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/20/2020 08:10:13 AM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/20/2020 08:10:13 AM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/20/2020 08:10:13 AM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/20/2020 08:10:13 AM DEBUG [spec] No of nodes: 6
03/20/2020 08:10:13 AM DEBUG [spec] No of edges: 10
03/20/2020 08:10:13 AM DEBUG 
End of translate


03/20/2020 08:10:13 AM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/20/2020 08:10:13 AM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/20/2020 08:10:13 AM DEBUG 

Start policy computation

03/20/2020 08:10:13 AM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/20/2020 08:10:13 AM INFO Constructing product automaton with infinity DFA!
03/20/2020 08:10:13 AM INFO Product automaton size is: (130, 977)
03/20/2020 08:10:13 AM INFO Max deadline: 1
03/20/2020 08:10:13 AM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/21/2020 06:32:57 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/21/2020 06:32:57 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/21/2020 06:32:57 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/21/2020 06:32:57 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/21/2020 06:32:57 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/21/2020 06:32:57 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/21/2020 06:32:57 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/21/2020 06:32:57 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/21/2020 06:32:57 PM DEBUG [spec] No of nodes: 6
03/21/2020 06:32:57 PM DEBUG [spec] No of edges: 10
03/21/2020 06:32:57 PM DEBUG 
End of translate


03/21/2020 06:32:57 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/21/2020 06:32:57 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/21/2020 06:32:57 PM DEBUG 

Start policy computation

03/21/2020 06:32:57 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/21/2020 06:32:57 PM INFO Constructing product automaton with infinity DFA!
03/21/2020 06:32:57 PM INFO Product automaton size is: (130, 977)
03/21/2020 06:32:58 PM INFO Max deadline: 1
03/21/2020 06:32:58 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/21/2020 06:34:57 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/21/2020 06:34:57 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/21/2020 06:34:57 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/21/2020 06:34:57 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/21/2020 06:34:57 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/21/2020 06:34:57 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/21/2020 06:34:57 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/21/2020 06:34:57 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/21/2020 06:34:57 PM DEBUG [spec] No of nodes: 6
03/21/2020 06:34:57 PM DEBUG [spec] No of edges: 10
03/21/2020 06:34:57 PM DEBUG 
End of translate


03/21/2020 06:34:57 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/21/2020 06:34:57 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/21/2020 06:34:57 PM DEBUG 

Start policy computation

03/21/2020 06:34:57 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/21/2020 06:34:57 PM INFO Constructing product automaton with infinity DFA!
03/21/2020 06:34:57 PM INFO Product automaton size is: (130, 977)
03/21/2020 06:34:57 PM INFO Max deadline: 1
03/21/2020 06:34:57 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/21/2020 06:35:37 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/21/2020 06:35:37 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/21/2020 06:35:37 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/21/2020 06:35:37 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/21/2020 06:35:37 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/21/2020 06:35:37 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/21/2020 06:35:37 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/21/2020 06:35:37 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/21/2020 06:35:37 PM DEBUG [spec] No of nodes: 6
03/21/2020 06:35:37 PM DEBUG [spec] No of edges: 10
03/21/2020 06:35:37 PM DEBUG 
End of translate


03/21/2020 06:35:37 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/21/2020 06:35:37 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/21/2020 06:35:37 PM DEBUG 

Start policy computation

03/21/2020 06:35:37 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/21/2020 06:35:37 PM INFO Constructing product automaton with infinity DFA!
03/21/2020 06:35:37 PM INFO Product automaton size is: (130, 977)
03/21/2020 06:35:38 PM INFO Max deadline: 1
03/21/2020 06:35:38 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/21/2020 06:35:53 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/21/2020 06:35:53 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/21/2020 06:35:53 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/21/2020 06:35:53 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/21/2020 06:35:53 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/21/2020 06:35:53 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/21/2020 06:35:53 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/21/2020 06:35:53 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/21/2020 06:35:53 PM DEBUG [spec] No of nodes: 6
03/21/2020 06:35:53 PM DEBUG [spec] No of edges: 10
03/21/2020 06:35:53 PM DEBUG 
End of translate


03/21/2020 06:35:53 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/21/2020 06:35:53 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/21/2020 06:35:53 PM DEBUG 

Start policy computation

03/21/2020 06:35:53 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/21/2020 06:35:53 PM INFO Constructing product automaton with infinity DFA!
03/21/2020 06:35:53 PM INFO Product automaton size is: (130, 977)
03/21/2020 06:38:00 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/21/2020 06:38:00 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/21/2020 06:38:00 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/21/2020 06:38:00 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/21/2020 06:38:00 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/21/2020 06:38:00 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/21/2020 06:38:00 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/21/2020 06:38:00 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/21/2020 06:38:00 PM DEBUG [spec] No of nodes: 6
03/21/2020 06:38:00 PM DEBUG [spec] No of edges: 10
03/21/2020 06:38:00 PM DEBUG 
End of translate


03/21/2020 06:38:00 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/21/2020 06:38:00 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/21/2020 06:38:00 PM DEBUG 

Start policy computation

03/21/2020 06:38:00 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/21/2020 06:38:00 PM INFO Constructing product automaton with infinity DFA!
03/21/2020 06:38:00 PM INFO Product automaton size is: (130, 977)
03/21/2020 06:42:41 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/21/2020 06:42:41 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/21/2020 06:42:41 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/21/2020 06:42:41 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/21/2020 06:42:41 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/21/2020 06:42:41 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/21/2020 06:42:41 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/21/2020 06:42:41 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/21/2020 06:42:41 PM DEBUG [spec] No of nodes: 6
03/21/2020 06:42:41 PM DEBUG [spec] No of edges: 10
03/21/2020 06:42:41 PM DEBUG 
End of translate


03/21/2020 06:42:41 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/21/2020 06:42:41 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/21/2020 06:42:41 PM DEBUG 

Start policy computation

03/21/2020 06:42:41 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/21/2020 06:42:41 PM INFO Constructing product automaton with infinity DFA!
03/21/2020 06:42:41 PM INFO Product automaton size is: (130, 977)
03/21/2020 06:43:32 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/21/2020 06:43:32 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/21/2020 06:43:32 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/21/2020 06:43:32 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/21/2020 06:43:32 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/21/2020 06:43:32 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/21/2020 06:43:32 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/21/2020 06:43:32 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/21/2020 06:43:32 PM DEBUG [spec] No of nodes: 6
03/21/2020 06:43:32 PM DEBUG [spec] No of edges: 10
03/21/2020 06:43:32 PM DEBUG 
End of translate


03/21/2020 06:43:32 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/21/2020 06:43:32 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/21/2020 06:43:32 PM DEBUG 

Start policy computation

03/21/2020 06:43:32 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/21/2020 06:43:32 PM INFO Constructing product automaton with infinity DFA!
03/21/2020 06:43:32 PM INFO Product automaton size is: (130, 977)
03/21/2020 06:43:32 PM INFO Max deadline: 1
03/21/2020 06:43:32 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/21/2020 06:43:55 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/21/2020 06:43:55 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/21/2020 06:43:55 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/21/2020 06:43:55 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/21/2020 06:43:55 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/21/2020 06:43:55 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/21/2020 06:43:55 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/21/2020 06:43:55 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/21/2020 06:43:55 PM DEBUG [spec] No of nodes: 6
03/21/2020 06:43:55 PM DEBUG [spec] No of edges: 10
03/21/2020 06:43:55 PM DEBUG 
End of translate


03/21/2020 06:43:55 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/21/2020 06:43:55 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/21/2020 06:43:55 PM DEBUG 

Start policy computation

03/21/2020 06:43:55 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/21/2020 06:43:55 PM INFO Constructing product automaton with infinity DFA!
03/21/2020 06:43:55 PM INFO Product automaton size is: (130, 977)
03/21/2020 06:43:55 PM INFO Max deadline: 1
03/21/2020 06:43:55 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/21/2020 06:46:08 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/21/2020 06:46:08 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/21/2020 06:46:08 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/21/2020 06:46:08 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/21/2020 06:46:08 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/21/2020 06:46:08 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/21/2020 06:46:08 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/21/2020 06:46:08 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/21/2020 06:46:08 PM DEBUG [spec] No of nodes: 6
03/21/2020 06:46:08 PM DEBUG [spec] No of edges: 10
03/21/2020 06:46:08 PM DEBUG 
End of translate


03/21/2020 06:46:08 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/21/2020 06:46:08 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/21/2020 06:46:08 PM DEBUG 

Start policy computation

03/21/2020 06:46:08 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/21/2020 06:46:08 PM INFO Constructing product automaton with infinity DFA!
03/21/2020 06:46:08 PM INFO Product automaton size is: (130, 977)
03/21/2020 06:46:22 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/21/2020 06:46:22 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/21/2020 06:46:22 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/21/2020 06:46:22 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/21/2020 06:46:22 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/21/2020 06:46:22 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/21/2020 06:46:22 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/21/2020 06:46:22 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/21/2020 06:46:22 PM DEBUG [spec] No of nodes: 6
03/21/2020 06:46:22 PM DEBUG [spec] No of edges: 10
03/21/2020 06:46:22 PM DEBUG 
End of translate


03/21/2020 06:46:22 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/21/2020 06:46:22 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/21/2020 06:46:22 PM DEBUG 

Start policy computation

03/21/2020 06:46:22 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/21/2020 06:46:22 PM INFO Constructing product automaton with infinity DFA!
03/21/2020 06:46:22 PM INFO Product automaton size is: (130, 977)
03/21/2020 06:46:24 PM INFO Max deadline: 1
03/21/2020 06:46:24 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/21/2020 07:02:03 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/21/2020 07:02:03 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/21/2020 07:02:03 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/21/2020 07:02:03 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/21/2020 07:02:03 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/21/2020 07:02:03 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/21/2020 07:02:03 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/21/2020 07:02:03 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/21/2020 07:02:03 PM DEBUG [spec] No of nodes: 6
03/21/2020 07:02:03 PM DEBUG [spec] No of edges: 10
03/21/2020 07:02:03 PM DEBUG 
End of translate


03/21/2020 07:02:03 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/21/2020 07:02:03 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/21/2020 07:02:03 PM DEBUG 

Start policy computation

03/21/2020 07:02:03 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/21/2020 07:02:03 PM INFO Constructing product automaton with infinity DFA!
03/21/2020 07:02:03 PM INFO Product automaton size is: (130, 977)
03/21/2020 07:02:04 PM DEBUG findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans (u'/usr/share/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000
03/21/2020 08:05:42 PM INFO Max deadline: 1
03/21/2020 08:05:42 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/21/2020 08:08:16 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/21/2020 08:08:16 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/21/2020 08:08:16 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/21/2020 08:08:16 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/21/2020 08:08:16 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/21/2020 08:08:16 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/21/2020 08:08:16 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/21/2020 08:08:16 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/21/2020 08:08:16 PM DEBUG [spec] No of nodes: 6
03/21/2020 08:08:16 PM DEBUG [spec] No of edges: 10
03/21/2020 08:08:16 PM DEBUG 
End of translate


03/21/2020 08:08:16 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/21/2020 08:08:16 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/21/2020 08:08:16 PM DEBUG 

Start policy computation

03/21/2020 08:08:16 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/21/2020 08:08:16 PM INFO Constructing product automaton with infinity DFA!
03/21/2020 08:08:16 PM INFO Product automaton size is: (130, 977)
03/21/2020 08:08:17 PM DEBUG findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans (u'/usr/share/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000
03/21/2020 08:08:59 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/21/2020 08:08:59 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/21/2020 08:08:59 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/21/2020 08:08:59 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/21/2020 08:08:59 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/21/2020 08:08:59 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/21/2020 08:08:59 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/21/2020 08:08:59 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/21/2020 08:08:59 PM DEBUG [spec] No of nodes: 6
03/21/2020 08:08:59 PM DEBUG [spec] No of edges: 10
03/21/2020 08:08:59 PM DEBUG 
End of translate


03/21/2020 08:08:59 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/21/2020 08:08:59 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/21/2020 08:08:59 PM DEBUG 

Start policy computation

03/21/2020 08:08:59 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/21/2020 08:08:59 PM INFO Constructing product automaton with infinity DFA!
03/21/2020 08:08:59 PM INFO Product automaton size is: (130, 977)
03/21/2020 08:09:01 PM DEBUG findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans (u'/usr/share/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000
03/21/2020 08:10:24 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/21/2020 08:10:24 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/21/2020 08:10:24 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/21/2020 08:10:24 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/21/2020 08:10:24 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/21/2020 08:10:24 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/21/2020 08:10:24 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/21/2020 08:10:24 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/21/2020 08:10:24 PM DEBUG [spec] No of nodes: 6
03/21/2020 08:10:24 PM DEBUG [spec] No of edges: 10
03/21/2020 08:10:24 PM DEBUG 
End of translate


03/21/2020 08:10:24 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/21/2020 08:10:24 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/21/2020 08:10:24 PM DEBUG 

Start policy computation

03/21/2020 08:10:25 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/21/2020 08:10:25 PM INFO Constructing product automaton with infinity DFA!
03/21/2020 08:10:25 PM INFO Product automaton size is: (130, 977)
03/21/2020 08:10:25 PM INFO Max deadline: 1
03/21/2020 08:10:25 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/21/2020 08:22:51 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/21/2020 08:22:51 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/21/2020 08:22:51 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/21/2020 08:22:51 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/21/2020 08:22:51 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/21/2020 08:22:51 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/21/2020 08:22:51 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/21/2020 08:22:51 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/21/2020 08:22:51 PM DEBUG [spec] No of nodes: 6
03/21/2020 08:22:51 PM DEBUG [spec] No of edges: 10
03/21/2020 08:22:51 PM DEBUG 
End of translate


03/21/2020 08:22:51 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/21/2020 08:22:51 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/21/2020 08:22:51 PM DEBUG 

Start policy computation

03/21/2020 08:22:51 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/21/2020 08:22:51 PM INFO Constructing product automaton with infinity DFA!
03/21/2020 08:22:51 PM INFO Product automaton size is: (130, 977)
03/21/2020 08:22:52 PM INFO Max deadline: 1
03/21/2020 08:22:52 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/21/2020 08:23:31 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/21/2020 08:23:31 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/21/2020 08:23:31 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/21/2020 08:23:31 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/21/2020 08:23:31 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/21/2020 08:23:31 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/21/2020 08:23:31 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/21/2020 08:23:31 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/21/2020 08:23:31 PM DEBUG [spec] No of nodes: 6
03/21/2020 08:23:31 PM DEBUG [spec] No of edges: 10
03/21/2020 08:23:31 PM DEBUG 
End of translate


03/21/2020 08:23:31 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/21/2020 08:23:31 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/21/2020 08:23:31 PM DEBUG 

Start policy computation

03/21/2020 08:23:31 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/21/2020 08:23:31 PM INFO Constructing product automaton with infinity DFA!
03/21/2020 08:23:31 PM INFO Product automaton size is: (130, 977)
03/21/2020 08:23:32 PM INFO Max deadline: 1
03/21/2020 08:23:32 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/21/2020 08:26:30 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/21/2020 08:26:30 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/21/2020 08:26:30 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/21/2020 08:26:30 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/21/2020 08:26:30 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/21/2020 08:26:30 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/21/2020 08:26:30 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/21/2020 08:26:30 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/21/2020 08:26:30 PM DEBUG [spec] No of nodes: 6
03/21/2020 08:26:30 PM DEBUG [spec] No of edges: 10
03/21/2020 08:26:30 PM DEBUG 
End of translate


03/21/2020 08:26:30 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/21/2020 08:26:30 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/21/2020 08:26:30 PM DEBUG 

Start policy computation

03/21/2020 08:26:30 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/21/2020 08:26:30 PM INFO Constructing product automaton with infinity DFA!
03/21/2020 08:26:30 PM INFO Product automaton size is: (130, 977)
03/21/2020 08:26:30 PM INFO Max deadline: 1
03/21/2020 08:26:30 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/21/2020 08:29:21 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/21/2020 08:29:21 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/21/2020 08:29:21 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/21/2020 08:29:21 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/21/2020 08:29:21 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/21/2020 08:29:21 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/21/2020 08:29:21 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/21/2020 08:29:21 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/21/2020 08:29:21 PM DEBUG [spec] No of nodes: 6
03/21/2020 08:29:21 PM DEBUG [spec] No of edges: 10
03/21/2020 08:29:21 PM DEBUG 
End of translate


03/21/2020 08:29:21 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/21/2020 08:29:21 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/21/2020 08:29:21 PM DEBUG 

Start policy computation

03/21/2020 08:29:21 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/21/2020 08:29:21 PM INFO Constructing product automaton with infinity DFA!
03/21/2020 08:29:21 PM INFO Product automaton size is: (130, 977)
03/21/2020 08:29:21 PM INFO Max deadline: 1
03/21/2020 08:29:21 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/21/2020 08:30:23 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/21/2020 08:30:23 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/21/2020 08:30:23 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/21/2020 08:30:23 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/21/2020 08:30:23 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/21/2020 08:30:23 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/21/2020 08:30:23 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/21/2020 08:30:23 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/21/2020 08:30:23 PM DEBUG [spec] No of nodes: 6
03/21/2020 08:30:23 PM DEBUG [spec] No of edges: 10
03/21/2020 08:30:23 PM DEBUG 
End of translate


03/21/2020 08:30:23 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/21/2020 08:30:23 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/21/2020 08:30:23 PM DEBUG 

Start policy computation

03/21/2020 08:30:23 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/21/2020 08:30:23 PM INFO Constructing product automaton with infinity DFA!
03/21/2020 08:30:23 PM INFO Product automaton size is: (130, 977)
03/21/2020 08:30:23 PM INFO Max deadline: 1
03/21/2020 08:30:23 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/21/2020 08:31:29 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/21/2020 08:31:29 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/21/2020 08:31:29 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/21/2020 08:31:29 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/21/2020 08:31:29 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/21/2020 08:31:29 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/21/2020 08:31:29 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/21/2020 08:31:29 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/21/2020 08:31:29 PM DEBUG [spec] No of nodes: 6
03/21/2020 08:31:29 PM DEBUG [spec] No of edges: 10
03/21/2020 08:31:29 PM DEBUG 
End of translate


03/21/2020 08:31:29 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/21/2020 08:31:29 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/21/2020 08:31:29 PM DEBUG 

Start policy computation

03/21/2020 08:31:29 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/21/2020 08:31:29 PM INFO Constructing product automaton with infinity DFA!
03/21/2020 08:31:29 PM INFO Product automaton size is: (130, 977)
03/21/2020 08:31:29 PM INFO Max deadline: 1
03/21/2020 08:31:29 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/21/2020 08:31:29 PM DEBUG findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans (u'/usr/share/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000
03/21/2020 08:33:19 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/21/2020 08:33:19 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/21/2020 08:33:19 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/21/2020 08:33:19 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/21/2020 08:33:19 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/21/2020 08:33:19 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/21/2020 08:33:19 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/21/2020 08:33:19 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/21/2020 08:33:19 PM DEBUG [spec] No of nodes: 6
03/21/2020 08:33:19 PM DEBUG [spec] No of edges: 10
03/21/2020 08:33:19 PM DEBUG 
End of translate


03/21/2020 08:33:19 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/21/2020 08:33:19 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/21/2020 08:33:19 PM DEBUG 

Start policy computation

03/21/2020 08:33:19 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/21/2020 08:33:19 PM INFO Constructing product automaton with infinity DFA!
03/21/2020 08:33:19 PM INFO Product automaton size is: (130, 977)
03/21/2020 08:33:20 PM INFO Max deadline: 1
03/21/2020 08:33:20 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/21/2020 08:33:20 PM DEBUG findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans (u'/usr/share/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000
03/21/2020 08:33:20 PM DEBUG findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans (u'/usr/share/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000
03/21/2020 08:35:15 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/21/2020 08:35:15 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/21/2020 08:35:15 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/21/2020 08:35:15 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/21/2020 08:35:15 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/21/2020 08:35:15 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/21/2020 08:35:15 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/21/2020 08:35:15 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/21/2020 08:35:16 PM DEBUG [spec] No of nodes: 6
03/21/2020 08:35:16 PM DEBUG [spec] No of edges: 10
03/21/2020 08:35:16 PM DEBUG 
End of translate


03/21/2020 08:35:16 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/21/2020 08:35:16 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/21/2020 08:35:16 PM DEBUG 

Start policy computation

03/21/2020 08:35:16 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/21/2020 08:35:16 PM INFO Constructing product automaton with infinity DFA!
03/21/2020 08:35:16 PM INFO Product automaton size is: (130, 977)
03/21/2020 08:35:16 PM INFO Max deadline: 1
03/21/2020 08:35:16 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/21/2020 08:35:16 PM DEBUG findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans (u'/usr/share/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000
03/21/2020 08:35:16 PM DEBUG findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans (u'/usr/share/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000
03/21/2020 08:36:36 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/21/2020 08:36:36 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/21/2020 08:36:36 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/21/2020 08:36:36 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/21/2020 08:36:36 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/21/2020 08:36:36 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/21/2020 08:36:36 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/21/2020 08:36:36 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/21/2020 08:36:36 PM DEBUG [spec] No of nodes: 6
03/21/2020 08:36:36 PM DEBUG [spec] No of edges: 10
03/21/2020 08:36:36 PM DEBUG 
End of translate


03/21/2020 08:36:36 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/21/2020 08:36:36 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/21/2020 08:36:36 PM DEBUG 

Start policy computation

03/21/2020 08:36:36 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/21/2020 08:36:36 PM INFO Constructing product automaton with infinity DFA!
03/21/2020 08:36:36 PM INFO Product automaton size is: (130, 977)
03/21/2020 08:36:36 PM INFO Max deadline: 1
03/21/2020 08:36:36 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/21/2020 08:37:15 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/21/2020 08:37:15 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/21/2020 08:37:15 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/21/2020 08:37:15 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/21/2020 08:37:15 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/21/2020 08:37:15 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/21/2020 08:37:15 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/21/2020 08:37:15 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/21/2020 08:37:15 PM DEBUG [spec] No of nodes: 6
03/21/2020 08:37:15 PM DEBUG [spec] No of edges: 10
03/21/2020 08:37:15 PM DEBUG 
End of translate


03/21/2020 08:37:15 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/21/2020 08:37:15 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/21/2020 08:37:15 PM DEBUG 

Start policy computation

03/21/2020 08:37:15 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/21/2020 08:37:15 PM INFO Constructing product automaton with infinity DFA!
03/21/2020 08:37:15 PM INFO Product automaton size is: (130, 977)
03/21/2020 08:37:15 PM INFO Max deadline: 1
03/21/2020 08:37:15 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/21/2020 08:38:13 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/21/2020 08:38:13 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/21/2020 08:38:13 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/21/2020 08:38:13 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/21/2020 08:38:13 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/21/2020 08:38:13 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/21/2020 08:38:13 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/21/2020 08:38:13 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/21/2020 08:38:13 PM DEBUG [spec] No of nodes: 6
03/21/2020 08:38:13 PM DEBUG [spec] No of edges: 10
03/21/2020 08:38:13 PM DEBUG 
End of translate


03/21/2020 08:38:13 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/21/2020 08:38:13 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/21/2020 08:38:13 PM DEBUG 

Start policy computation

03/21/2020 08:38:13 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/21/2020 08:38:13 PM INFO Constructing product automaton with infinity DFA!
03/21/2020 08:38:13 PM INFO Product automaton size is: (130, 977)
03/21/2020 08:38:14 PM INFO Max deadline: 1
03/21/2020 08:38:14 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/21/2020 08:38:51 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/21/2020 08:38:51 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/21/2020 08:38:51 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/21/2020 08:38:51 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/21/2020 08:38:51 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/21/2020 08:38:51 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/21/2020 08:38:51 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/21/2020 08:38:51 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/21/2020 08:38:51 PM DEBUG [spec] No of nodes: 6
03/21/2020 08:38:51 PM DEBUG [spec] No of edges: 10
03/21/2020 08:38:51 PM DEBUG 
End of translate


03/21/2020 08:38:51 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/21/2020 08:38:51 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/21/2020 08:38:51 PM DEBUG 

Start policy computation

03/21/2020 08:38:51 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/21/2020 08:38:51 PM INFO Constructing product automaton with infinity DFA!
03/21/2020 08:38:51 PM INFO Product automaton size is: (130, 977)
03/21/2020 08:38:52 PM INFO Max deadline: 1
03/21/2020 08:38:52 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/21/2020 08:38:52 PM DEBUG findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans (u'/usr/share/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000
03/21/2020 08:38:52 PM DEBUG findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans (u'/usr/share/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000
03/21/2020 08:39:04 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/21/2020 08:39:04 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/21/2020 08:39:04 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/21/2020 08:39:04 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/21/2020 08:39:04 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/21/2020 08:39:04 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/21/2020 08:39:04 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/21/2020 08:39:04 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/21/2020 08:39:04 PM DEBUG [spec] No of nodes: 6
03/21/2020 08:39:04 PM DEBUG [spec] No of edges: 10
03/21/2020 08:39:04 PM DEBUG 
End of translate


03/21/2020 08:39:04 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/21/2020 08:39:04 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/21/2020 08:39:04 PM DEBUG 

Start policy computation

03/21/2020 08:39:04 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/21/2020 08:39:04 PM INFO Constructing product automaton with infinity DFA!
03/21/2020 08:39:04 PM INFO Product automaton size is: (130, 977)
03/21/2020 08:39:04 PM INFO Max deadline: 1
03/21/2020 08:39:04 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/21/2020 08:39:04 PM DEBUG findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans (u'/usr/share/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000
03/21/2020 08:39:04 PM DEBUG findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans (u'/usr/share/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000
03/21/2020 08:39:58 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/21/2020 08:39:58 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/21/2020 08:39:58 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/21/2020 08:39:58 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/21/2020 08:39:58 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/21/2020 08:39:58 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/21/2020 08:39:58 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/21/2020 08:39:58 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/21/2020 08:39:58 PM DEBUG [spec] No of nodes: 6
03/21/2020 08:39:58 PM DEBUG [spec] No of edges: 10
03/21/2020 08:39:58 PM DEBUG 
End of translate


03/21/2020 08:39:58 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/21/2020 08:39:58 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/21/2020 08:39:58 PM DEBUG 

Start policy computation

03/21/2020 08:39:59 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/21/2020 08:39:59 PM INFO Constructing product automaton with infinity DFA!
03/21/2020 08:39:59 PM INFO Product automaton size is: (130, 977)
03/21/2020 08:39:59 PM INFO Max deadline: 1
03/21/2020 08:39:59 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/21/2020 08:40:21 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/21/2020 08:40:21 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/21/2020 08:40:21 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/21/2020 08:40:21 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/21/2020 08:40:21 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/21/2020 08:40:21 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/21/2020 08:40:21 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/21/2020 08:40:21 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/21/2020 08:40:21 PM DEBUG [spec] No of nodes: 6
03/21/2020 08:40:21 PM DEBUG [spec] No of edges: 10
03/21/2020 08:40:21 PM DEBUG 
End of translate


03/21/2020 08:40:21 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/21/2020 08:40:21 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/21/2020 08:40:21 PM DEBUG 

Start policy computation

03/21/2020 08:40:21 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/21/2020 08:40:21 PM INFO Constructing product automaton with infinity DFA!
03/21/2020 08:40:21 PM INFO Product automaton size is: (130, 977)
03/21/2020 08:40:22 PM INFO Max deadline: 1
03/21/2020 08:40:22 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/21/2020 08:40:22 PM DEBUG findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans (u'/usr/share/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000
03/21/2020 08:40:22 PM DEBUG findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans (u'/usr/share/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000
03/21/2020 08:42:49 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/21/2020 08:42:49 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/21/2020 08:42:49 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/21/2020 08:42:49 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/21/2020 08:42:49 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/21/2020 08:42:49 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/21/2020 08:42:49 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/21/2020 08:42:49 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/21/2020 08:42:49 PM DEBUG [spec] No of nodes: 6
03/21/2020 08:42:49 PM DEBUG [spec] No of edges: 10
03/21/2020 08:42:49 PM DEBUG 
End of translate


03/21/2020 08:42:49 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/21/2020 08:42:49 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/21/2020 08:42:49 PM DEBUG 

Start policy computation

03/21/2020 08:42:49 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/21/2020 08:42:49 PM INFO Constructing product automaton with infinity DFA!
03/21/2020 08:42:49 PM INFO Product automaton size is: (130, 977)
03/21/2020 08:42:49 PM INFO Max deadline: 1
03/21/2020 08:42:49 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/21/2020 08:42:49 PM DEBUG findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans (u'/usr/share/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000
03/21/2020 08:43:32 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/21/2020 08:43:32 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/21/2020 08:43:32 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/21/2020 08:43:32 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/21/2020 08:43:32 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/21/2020 08:43:32 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/21/2020 08:43:32 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/21/2020 08:43:32 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/21/2020 08:43:32 PM DEBUG [spec] No of nodes: 6
03/21/2020 08:43:32 PM DEBUG [spec] No of edges: 10
03/21/2020 08:43:32 PM DEBUG 
End of translate


03/21/2020 08:43:32 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/21/2020 08:43:32 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/21/2020 08:43:32 PM DEBUG 

Start policy computation

03/21/2020 08:43:32 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/21/2020 08:43:32 PM INFO Constructing product automaton with infinity DFA!
03/21/2020 08:43:32 PM INFO Product automaton size is: (130, 977)
03/21/2020 08:43:33 PM INFO Max deadline: 1
03/21/2020 08:43:33 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/21/2020 08:43:33 PM DEBUG findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans (u'/usr/share/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000
03/21/2020 08:52:18 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/21/2020 08:52:18 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/21/2020 08:52:18 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/21/2020 08:52:18 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/21/2020 08:52:18 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/21/2020 08:52:18 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/21/2020 08:52:18 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/21/2020 08:52:18 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/21/2020 08:52:18 PM DEBUG [spec] No of nodes: 6
03/21/2020 08:52:18 PM DEBUG [spec] No of edges: 10
03/21/2020 08:52:18 PM DEBUG 
End of translate


03/21/2020 08:52:18 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/21/2020 08:52:18 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/21/2020 08:52:18 PM DEBUG 

Start policy computation

03/21/2020 08:52:18 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/21/2020 08:52:18 PM INFO Constructing product automaton with infinity DFA!
03/21/2020 08:52:18 PM INFO Product automaton size is: (130, 977)
03/21/2020 08:52:18 PM INFO Max deadline: 1
03/21/2020 08:52:18 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/21/2020 08:52:19 PM DEBUG findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans (u'/usr/share/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000
03/21/2020 08:52:36 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/21/2020 08:52:36 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/21/2020 08:52:36 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/21/2020 08:52:36 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/21/2020 08:52:36 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/21/2020 08:52:36 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/21/2020 08:52:36 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/21/2020 08:52:36 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/21/2020 08:52:36 PM DEBUG [spec] No of nodes: 6
03/21/2020 08:52:36 PM DEBUG [spec] No of edges: 10
03/21/2020 08:52:36 PM DEBUG 
End of translate


03/21/2020 08:52:36 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/21/2020 08:52:36 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/21/2020 08:52:36 PM DEBUG 

Start policy computation

03/21/2020 08:52:36 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/21/2020 08:52:36 PM INFO Constructing product automaton with infinity DFA!
03/21/2020 08:52:36 PM INFO Product automaton size is: (130, 977)
03/21/2020 08:52:37 PM INFO Max deadline: 1
03/21/2020 08:52:37 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/21/2020 08:52:37 PM DEBUG findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans (u'/usr/share/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000
03/21/2020 08:52:37 PM DEBUG findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans (u'/usr/share/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000
03/21/2020 08:53:23 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/21/2020 08:53:23 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/21/2020 08:53:23 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/21/2020 08:53:23 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/21/2020 08:53:23 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/21/2020 08:53:23 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/21/2020 08:53:23 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/21/2020 08:53:23 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/21/2020 08:53:23 PM DEBUG [spec] No of nodes: 6
03/21/2020 08:53:23 PM DEBUG [spec] No of edges: 10
03/21/2020 08:53:23 PM DEBUG 
End of translate


03/21/2020 08:53:23 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/21/2020 08:53:23 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/21/2020 08:53:23 PM DEBUG 

Start policy computation

03/21/2020 08:53:23 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/21/2020 08:53:23 PM INFO Constructing product automaton with infinity DFA!
03/21/2020 08:53:23 PM INFO Product automaton size is: (130, 977)
03/21/2020 08:53:23 PM INFO Max deadline: 1
03/21/2020 08:53:23 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/21/2020 08:53:23 PM DEBUG findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans (u'/usr/share/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000
03/21/2020 08:53:23 PM DEBUG findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans (u'/usr/share/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000
03/21/2020 08:54:00 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/21/2020 08:54:00 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/21/2020 08:54:00 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/21/2020 08:54:00 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/21/2020 08:54:00 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/21/2020 08:54:00 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/21/2020 08:54:00 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/21/2020 08:54:00 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/21/2020 08:54:00 PM DEBUG [spec] No of nodes: 6
03/21/2020 08:54:00 PM DEBUG [spec] No of edges: 10
03/21/2020 08:54:00 PM DEBUG 
End of translate


03/21/2020 08:54:00 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/21/2020 08:54:00 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/21/2020 08:54:00 PM DEBUG 

Start policy computation

03/21/2020 08:54:00 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/21/2020 08:54:00 PM INFO Constructing product automaton with infinity DFA!
03/21/2020 08:54:00 PM INFO Product automaton size is: (130, 977)
03/21/2020 08:54:00 PM INFO Max deadline: 1
03/21/2020 08:54:00 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/21/2020 08:54:00 PM DEBUG findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans (u'/usr/share/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000
03/21/2020 08:54:00 PM DEBUG findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans (u'/usr/share/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000
03/21/2020 08:55:11 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/21/2020 08:55:11 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/21/2020 08:55:11 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/21/2020 08:55:11 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/21/2020 08:55:11 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/21/2020 08:55:11 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/21/2020 08:55:11 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/21/2020 08:55:11 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/21/2020 08:55:11 PM DEBUG [spec] No of nodes: 6
03/21/2020 08:55:11 PM DEBUG [spec] No of edges: 10
03/21/2020 08:55:11 PM DEBUG 
End of translate


03/21/2020 08:55:11 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/21/2020 08:55:11 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/21/2020 08:55:11 PM DEBUG 

Start policy computation

03/21/2020 08:55:11 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/21/2020 08:55:11 PM INFO Constructing product automaton with infinity DFA!
03/21/2020 08:55:11 PM INFO Product automaton size is: (130, 977)
03/21/2020 08:55:11 PM INFO Max deadline: 1
03/21/2020 08:55:11 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/21/2020 08:55:11 PM DEBUG findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans (u'/usr/share/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000
03/21/2020 08:55:11 PM DEBUG findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans (u'/usr/share/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000
03/21/2020 08:56:36 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/21/2020 08:56:36 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/21/2020 08:56:36 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/21/2020 08:56:36 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/21/2020 08:56:36 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/21/2020 08:56:36 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/21/2020 08:56:36 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/21/2020 08:56:36 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/21/2020 08:56:36 PM DEBUG [spec] No of nodes: 6
03/21/2020 08:56:36 PM DEBUG [spec] No of edges: 10
03/21/2020 08:56:36 PM DEBUG 
End of translate


03/21/2020 08:56:36 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/21/2020 08:56:36 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/21/2020 08:56:36 PM DEBUG 

Start policy computation

03/21/2020 08:56:36 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/21/2020 08:56:36 PM INFO Constructing product automaton with infinity DFA!
03/21/2020 08:56:36 PM INFO Product automaton size is: (130, 977)
03/21/2020 08:56:36 PM INFO Max deadline: 1
03/21/2020 08:56:36 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/21/2020 08:56:36 PM DEBUG findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans (u'/usr/share/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000
03/21/2020 08:56:36 PM DEBUG findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans (u'/usr/share/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000
03/21/2020 08:56:53 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/21/2020 08:56:53 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/21/2020 08:56:53 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/21/2020 08:56:53 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/21/2020 08:56:53 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/21/2020 08:56:53 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/21/2020 08:56:53 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/21/2020 08:56:53 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/21/2020 08:56:53 PM DEBUG [spec] No of nodes: 6
03/21/2020 08:56:53 PM DEBUG [spec] No of edges: 10
03/21/2020 08:56:53 PM DEBUG 
End of translate


03/21/2020 08:56:53 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/21/2020 08:56:53 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/21/2020 08:56:53 PM DEBUG 

Start policy computation

03/21/2020 08:56:53 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/21/2020 08:56:53 PM INFO Constructing product automaton with infinity DFA!
03/21/2020 08:56:53 PM INFO Product automaton size is: (130, 977)
03/21/2020 08:56:53 PM INFO Max deadline: 1
03/21/2020 08:56:53 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/21/2020 08:56:53 PM DEBUG findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans (u'/usr/share/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000
03/21/2020 08:56:53 PM DEBUG findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans (u'/usr/share/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000
03/21/2020 08:57:53 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/21/2020 08:57:53 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/21/2020 08:57:53 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/21/2020 08:57:53 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/21/2020 08:57:53 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/21/2020 08:57:53 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/21/2020 08:57:53 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/21/2020 08:57:53 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/21/2020 08:57:53 PM DEBUG [spec] No of nodes: 6
03/21/2020 08:57:53 PM DEBUG [spec] No of edges: 10
03/21/2020 08:57:53 PM DEBUG 
End of translate


03/21/2020 08:57:53 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/21/2020 08:57:53 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/21/2020 08:57:53 PM DEBUG 

Start policy computation

03/21/2020 08:57:53 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/21/2020 08:57:53 PM INFO Constructing product automaton with infinity DFA!
03/21/2020 08:57:53 PM INFO Product automaton size is: (130, 977)
03/21/2020 08:57:53 PM INFO Max deadline: 1
03/21/2020 08:57:53 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/21/2020 08:57:53 PM DEBUG findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans (u'/usr/share/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000
03/21/2020 08:57:53 PM DEBUG findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans (u'/usr/share/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000
03/21/2020 08:58:13 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/21/2020 08:58:13 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/21/2020 08:58:13 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/21/2020 08:58:13 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/21/2020 08:58:13 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/21/2020 08:58:13 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/21/2020 08:58:13 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/21/2020 08:58:13 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/21/2020 08:58:13 PM DEBUG [spec] No of nodes: 6
03/21/2020 08:58:13 PM DEBUG [spec] No of edges: 10
03/21/2020 08:58:13 PM DEBUG 
End of translate


03/21/2020 08:58:13 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/21/2020 08:58:13 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/21/2020 08:58:13 PM DEBUG 

Start policy computation

03/21/2020 08:58:13 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/21/2020 08:58:13 PM INFO Constructing product automaton with infinity DFA!
03/21/2020 08:58:13 PM INFO Product automaton size is: (130, 977)
03/21/2020 08:58:13 PM INFO Max deadline: 1
03/21/2020 08:58:13 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/21/2020 08:58:13 PM DEBUG findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans (u'/usr/share/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000
03/21/2020 08:58:51 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/21/2020 08:58:51 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/21/2020 08:58:51 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/21/2020 08:58:51 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/21/2020 08:58:51 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/21/2020 08:58:51 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/21/2020 08:58:51 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/21/2020 08:58:51 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/21/2020 08:58:51 PM DEBUG [spec] No of nodes: 6
03/21/2020 08:58:51 PM DEBUG [spec] No of edges: 10
03/21/2020 08:58:51 PM DEBUG 
End of translate


03/21/2020 08:58:51 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/21/2020 08:58:51 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/21/2020 08:58:51 PM DEBUG 

Start policy computation

03/21/2020 08:58:51 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/21/2020 08:58:51 PM INFO Constructing product automaton with infinity DFA!
03/21/2020 08:58:51 PM INFO Product automaton size is: (130, 977)
03/21/2020 08:58:51 PM INFO Max deadline: 1
03/21/2020 08:58:51 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/21/2020 08:58:51 PM DEBUG findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans (u'/usr/share/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000
03/21/2020 08:58:51 PM DEBUG findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans (u'/usr/share/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000
03/21/2020 09:00:30 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/21/2020 09:00:30 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/21/2020 09:00:30 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/21/2020 09:00:30 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/21/2020 09:00:30 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/21/2020 09:00:30 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/21/2020 09:00:30 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/21/2020 09:00:30 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/21/2020 09:00:30 PM DEBUG [spec] No of nodes: 6
03/21/2020 09:00:30 PM DEBUG [spec] No of edges: 10
03/21/2020 09:00:30 PM DEBUG 
End of translate


03/21/2020 09:00:30 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/21/2020 09:00:30 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/21/2020 09:00:30 PM DEBUG 

Start policy computation

03/21/2020 09:00:30 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/21/2020 09:00:30 PM INFO Constructing product automaton with infinity DFA!
03/21/2020 09:00:30 PM INFO Product automaton size is: (130, 977)
03/21/2020 09:00:30 PM INFO Max deadline: 1
03/21/2020 09:00:30 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/21/2020 09:00:30 PM DEBUG findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans (u'/usr/share/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000
03/21/2020 09:00:31 PM DEBUG findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans (u'/usr/share/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000
03/21/2020 09:00:50 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/21/2020 09:00:50 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/21/2020 09:00:50 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/21/2020 09:00:50 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/21/2020 09:00:50 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/21/2020 09:00:50 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/21/2020 09:00:50 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/21/2020 09:00:50 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/21/2020 09:00:50 PM DEBUG [spec] No of nodes: 6
03/21/2020 09:00:50 PM DEBUG [spec] No of edges: 10
03/21/2020 09:00:50 PM DEBUG 
End of translate


03/21/2020 09:00:50 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/21/2020 09:00:50 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/21/2020 09:00:50 PM DEBUG 

Start policy computation

03/21/2020 09:00:50 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/21/2020 09:00:50 PM INFO Constructing product automaton with infinity DFA!
03/21/2020 09:00:50 PM INFO Product automaton size is: (130, 977)
03/21/2020 09:00:51 PM INFO Max deadline: 1
03/21/2020 09:00:51 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/21/2020 09:00:51 PM DEBUG findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans (u'/usr/share/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000
03/21/2020 09:00:51 PM DEBUG findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans (u'/usr/share/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000
03/21/2020 09:01:10 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/21/2020 09:01:10 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/21/2020 09:01:10 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/21/2020 09:01:10 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/21/2020 09:01:10 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/21/2020 09:01:10 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/21/2020 09:01:10 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/21/2020 09:01:10 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/21/2020 09:01:10 PM DEBUG [spec] No of nodes: 6
03/21/2020 09:01:10 PM DEBUG [spec] No of edges: 10
03/21/2020 09:01:10 PM DEBUG 
End of translate


03/21/2020 09:01:10 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/21/2020 09:01:10 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/21/2020 09:01:10 PM DEBUG 

Start policy computation

03/21/2020 09:01:10 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/21/2020 09:01:10 PM INFO Constructing product automaton with infinity DFA!
03/21/2020 09:01:10 PM INFO Product automaton size is: (130, 977)
03/21/2020 09:01:10 PM INFO Max deadline: 1
03/21/2020 09:01:10 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/21/2020 09:01:11 PM DEBUG findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans (u'/usr/share/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000
03/21/2020 09:01:11 PM DEBUG findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans (u'/usr/share/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000
03/21/2020 09:02:23 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/21/2020 09:02:23 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/21/2020 09:02:23 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/21/2020 09:02:23 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/21/2020 09:02:23 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/21/2020 09:02:23 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/21/2020 09:02:23 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/21/2020 09:02:23 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/21/2020 09:02:23 PM DEBUG [spec] No of nodes: 6
03/21/2020 09:02:23 PM DEBUG [spec] No of edges: 10
03/21/2020 09:02:23 PM DEBUG 
End of translate


03/21/2020 09:02:23 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/21/2020 09:02:23 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/21/2020 09:02:23 PM DEBUG 

Start policy computation

03/21/2020 09:02:23 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/21/2020 09:02:23 PM INFO Constructing product automaton with infinity DFA!
03/21/2020 09:02:23 PM INFO Product automaton size is: (130, 977)
03/21/2020 09:02:24 PM INFO Max deadline: 1
03/21/2020 09:02:24 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/21/2020 09:02:24 PM DEBUG findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans (u'/usr/share/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000
03/21/2020 09:02:24 PM DEBUG findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans (u'/usr/share/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000
03/21/2020 09:06:20 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/21/2020 09:06:20 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/21/2020 09:06:20 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/21/2020 09:06:20 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/21/2020 09:06:20 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/21/2020 09:06:20 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/21/2020 09:06:20 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/21/2020 09:06:20 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/21/2020 09:06:20 PM DEBUG [spec] No of nodes: 6
03/21/2020 09:06:20 PM DEBUG [spec] No of edges: 10
03/21/2020 09:06:20 PM DEBUG 
End of translate


03/21/2020 09:06:20 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/21/2020 09:06:20 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/21/2020 09:06:20 PM DEBUG 

Start policy computation

03/21/2020 09:06:20 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/21/2020 09:06:20 PM INFO Constructing product automaton with infinity DFA!
03/21/2020 09:06:20 PM INFO Product automaton size is: (130, 977)
03/21/2020 09:06:20 PM INFO Max deadline: 1
03/21/2020 09:06:20 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/21/2020 09:06:20 PM DEBUG findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans (u'/usr/share/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000
03/21/2020 09:06:20 PM DEBUG findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans (u'/usr/share/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000
03/21/2020 09:09:27 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/21/2020 09:09:27 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/21/2020 09:09:27 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/21/2020 09:09:27 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/21/2020 09:09:27 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/21/2020 09:09:27 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/21/2020 09:09:27 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/21/2020 09:09:27 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/21/2020 09:09:27 PM DEBUG [spec] No of nodes: 6
03/21/2020 09:09:27 PM DEBUG [spec] No of edges: 10
03/21/2020 09:09:27 PM DEBUG 
End of translate


03/21/2020 09:09:27 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/21/2020 09:09:27 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/21/2020 09:09:27 PM DEBUG 

Start policy computation

03/21/2020 09:09:27 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/21/2020 09:09:27 PM INFO Constructing product automaton with infinity DFA!
03/21/2020 09:09:27 PM INFO Product automaton size is: (130, 977)
03/21/2020 09:09:27 PM INFO Max deadline: 1
03/21/2020 09:09:27 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/21/2020 09:10:56 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/21/2020 09:10:56 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/21/2020 09:10:56 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/21/2020 09:10:56 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/21/2020 09:10:56 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/21/2020 09:10:56 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/21/2020 09:10:56 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/21/2020 09:10:56 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/21/2020 09:10:56 PM DEBUG [spec] No of nodes: 6
03/21/2020 09:10:56 PM DEBUG [spec] No of edges: 10
03/21/2020 09:10:56 PM DEBUG 
End of translate


03/21/2020 09:10:56 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/21/2020 09:10:56 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/21/2020 09:10:56 PM DEBUG 

Start policy computation

03/21/2020 09:10:56 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/21/2020 09:10:56 PM INFO Constructing product automaton with infinity DFA!
03/21/2020 09:10:56 PM INFO Product automaton size is: (130, 977)
03/21/2020 09:10:57 PM INFO Max deadline: 1
03/21/2020 09:10:57 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/21/2020 09:11:14 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/21/2020 09:11:14 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/21/2020 09:11:14 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/21/2020 09:11:14 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/21/2020 09:11:14 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/21/2020 09:11:14 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/21/2020 09:11:14 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/21/2020 09:11:14 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/21/2020 09:11:14 PM DEBUG [spec] No of nodes: 6
03/21/2020 09:11:14 PM DEBUG [spec] No of edges: 10
03/21/2020 09:11:14 PM DEBUG 
End of translate


03/21/2020 09:11:14 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/21/2020 09:11:14 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/21/2020 09:11:14 PM DEBUG 

Start policy computation

03/21/2020 09:11:14 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/21/2020 09:11:14 PM INFO Constructing product automaton with infinity DFA!
03/21/2020 09:11:14 PM INFO Product automaton size is: (130, 977)
03/21/2020 09:11:14 PM INFO Max deadline: 1
03/21/2020 09:11:14 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/21/2020 09:11:31 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/21/2020 09:11:31 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/21/2020 09:11:31 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/21/2020 09:11:31 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/21/2020 09:11:31 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/21/2020 09:11:31 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/21/2020 09:11:31 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/21/2020 09:11:31 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/21/2020 09:11:31 PM DEBUG [spec] No of nodes: 6
03/21/2020 09:11:31 PM DEBUG [spec] No of edges: 10
03/21/2020 09:11:31 PM DEBUG 
End of translate


03/21/2020 09:11:31 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/21/2020 09:11:31 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/21/2020 09:11:31 PM DEBUG 

Start policy computation

03/21/2020 09:11:31 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/21/2020 09:11:31 PM INFO Constructing product automaton with infinity DFA!
03/21/2020 09:11:31 PM INFO Product automaton size is: (130, 977)
03/21/2020 09:11:31 PM INFO Max deadline: 1
03/21/2020 09:11:31 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/21/2020 09:11:31 PM DEBUG findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans (u'/usr/share/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000
03/21/2020 09:11:54 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/21/2020 09:11:54 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/21/2020 09:11:54 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/21/2020 09:11:54 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/21/2020 09:11:54 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/21/2020 09:11:54 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/21/2020 09:11:54 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/21/2020 09:11:54 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/21/2020 09:11:54 PM DEBUG [spec] No of nodes: 6
03/21/2020 09:11:54 PM DEBUG [spec] No of edges: 10
03/21/2020 09:11:54 PM DEBUG 
End of translate


03/21/2020 09:11:54 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/21/2020 09:11:54 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/21/2020 09:11:54 PM DEBUG 

Start policy computation

03/21/2020 09:11:54 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/21/2020 09:11:54 PM INFO Constructing product automaton with infinity DFA!
03/21/2020 09:11:54 PM INFO Product automaton size is: (130, 977)
03/21/2020 09:11:54 PM INFO Max deadline: 1
03/21/2020 09:11:54 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/21/2020 09:11:54 PM DEBUG findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans (u'/usr/share/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000
03/21/2020 09:16:06 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/21/2020 09:16:06 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/21/2020 09:16:06 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/21/2020 09:16:06 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/21/2020 09:16:06 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/21/2020 09:16:06 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/21/2020 09:16:06 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/21/2020 09:16:06 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/21/2020 09:16:06 PM DEBUG [spec] No of nodes: 6
03/21/2020 09:16:06 PM DEBUG [spec] No of edges: 10
03/21/2020 09:16:06 PM DEBUG 
End of translate


03/21/2020 09:16:06 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/21/2020 09:16:06 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/21/2020 09:16:06 PM DEBUG 

Start policy computation

03/21/2020 09:16:06 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/21/2020 09:16:06 PM INFO Constructing product automaton with infinity DFA!
03/21/2020 09:16:06 PM INFO Product automaton size is: (130, 977)
03/21/2020 09:16:06 PM INFO Max deadline: 1
03/21/2020 09:16:06 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/21/2020 09:17:00 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/21/2020 09:17:00 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/21/2020 09:17:00 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/21/2020 09:17:00 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/21/2020 09:17:00 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/21/2020 09:17:00 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/21/2020 09:17:00 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/21/2020 09:17:00 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/21/2020 09:17:00 PM DEBUG [spec] No of nodes: 6
03/21/2020 09:17:00 PM DEBUG [spec] No of edges: 10
03/21/2020 09:17:00 PM DEBUG 
End of translate


03/21/2020 09:17:00 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/21/2020 09:17:00 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/21/2020 09:17:00 PM DEBUG 

Start policy computation

03/21/2020 09:17:00 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/21/2020 09:17:00 PM INFO Constructing product automaton with infinity DFA!
03/21/2020 09:17:00 PM INFO Product automaton size is: (130, 977)
03/21/2020 09:17:00 PM INFO Max deadline: 1
03/21/2020 09:17:00 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/21/2020 09:18:30 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/21/2020 09:18:30 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/21/2020 09:18:30 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/21/2020 09:18:30 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/21/2020 09:18:30 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/21/2020 09:18:30 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/21/2020 09:18:30 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/21/2020 09:18:30 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/21/2020 09:18:30 PM DEBUG [spec] No of nodes: 6
03/21/2020 09:18:30 PM DEBUG [spec] No of edges: 10
03/21/2020 09:18:30 PM DEBUG 
End of translate


03/21/2020 09:18:30 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/21/2020 09:18:30 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/21/2020 09:18:30 PM DEBUG 

Start policy computation

03/21/2020 09:18:30 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/21/2020 09:18:30 PM INFO Constructing product automaton with infinity DFA!
03/21/2020 09:18:30 PM INFO Product automaton size is: (130, 977)
03/21/2020 09:18:30 PM INFO Max deadline: 1
03/21/2020 09:18:30 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/21/2020 09:18:52 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/21/2020 09:18:52 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/21/2020 09:18:52 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/21/2020 09:18:52 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/21/2020 09:18:52 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/21/2020 09:18:52 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/21/2020 09:18:52 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/21/2020 09:18:52 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/21/2020 09:18:52 PM DEBUG [spec] No of nodes: 6
03/21/2020 09:18:52 PM DEBUG [spec] No of edges: 10
03/21/2020 09:18:52 PM DEBUG 
End of translate


03/21/2020 09:18:52 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/21/2020 09:18:52 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/21/2020 09:18:52 PM DEBUG 

Start policy computation

03/21/2020 09:18:52 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/21/2020 09:18:52 PM INFO Constructing product automaton with infinity DFA!
03/21/2020 09:18:52 PM INFO Product automaton size is: (130, 977)
03/21/2020 09:18:52 PM INFO Max deadline: 1
03/21/2020 09:18:52 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/21/2020 09:18:52 PM DEBUG findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans (u'/usr/share/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000
03/21/2020 09:20:19 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/21/2020 09:20:19 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/21/2020 09:20:19 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/21/2020 09:20:19 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/21/2020 09:20:19 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/21/2020 09:20:19 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/21/2020 09:20:19 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/21/2020 09:20:19 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/21/2020 09:20:19 PM DEBUG [spec] No of nodes: 6
03/21/2020 09:20:19 PM DEBUG [spec] No of edges: 10
03/21/2020 09:20:19 PM DEBUG 
End of translate


03/21/2020 09:20:19 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/21/2020 09:20:19 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/21/2020 09:20:19 PM DEBUG 

Start policy computation

03/21/2020 09:20:19 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/21/2020 09:20:19 PM INFO Constructing product automaton with infinity DFA!
03/21/2020 09:20:19 PM INFO Product automaton size is: (130, 977)
03/21/2020 09:20:19 PM INFO Max deadline: 1
03/21/2020 09:20:19 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/21/2020 09:20:28 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/21/2020 09:20:28 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/21/2020 09:20:28 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/21/2020 09:20:28 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/21/2020 09:20:28 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/21/2020 09:20:28 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/21/2020 09:20:28 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/21/2020 09:20:28 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/21/2020 09:20:28 PM DEBUG [spec] No of nodes: 6
03/21/2020 09:20:28 PM DEBUG [spec] No of edges: 10
03/21/2020 09:20:28 PM DEBUG 
End of translate


03/21/2020 09:20:28 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/21/2020 09:20:28 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/21/2020 09:20:28 PM DEBUG 

Start policy computation

03/21/2020 09:20:28 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/21/2020 09:20:28 PM INFO Constructing product automaton with infinity DFA!
03/21/2020 09:20:28 PM INFO Product automaton size is: (130, 977)
03/21/2020 09:20:28 PM INFO Max deadline: 1
03/21/2020 09:20:28 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/21/2020 09:21:35 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/21/2020 09:21:35 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/21/2020 09:21:35 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/21/2020 09:21:35 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/21/2020 09:21:35 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/21/2020 09:21:35 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/21/2020 09:21:35 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/21/2020 09:21:35 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/21/2020 09:21:35 PM DEBUG [spec] No of nodes: 6
03/21/2020 09:21:35 PM DEBUG [spec] No of edges: 10
03/21/2020 09:21:35 PM DEBUG 
End of translate


03/21/2020 09:21:35 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/21/2020 09:21:35 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/21/2020 09:21:35 PM DEBUG 

Start policy computation

03/21/2020 09:21:35 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/21/2020 09:21:35 PM INFO Constructing product automaton with infinity DFA!
03/21/2020 09:21:35 PM INFO Product automaton size is: (130, 977)
03/21/2020 09:21:35 PM INFO Max deadline: 1
03/21/2020 09:21:35 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/21/2020 09:23:04 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/21/2020 09:23:04 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/21/2020 09:23:04 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/21/2020 09:23:04 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/21/2020 09:23:04 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/21/2020 09:23:04 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/21/2020 09:23:04 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/21/2020 09:23:04 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/21/2020 09:23:04 PM DEBUG [spec] No of nodes: 6
03/21/2020 09:23:04 PM DEBUG [spec] No of edges: 10
03/21/2020 09:23:04 PM DEBUG 
End of translate


03/21/2020 09:23:04 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/21/2020 09:23:04 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/21/2020 09:23:04 PM DEBUG 

Start policy computation

03/21/2020 09:23:04 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/21/2020 09:23:04 PM INFO Constructing product automaton with infinity DFA!
03/21/2020 09:23:04 PM INFO Product automaton size is: (130, 977)
03/21/2020 09:23:04 PM INFO Max deadline: 1
03/21/2020 09:23:04 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/21/2020 09:23:04 PM DEBUG findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans (u'/usr/share/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000
03/21/2020 09:24:02 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/21/2020 09:24:02 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/21/2020 09:24:02 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/21/2020 09:24:02 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/21/2020 09:24:02 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/21/2020 09:24:02 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/21/2020 09:24:02 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/21/2020 09:24:02 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/21/2020 09:24:02 PM DEBUG [spec] No of nodes: 6
03/21/2020 09:24:02 PM DEBUG [spec] No of edges: 10
03/21/2020 09:24:02 PM DEBUG 
End of translate


03/21/2020 09:24:02 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/21/2020 09:24:02 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/21/2020 09:24:02 PM DEBUG 

Start policy computation

03/21/2020 09:24:02 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/21/2020 09:24:02 PM INFO Constructing product automaton with infinity DFA!
03/21/2020 09:24:02 PM INFO Product automaton size is: (130, 977)
03/21/2020 09:24:02 PM INFO Max deadline: 1
03/21/2020 09:24:02 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/21/2020 09:24:02 PM DEBUG findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans (u'/usr/share/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000
03/21/2020 09:24:39 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/21/2020 09:24:39 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/21/2020 09:24:39 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/21/2020 09:24:39 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/21/2020 09:24:39 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/21/2020 09:24:39 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/21/2020 09:24:39 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/21/2020 09:24:39 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/21/2020 09:24:39 PM DEBUG [spec] No of nodes: 6
03/21/2020 09:24:39 PM DEBUG [spec] No of edges: 10
03/21/2020 09:24:39 PM DEBUG 
End of translate


03/21/2020 09:24:39 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/21/2020 09:24:39 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/21/2020 09:24:39 PM DEBUG 

Start policy computation

03/21/2020 09:24:39 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/21/2020 09:24:39 PM INFO Constructing product automaton with infinity DFA!
03/21/2020 09:24:39 PM INFO Product automaton size is: (130, 977)
03/21/2020 09:24:39 PM INFO Max deadline: 1
03/21/2020 09:24:39 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/21/2020 09:24:40 PM DEBUG findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans (u'/usr/share/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000
03/21/2020 09:27:13 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/21/2020 09:27:13 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/21/2020 09:27:13 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/21/2020 09:27:13 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/21/2020 09:27:13 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/21/2020 09:27:13 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/21/2020 09:27:13 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/21/2020 09:27:13 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/21/2020 09:27:13 PM DEBUG [spec] No of nodes: 6
03/21/2020 09:27:13 PM DEBUG [spec] No of edges: 10
03/21/2020 09:27:13 PM DEBUG 
End of translate


03/21/2020 09:27:13 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/21/2020 09:27:13 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/21/2020 09:27:13 PM DEBUG 

Start policy computation

03/21/2020 09:27:13 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/21/2020 09:27:13 PM INFO Constructing product automaton with infinity DFA!
03/21/2020 09:27:13 PM INFO Product automaton size is: (130, 977)
03/21/2020 09:27:13 PM INFO Max deadline: 1
03/21/2020 09:27:13 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/21/2020 09:27:13 PM DEBUG findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans (u'/usr/share/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000
03/21/2020 09:29:09 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/21/2020 09:29:09 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/21/2020 09:29:09 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/21/2020 09:29:09 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/21/2020 09:29:09 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/21/2020 09:29:09 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/21/2020 09:29:09 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/21/2020 09:29:09 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/21/2020 09:29:09 PM DEBUG [spec] No of nodes: 6
03/21/2020 09:29:09 PM DEBUG [spec] No of edges: 10
03/21/2020 09:29:09 PM DEBUG 
End of translate


03/21/2020 09:29:09 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/21/2020 09:29:09 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/21/2020 09:29:09 PM DEBUG 

Start policy computation

03/21/2020 09:29:09 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/21/2020 09:29:09 PM INFO Constructing product automaton with infinity DFA!
03/21/2020 09:29:09 PM INFO Product automaton size is: (130, 977)
03/21/2020 09:29:09 PM INFO Max deadline: 1
03/21/2020 09:29:09 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/21/2020 09:30:12 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/21/2020 09:30:12 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/21/2020 09:30:12 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/21/2020 09:30:12 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/21/2020 09:30:12 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/21/2020 09:30:12 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/21/2020 09:30:12 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/21/2020 09:30:12 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/21/2020 09:30:12 PM DEBUG [spec] No of nodes: 6
03/21/2020 09:30:12 PM DEBUG [spec] No of edges: 10
03/21/2020 09:30:12 PM DEBUG 
End of translate


03/21/2020 09:30:12 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/21/2020 09:30:12 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/21/2020 09:30:12 PM DEBUG 

Start policy computation

03/21/2020 09:30:12 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/21/2020 09:30:12 PM INFO Constructing product automaton with infinity DFA!
03/21/2020 09:30:12 PM INFO Product automaton size is: (130, 977)
03/21/2020 09:30:12 PM INFO Max deadline: 1
03/21/2020 09:30:12 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/21/2020 09:30:18 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/21/2020 09:30:18 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/21/2020 09:30:18 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/21/2020 09:30:18 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/21/2020 09:30:18 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/21/2020 09:30:18 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/21/2020 09:30:18 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/21/2020 09:30:18 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/21/2020 09:30:18 PM DEBUG [spec] No of nodes: 6
03/21/2020 09:30:18 PM DEBUG [spec] No of edges: 10
03/21/2020 09:30:18 PM DEBUG 
End of translate


03/21/2020 09:30:18 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/21/2020 09:30:18 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/21/2020 09:30:18 PM DEBUG 

Start policy computation

03/21/2020 09:30:18 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/21/2020 09:30:18 PM INFO Constructing product automaton with infinity DFA!
03/21/2020 09:30:18 PM INFO Product automaton size is: (130, 977)
03/21/2020 09:30:18 PM INFO Max deadline: 1
03/21/2020 09:30:18 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/21/2020 09:31:51 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/21/2020 09:31:51 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/21/2020 09:31:51 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/21/2020 09:31:51 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/21/2020 09:31:51 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/21/2020 09:31:51 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/21/2020 09:31:51 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/21/2020 09:31:51 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/21/2020 09:31:51 PM DEBUG [spec] No of nodes: 6
03/21/2020 09:31:51 PM DEBUG [spec] No of edges: 10
03/21/2020 09:31:51 PM DEBUG 
End of translate


03/21/2020 09:31:51 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/21/2020 09:31:51 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/21/2020 09:31:51 PM DEBUG 

Start policy computation

03/21/2020 09:31:51 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/21/2020 09:31:51 PM INFO Constructing product automaton with infinity DFA!
03/21/2020 09:31:51 PM INFO Product automaton size is: (130, 977)
03/21/2020 09:31:51 PM INFO Max deadline: 1
03/21/2020 09:31:51 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/21/2020 09:32:48 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/21/2020 09:32:48 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/21/2020 09:32:48 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/21/2020 09:32:48 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/21/2020 09:32:48 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/21/2020 09:32:48 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/21/2020 09:32:48 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/21/2020 09:32:48 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/21/2020 09:32:48 PM DEBUG [spec] No of nodes: 6
03/21/2020 09:32:48 PM DEBUG [spec] No of edges: 10
03/21/2020 09:32:48 PM DEBUG 
End of translate


03/21/2020 09:32:48 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/21/2020 09:32:48 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/21/2020 09:32:48 PM DEBUG 

Start policy computation

03/21/2020 09:32:48 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/21/2020 09:32:48 PM INFO Constructing product automaton with infinity DFA!
03/21/2020 09:32:48 PM INFO Product automaton size is: (130, 977)
03/21/2020 09:32:49 PM INFO Max deadline: 1
03/21/2020 09:32:49 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/21/2020 09:33:21 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/21/2020 09:33:21 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/21/2020 09:33:21 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/21/2020 09:33:21 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/21/2020 09:33:21 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/21/2020 09:33:21 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/21/2020 09:33:21 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/21/2020 09:33:21 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/21/2020 09:33:21 PM DEBUG [spec] No of nodes: 6
03/21/2020 09:33:21 PM DEBUG [spec] No of edges: 10
03/21/2020 09:33:21 PM DEBUG 
End of translate


03/21/2020 09:33:21 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/21/2020 09:33:21 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/21/2020 09:33:21 PM DEBUG 

Start policy computation

03/21/2020 09:33:21 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/21/2020 09:33:21 PM INFO Constructing product automaton with infinity DFA!
03/21/2020 09:33:21 PM INFO Product automaton size is: (130, 977)
03/21/2020 09:33:21 PM INFO Max deadline: 1
03/21/2020 09:33:21 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/21/2020 09:33:21 PM DEBUG findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans (u'/usr/share/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000
03/21/2020 09:41:12 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/21/2020 09:41:12 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/21/2020 09:41:12 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/21/2020 09:41:12 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/21/2020 09:41:12 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/21/2020 09:41:12 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/21/2020 09:41:12 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/21/2020 09:41:12 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/21/2020 09:41:12 PM DEBUG [spec] No of nodes: 6
03/21/2020 09:41:12 PM DEBUG [spec] No of edges: 10
03/21/2020 09:41:12 PM DEBUG 
End of translate


03/21/2020 09:41:12 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/21/2020 09:41:12 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/21/2020 09:41:12 PM DEBUG 

Start policy computation

03/21/2020 09:41:12 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/21/2020 09:41:12 PM INFO Constructing product automaton with infinity DFA!
03/21/2020 09:41:12 PM INFO Product automaton size is: (130, 977)
03/21/2020 09:41:12 PM INFO Max deadline: 1
03/21/2020 09:41:12 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/21/2020 09:41:12 PM DEBUG findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans (u'/usr/share/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000
03/21/2020 09:41:19 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/21/2020 09:41:19 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/21/2020 09:41:19 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/21/2020 09:41:19 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/21/2020 09:41:19 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/21/2020 09:41:19 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/21/2020 09:41:19 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/21/2020 09:41:19 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/21/2020 09:41:19 PM DEBUG [spec] No of nodes: 6
03/21/2020 09:41:19 PM DEBUG [spec] No of edges: 10
03/21/2020 09:41:19 PM DEBUG 
End of translate


03/21/2020 09:41:19 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/21/2020 09:41:19 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/21/2020 09:41:19 PM DEBUG 

Start policy computation

03/21/2020 09:41:19 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/21/2020 09:41:19 PM INFO Constructing product automaton with infinity DFA!
03/21/2020 09:41:19 PM INFO Product automaton size is: (130, 977)
03/21/2020 09:41:19 PM INFO Max deadline: 1
03/21/2020 09:41:19 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/21/2020 09:41:20 PM DEBUG findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans (u'/usr/share/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000
03/21/2020 09:42:38 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/21/2020 09:42:38 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/21/2020 09:42:38 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/21/2020 09:42:38 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/21/2020 09:42:38 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/21/2020 09:42:38 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/21/2020 09:42:38 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/21/2020 09:42:38 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/21/2020 09:42:38 PM DEBUG [spec] No of nodes: 6
03/21/2020 09:42:38 PM DEBUG [spec] No of edges: 10
03/21/2020 09:42:38 PM DEBUG 
End of translate


03/21/2020 09:42:38 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/21/2020 09:42:38 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/21/2020 09:42:38 PM DEBUG 

Start policy computation

03/21/2020 09:42:38 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/21/2020 09:42:38 PM INFO Constructing product automaton with infinity DFA!
03/21/2020 09:42:38 PM INFO Product automaton size is: (130, 977)
03/21/2020 09:42:38 PM INFO Max deadline: 1
03/21/2020 09:42:38 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/21/2020 09:42:38 PM DEBUG findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans (u'/usr/share/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000
03/21/2020 09:43:44 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/21/2020 09:43:44 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/21/2020 09:43:44 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/21/2020 09:43:44 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/21/2020 09:43:44 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/21/2020 09:43:44 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/21/2020 09:43:44 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/21/2020 09:43:44 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/21/2020 09:43:44 PM DEBUG [spec] No of nodes: 6
03/21/2020 09:43:44 PM DEBUG [spec] No of edges: 10
03/21/2020 09:43:44 PM DEBUG 
End of translate


03/21/2020 09:43:44 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/21/2020 09:43:44 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/21/2020 09:43:44 PM DEBUG 

Start policy computation

03/21/2020 09:43:44 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/21/2020 09:43:44 PM INFO Constructing product automaton with infinity DFA!
03/21/2020 09:43:44 PM INFO Product automaton size is: (130, 977)
03/21/2020 09:43:44 PM INFO Max deadline: 1
03/21/2020 09:43:44 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/21/2020 09:44:15 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/21/2020 09:44:15 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/21/2020 09:44:15 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/21/2020 09:44:15 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/21/2020 09:44:15 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/21/2020 09:44:15 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/21/2020 09:44:15 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/21/2020 09:44:15 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/21/2020 09:44:15 PM DEBUG [spec] No of nodes: 6
03/21/2020 09:44:15 PM DEBUG [spec] No of edges: 10
03/21/2020 09:44:15 PM DEBUG 
End of translate


03/21/2020 09:44:15 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/21/2020 09:44:15 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/21/2020 09:44:15 PM DEBUG 

Start policy computation

03/21/2020 09:44:15 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/21/2020 09:44:15 PM INFO Constructing product automaton with infinity DFA!
03/21/2020 09:44:15 PM INFO Product automaton size is: (130, 977)
03/21/2020 09:44:15 PM INFO Max deadline: 1
03/21/2020 09:44:15 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/21/2020 09:44:49 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/21/2020 09:44:49 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/21/2020 09:44:49 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/21/2020 09:44:49 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/21/2020 09:44:49 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/21/2020 09:44:49 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/21/2020 09:44:49 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/21/2020 09:44:49 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/21/2020 09:44:49 PM DEBUG [spec] No of nodes: 6
03/21/2020 09:44:49 PM DEBUG [spec] No of edges: 10
03/21/2020 09:44:49 PM DEBUG 
End of translate


03/21/2020 09:44:49 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/21/2020 09:44:49 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/21/2020 09:44:49 PM DEBUG 

Start policy computation

03/21/2020 09:44:49 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/21/2020 09:44:49 PM INFO Constructing product automaton with infinity DFA!
03/21/2020 09:44:49 PM INFO Product automaton size is: (130, 977)
03/21/2020 09:44:50 PM INFO Max deadline: 1
03/21/2020 09:44:50 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/21/2020 09:44:50 PM DEBUG findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans (u'/usr/share/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000
03/21/2020 09:48:22 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/21/2020 09:48:22 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/21/2020 09:48:22 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/21/2020 09:48:22 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/21/2020 09:48:22 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/21/2020 09:48:22 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/21/2020 09:48:22 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/21/2020 09:48:22 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/21/2020 09:48:22 PM DEBUG [spec] No of nodes: 6
03/21/2020 09:48:22 PM DEBUG [spec] No of edges: 10
03/21/2020 09:48:22 PM DEBUG 
End of translate


03/21/2020 09:48:22 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/21/2020 09:48:22 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/21/2020 09:48:22 PM DEBUG 

Start policy computation

03/21/2020 09:48:22 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/21/2020 09:48:22 PM INFO Constructing product automaton with infinity DFA!
03/21/2020 09:48:22 PM INFO Product automaton size is: (130, 977)
03/21/2020 09:48:22 PM INFO Max deadline: 1
03/21/2020 09:48:22 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/21/2020 09:48:41 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/21/2020 09:48:41 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/21/2020 09:48:41 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/21/2020 09:48:41 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/21/2020 09:48:41 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/21/2020 09:48:41 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/21/2020 09:48:41 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/21/2020 09:48:41 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/21/2020 09:48:41 PM DEBUG [spec] No of nodes: 6
03/21/2020 09:48:41 PM DEBUG [spec] No of edges: 10
03/21/2020 09:48:41 PM DEBUG 
End of translate


03/21/2020 09:48:41 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/21/2020 09:48:41 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/21/2020 09:48:41 PM DEBUG 

Start policy computation

03/21/2020 09:48:41 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/21/2020 09:48:41 PM INFO Constructing product automaton with infinity DFA!
03/21/2020 09:48:41 PM INFO Product automaton size is: (130, 977)
03/21/2020 09:48:41 PM INFO Max deadline: 1
03/21/2020 09:48:41 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/21/2020 09:48:42 PM DEBUG findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans (u'/usr/share/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000
03/21/2020 09:50:22 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/21/2020 09:50:22 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/21/2020 09:50:22 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/21/2020 09:50:22 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/21/2020 09:50:22 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/21/2020 09:50:22 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/21/2020 09:50:22 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/21/2020 09:50:22 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/21/2020 09:50:22 PM DEBUG [spec] No of nodes: 6
03/21/2020 09:50:22 PM DEBUG [spec] No of edges: 10
03/21/2020 09:50:22 PM DEBUG 
End of translate


03/21/2020 09:50:22 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/21/2020 09:50:22 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/21/2020 09:50:22 PM DEBUG 

Start policy computation

03/21/2020 09:50:22 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/21/2020 09:50:22 PM INFO Constructing product automaton with infinity DFA!
03/21/2020 09:50:22 PM INFO Product automaton size is: (130, 977)
03/21/2020 09:50:22 PM INFO Max deadline: 1
03/21/2020 09:50:22 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/21/2020 09:51:42 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/21/2020 09:51:42 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/21/2020 09:51:42 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/21/2020 09:51:42 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/21/2020 09:51:42 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/21/2020 09:51:42 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/21/2020 09:51:42 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/21/2020 09:51:42 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/21/2020 09:51:42 PM DEBUG [spec] No of nodes: 6
03/21/2020 09:51:42 PM DEBUG [spec] No of edges: 10
03/21/2020 09:51:42 PM DEBUG 
End of translate


03/21/2020 09:51:42 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/21/2020 09:51:42 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/21/2020 09:51:42 PM DEBUG 

Start policy computation

03/21/2020 09:51:42 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/21/2020 09:51:42 PM INFO Constructing product automaton with infinity DFA!
03/21/2020 09:51:42 PM INFO Product automaton size is: (130, 977)
03/21/2020 09:51:42 PM INFO Max deadline: 1
03/21/2020 09:51:42 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/21/2020 09:52:08 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/21/2020 09:52:08 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/21/2020 09:52:08 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/21/2020 09:52:08 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/21/2020 09:52:08 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/21/2020 09:52:08 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/21/2020 09:52:08 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/21/2020 09:52:08 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/21/2020 09:52:08 PM DEBUG [spec] No of nodes: 6
03/21/2020 09:52:08 PM DEBUG [spec] No of edges: 10
03/21/2020 09:52:08 PM DEBUG 
End of translate


03/21/2020 09:52:08 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/21/2020 09:52:08 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/21/2020 09:52:08 PM DEBUG 

Start policy computation

03/21/2020 09:52:08 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/21/2020 09:52:08 PM INFO Constructing product automaton with infinity DFA!
03/21/2020 09:52:08 PM INFO Product automaton size is: (130, 977)
03/21/2020 09:52:09 PM INFO Max deadline: 1
03/21/2020 09:52:09 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/21/2020 09:52:09 PM DEBUG findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans (u'/usr/share/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000
03/21/2020 09:54:23 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/21/2020 09:54:23 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/21/2020 09:54:23 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/21/2020 09:54:23 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/21/2020 09:54:23 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/21/2020 09:54:23 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/21/2020 09:54:23 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/21/2020 09:54:23 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/21/2020 09:54:23 PM DEBUG [spec] No of nodes: 6
03/21/2020 09:54:23 PM DEBUG [spec] No of edges: 10
03/21/2020 09:54:23 PM DEBUG 
End of translate


03/21/2020 09:54:23 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/21/2020 09:54:23 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/21/2020 09:54:23 PM DEBUG 

Start policy computation

03/21/2020 09:54:23 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/21/2020 09:54:23 PM INFO Constructing product automaton with infinity DFA!
03/21/2020 09:54:23 PM INFO Product automaton size is: (130, 977)
03/21/2020 09:54:23 PM INFO Max deadline: 1
03/21/2020 09:54:23 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/21/2020 09:54:23 PM DEBUG findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans (u'/usr/share/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000
03/21/2020 09:54:48 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/21/2020 09:54:48 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/21/2020 09:54:48 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/21/2020 09:54:48 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/21/2020 09:54:48 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/21/2020 09:54:48 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/21/2020 09:54:48 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/21/2020 09:54:48 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/21/2020 09:54:48 PM DEBUG [spec] No of nodes: 6
03/21/2020 09:54:48 PM DEBUG [spec] No of edges: 10
03/21/2020 09:54:48 PM DEBUG 
End of translate


03/21/2020 09:54:48 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/21/2020 09:54:48 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/21/2020 09:54:48 PM DEBUG 

Start policy computation

03/21/2020 09:54:48 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/21/2020 09:54:48 PM INFO Constructing product automaton with infinity DFA!
03/21/2020 09:54:48 PM INFO Product automaton size is: (130, 977)
03/21/2020 09:54:48 PM INFO Max deadline: 1
03/21/2020 09:54:48 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/21/2020 09:54:49 PM DEBUG findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans (u'/usr/share/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000
03/21/2020 09:55:49 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/21/2020 09:55:49 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/21/2020 09:55:49 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/21/2020 09:55:49 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/21/2020 09:55:49 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/21/2020 09:55:49 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/21/2020 09:55:49 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/21/2020 09:55:49 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/21/2020 09:55:49 PM DEBUG [spec] No of nodes: 6
03/21/2020 09:55:49 PM DEBUG [spec] No of edges: 10
03/21/2020 09:55:49 PM DEBUG 
End of translate


03/21/2020 09:55:49 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/21/2020 09:55:49 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/21/2020 09:55:49 PM DEBUG 

Start policy computation

03/21/2020 09:55:49 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/21/2020 09:55:49 PM INFO Constructing product automaton with infinity DFA!
03/21/2020 09:55:49 PM INFO Product automaton size is: (130, 977)
03/21/2020 09:55:49 PM INFO Max deadline: 1
03/21/2020 09:55:49 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/21/2020 09:55:49 PM DEBUG findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans (u'/usr/share/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000
03/21/2020 09:56:25 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/21/2020 09:56:25 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/21/2020 09:56:25 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/21/2020 09:56:25 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/21/2020 09:56:25 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/21/2020 09:56:25 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/21/2020 09:56:25 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/21/2020 09:56:25 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/21/2020 09:56:25 PM DEBUG [spec] No of nodes: 6
03/21/2020 09:56:25 PM DEBUG [spec] No of edges: 10
03/21/2020 09:56:25 PM DEBUG 
End of translate


03/21/2020 09:56:25 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/21/2020 09:56:25 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/21/2020 09:56:25 PM DEBUG 

Start policy computation

03/21/2020 09:56:25 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/21/2020 09:56:25 PM INFO Constructing product automaton with infinity DFA!
03/21/2020 09:56:25 PM INFO Product automaton size is: (130, 977)
03/21/2020 09:56:25 PM INFO Max deadline: 1
03/21/2020 09:56:25 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/21/2020 09:57:52 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/21/2020 09:57:52 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/21/2020 09:57:52 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/21/2020 09:57:52 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/21/2020 09:57:52 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/21/2020 09:57:52 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/21/2020 09:57:52 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/21/2020 09:57:52 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/21/2020 09:57:52 PM DEBUG [spec] No of nodes: 6
03/21/2020 09:57:52 PM DEBUG [spec] No of edges: 10
03/21/2020 09:57:52 PM DEBUG 
End of translate


03/21/2020 09:57:52 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/21/2020 09:57:52 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/21/2020 09:57:52 PM DEBUG 

Start policy computation

03/21/2020 09:57:52 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/21/2020 09:57:52 PM INFO Constructing product automaton with infinity DFA!
03/21/2020 09:57:52 PM INFO Product automaton size is: (130, 977)
03/21/2020 09:57:52 PM INFO Max deadline: 1
03/21/2020 09:57:52 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/21/2020 09:57:53 PM DEBUG findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans (u'/usr/share/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000
03/21/2020 10:05:37 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/21/2020 10:05:37 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/21/2020 10:05:37 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/21/2020 10:05:37 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/21/2020 10:05:37 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/21/2020 10:05:37 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/21/2020 10:05:37 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/21/2020 10:05:37 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/21/2020 10:05:37 PM DEBUG [spec] No of nodes: 6
03/21/2020 10:05:37 PM DEBUG [spec] No of edges: 10
03/21/2020 10:05:37 PM DEBUG 
End of translate


03/21/2020 10:05:37 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/21/2020 10:05:37 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/21/2020 10:05:37 PM DEBUG 

Start policy computation

03/21/2020 10:05:37 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/21/2020 10:05:37 PM INFO Constructing product automaton with infinity DFA!
03/21/2020 10:05:37 PM INFO Product automaton size is: (130, 977)
03/21/2020 10:05:37 PM INFO Max deadline: 1
03/21/2020 10:05:37 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/21/2020 10:05:37 PM DEBUG findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans (u'/usr/share/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000
03/21/2020 10:06:04 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/21/2020 10:06:04 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/21/2020 10:06:04 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/21/2020 10:06:04 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/21/2020 10:06:04 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/21/2020 10:06:04 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/21/2020 10:06:04 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/21/2020 10:06:04 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/21/2020 10:06:04 PM DEBUG [spec] No of nodes: 6
03/21/2020 10:06:04 PM DEBUG [spec] No of edges: 10
03/21/2020 10:06:04 PM DEBUG 
End of translate


03/21/2020 10:06:04 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/21/2020 10:06:04 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/21/2020 10:06:04 PM DEBUG 

Start policy computation

03/21/2020 10:06:04 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/21/2020 10:06:04 PM INFO Constructing product automaton with infinity DFA!
03/21/2020 10:06:04 PM INFO Product automaton size is: (130, 977)
03/21/2020 10:06:05 PM INFO Max deadline: 1
03/21/2020 10:06:05 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/21/2020 10:06:05 PM DEBUG findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans (u'/usr/share/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000
03/21/2020 10:06:23 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/21/2020 10:06:23 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/21/2020 10:06:23 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/21/2020 10:06:23 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/21/2020 10:06:23 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/21/2020 10:06:23 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/21/2020 10:06:23 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/21/2020 10:06:23 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/21/2020 10:06:23 PM DEBUG [spec] No of nodes: 6
03/21/2020 10:06:23 PM DEBUG [spec] No of edges: 10
03/21/2020 10:06:23 PM DEBUG 
End of translate


03/21/2020 10:06:23 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/21/2020 10:06:23 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/21/2020 10:06:23 PM DEBUG 

Start policy computation

03/21/2020 10:06:23 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/21/2020 10:06:23 PM INFO Constructing product automaton with infinity DFA!
03/21/2020 10:06:23 PM INFO Product automaton size is: (130, 977)
03/21/2020 10:06:23 PM INFO Max deadline: 1
03/21/2020 10:06:23 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/21/2020 10:06:23 PM DEBUG findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans (u'/usr/share/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000
03/21/2020 10:08:26 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/21/2020 10:08:26 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/21/2020 10:08:26 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/21/2020 10:08:26 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/21/2020 10:08:26 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/21/2020 10:08:26 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/21/2020 10:08:26 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/21/2020 10:08:26 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/21/2020 10:08:26 PM DEBUG [spec] No of nodes: 6
03/21/2020 10:08:26 PM DEBUG [spec] No of edges: 10
03/21/2020 10:08:26 PM DEBUG 
End of translate


03/21/2020 10:08:26 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/21/2020 10:08:26 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/21/2020 10:08:26 PM DEBUG 

Start policy computation

03/21/2020 10:08:26 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/21/2020 10:08:26 PM INFO Constructing product automaton with infinity DFA!
03/21/2020 10:08:26 PM INFO Product automaton size is: (130, 977)
03/21/2020 10:08:27 PM INFO Max deadline: 1
03/21/2020 10:08:27 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/21/2020 10:08:27 PM DEBUG findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans (u'/usr/share/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000
03/21/2020 10:09:12 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/21/2020 10:09:12 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/21/2020 10:09:12 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/21/2020 10:09:12 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/21/2020 10:09:12 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/21/2020 10:09:12 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/21/2020 10:09:12 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/21/2020 10:09:12 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/21/2020 10:09:12 PM DEBUG [spec] No of nodes: 6
03/21/2020 10:09:12 PM DEBUG [spec] No of edges: 10
03/21/2020 10:09:12 PM DEBUG 
End of translate


03/21/2020 10:09:12 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/21/2020 10:09:12 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/21/2020 10:09:12 PM DEBUG 

Start policy computation

03/21/2020 10:09:12 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/21/2020 10:09:12 PM INFO Constructing product automaton with infinity DFA!
03/21/2020 10:09:12 PM INFO Product automaton size is: (130, 977)
03/21/2020 10:09:12 PM INFO Max deadline: 1
03/21/2020 10:09:12 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/21/2020 10:09:13 PM DEBUG findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans (u'/usr/share/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000
03/21/2020 10:10:09 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/21/2020 10:10:09 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/21/2020 10:10:09 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/21/2020 10:10:09 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/21/2020 10:10:09 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/21/2020 10:10:09 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/21/2020 10:10:09 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/21/2020 10:10:09 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/21/2020 10:10:09 PM DEBUG [spec] No of nodes: 6
03/21/2020 10:10:09 PM DEBUG [spec] No of edges: 10
03/21/2020 10:10:09 PM DEBUG 
End of translate


03/21/2020 10:10:09 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/21/2020 10:10:09 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/21/2020 10:10:09 PM DEBUG 

Start policy computation

03/21/2020 10:10:09 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/21/2020 10:10:09 PM INFO Constructing product automaton with infinity DFA!
03/21/2020 10:10:09 PM INFO Product automaton size is: (130, 977)
03/21/2020 10:10:09 PM INFO Max deadline: 1
03/21/2020 10:10:09 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/21/2020 10:10:09 PM DEBUG findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans (u'/usr/share/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000
03/21/2020 10:19:06 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/21/2020 10:19:06 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/21/2020 10:19:06 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/21/2020 10:19:06 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/21/2020 10:19:06 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/21/2020 10:19:06 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/21/2020 10:19:06 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/21/2020 10:19:06 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/21/2020 10:19:06 PM DEBUG [spec] No of nodes: 6
03/21/2020 10:19:06 PM DEBUG [spec] No of edges: 10
03/21/2020 10:19:06 PM DEBUG 
End of translate


03/21/2020 10:19:06 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/21/2020 10:19:06 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/21/2020 10:19:06 PM DEBUG 

Start policy computation

03/21/2020 10:19:06 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/21/2020 10:19:06 PM INFO Constructing product automaton with infinity DFA!
03/21/2020 10:19:06 PM INFO Product automaton size is: (130, 977)
03/21/2020 10:19:06 PM INFO Max deadline: 1
03/21/2020 10:19:06 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/21/2020 10:20:14 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/21/2020 10:20:14 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/21/2020 10:20:14 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/21/2020 10:20:14 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/21/2020 10:20:14 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/21/2020 10:20:14 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/21/2020 10:20:14 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/21/2020 10:20:14 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/21/2020 10:20:14 PM DEBUG [spec] No of nodes: 6
03/21/2020 10:20:14 PM DEBUG [spec] No of edges: 10
03/21/2020 10:20:14 PM DEBUG 
End of translate


03/21/2020 10:20:14 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/21/2020 10:20:14 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/21/2020 10:20:14 PM DEBUG 

Start policy computation

03/21/2020 10:20:14 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/21/2020 10:20:14 PM INFO Constructing product automaton with infinity DFA!
03/21/2020 10:20:14 PM INFO Product automaton size is: (130, 977)
03/21/2020 10:20:15 PM INFO Max deadline: 1
03/21/2020 10:20:15 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/21/2020 10:21:24 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/21/2020 10:21:24 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/21/2020 10:21:24 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/21/2020 10:21:24 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/21/2020 10:21:24 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/21/2020 10:21:24 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/21/2020 10:21:24 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/21/2020 10:21:24 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/21/2020 10:21:24 PM DEBUG [spec] No of nodes: 6
03/21/2020 10:21:24 PM DEBUG [spec] No of edges: 10
03/21/2020 10:21:24 PM DEBUG 
End of translate


03/21/2020 10:21:24 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/21/2020 10:21:24 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/21/2020 10:21:24 PM DEBUG 

Start policy computation

03/21/2020 10:21:24 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/21/2020 10:21:24 PM INFO Constructing product automaton with infinity DFA!
03/21/2020 10:21:24 PM INFO Product automaton size is: (130, 977)
03/21/2020 10:21:24 PM INFO Max deadline: 1
03/21/2020 10:21:24 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/21/2020 10:21:25 PM DEBUG findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans (u'/usr/share/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000
03/21/2020 10:22:53 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/21/2020 10:22:53 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/21/2020 10:22:53 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/21/2020 10:22:53 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/21/2020 10:22:53 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/21/2020 10:22:53 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/21/2020 10:22:53 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/21/2020 10:22:53 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/21/2020 10:22:53 PM DEBUG [spec] No of nodes: 6
03/21/2020 10:22:53 PM DEBUG [spec] No of edges: 10
03/21/2020 10:22:53 PM DEBUG 
End of translate


03/21/2020 10:22:53 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/21/2020 10:22:53 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/21/2020 10:22:53 PM DEBUG 

Start policy computation

03/21/2020 10:22:53 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/21/2020 10:22:53 PM INFO Constructing product automaton with infinity DFA!
03/21/2020 10:22:53 PM INFO Product automaton size is: (130, 977)
03/21/2020 10:22:53 PM INFO Max deadline: 1
03/21/2020 10:22:53 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/21/2020 10:23:33 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/21/2020 10:23:33 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/21/2020 10:23:33 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/21/2020 10:23:33 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/21/2020 10:23:33 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/21/2020 10:23:33 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/21/2020 10:23:33 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/21/2020 10:23:33 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/21/2020 10:23:33 PM DEBUG [spec] No of nodes: 6
03/21/2020 10:23:33 PM DEBUG [spec] No of edges: 10
03/21/2020 10:23:33 PM DEBUG 
End of translate


03/21/2020 10:23:33 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/21/2020 10:23:33 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/21/2020 10:23:33 PM DEBUG 

Start policy computation

03/21/2020 10:23:33 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/21/2020 10:23:33 PM INFO Constructing product automaton with infinity DFA!
03/21/2020 10:23:33 PM INFO Product automaton size is: (130, 977)
03/21/2020 10:23:33 PM INFO Max deadline: 1
03/21/2020 10:23:33 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/21/2020 10:25:11 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/21/2020 10:25:11 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/21/2020 10:25:11 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/21/2020 10:25:11 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/21/2020 10:25:11 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/21/2020 10:25:11 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/21/2020 10:25:11 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/21/2020 10:25:11 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/21/2020 10:25:11 PM DEBUG [spec] No of nodes: 6
03/21/2020 10:25:11 PM DEBUG [spec] No of edges: 10
03/21/2020 10:25:11 PM DEBUG 
End of translate


03/21/2020 10:25:11 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/21/2020 10:25:11 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/21/2020 10:25:11 PM DEBUG 

Start policy computation

03/21/2020 10:25:11 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/21/2020 10:25:11 PM INFO Constructing product automaton with infinity DFA!
03/21/2020 10:25:11 PM INFO Product automaton size is: (130, 977)
03/21/2020 10:25:11 PM INFO Max deadline: 1
03/21/2020 10:25:11 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/21/2020 10:25:11 PM DEBUG findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans (u'/usr/share/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000
03/21/2020 10:29:49 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/21/2020 10:29:49 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/21/2020 10:29:49 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/21/2020 10:29:49 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/21/2020 10:29:49 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/21/2020 10:29:49 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/21/2020 10:29:49 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/21/2020 10:29:49 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/21/2020 10:29:49 PM DEBUG [spec] No of nodes: 6
03/21/2020 10:29:49 PM DEBUG [spec] No of edges: 10
03/21/2020 10:29:49 PM DEBUG 
End of translate


03/21/2020 10:29:49 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/21/2020 10:29:49 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/21/2020 10:29:49 PM DEBUG 

Start policy computation

03/21/2020 10:29:49 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/21/2020 10:29:49 PM INFO Constructing product automaton with infinity DFA!
03/21/2020 10:29:49 PM INFO Product automaton size is: (130, 977)
03/21/2020 10:29:49 PM INFO Max deadline: 1
03/21/2020 10:29:49 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/21/2020 10:30:01 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/21/2020 10:30:01 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/21/2020 10:30:01 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/21/2020 10:30:01 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/21/2020 10:30:01 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/21/2020 10:30:01 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/21/2020 10:30:01 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/21/2020 10:30:01 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/21/2020 10:30:01 PM DEBUG [spec] No of nodes: 6
03/21/2020 10:30:01 PM DEBUG [spec] No of edges: 10
03/21/2020 10:30:01 PM DEBUG 
End of translate


03/21/2020 10:30:01 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/21/2020 10:30:01 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/21/2020 10:30:01 PM DEBUG 

Start policy computation

03/21/2020 10:30:01 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/21/2020 10:30:01 PM INFO Constructing product automaton with infinity DFA!
03/21/2020 10:30:01 PM INFO Product automaton size is: (130, 977)
03/21/2020 10:30:01 PM INFO Max deadline: 1
03/21/2020 10:30:01 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/21/2020 10:30:01 PM DEBUG findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans (u'/usr/share/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000
03/21/2020 10:30:32 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/21/2020 10:30:32 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/21/2020 10:30:32 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/21/2020 10:30:32 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/21/2020 10:30:32 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/21/2020 10:30:32 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/21/2020 10:30:32 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/21/2020 10:30:32 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/21/2020 10:30:32 PM DEBUG [spec] No of nodes: 6
03/21/2020 10:30:32 PM DEBUG [spec] No of edges: 10
03/21/2020 10:30:32 PM DEBUG 
End of translate


03/21/2020 10:30:32 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/21/2020 10:30:32 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/21/2020 10:30:32 PM DEBUG 

Start policy computation

03/21/2020 10:30:32 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/21/2020 10:30:32 PM INFO Constructing product automaton with infinity DFA!
03/21/2020 10:30:32 PM INFO Product automaton size is: (130, 977)
03/21/2020 10:30:32 PM INFO Max deadline: 1
03/21/2020 10:30:32 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/21/2020 10:30:32 PM DEBUG findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans (u'/usr/share/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000
03/21/2020 10:32:03 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/21/2020 10:32:03 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/21/2020 10:32:03 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/21/2020 10:32:03 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/21/2020 10:32:03 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/21/2020 10:32:03 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/21/2020 10:32:03 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/21/2020 10:32:03 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/21/2020 10:32:03 PM DEBUG [spec] No of nodes: 6
03/21/2020 10:32:03 PM DEBUG [spec] No of edges: 10
03/21/2020 10:32:03 PM DEBUG 
End of translate


03/21/2020 10:32:03 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/21/2020 10:32:03 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/21/2020 10:32:03 PM DEBUG 

Start policy computation

03/21/2020 10:32:03 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/21/2020 10:32:03 PM INFO Constructing product automaton with infinity DFA!
03/21/2020 10:32:03 PM INFO Product automaton size is: (130, 977)
03/21/2020 10:32:03 PM INFO Max deadline: 1
03/21/2020 10:32:03 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/21/2020 10:32:03 PM DEBUG findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans (u'/usr/share/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000
03/21/2020 10:33:21 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/21/2020 10:33:21 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/21/2020 10:33:21 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/21/2020 10:33:21 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/21/2020 10:33:21 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/21/2020 10:33:21 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/21/2020 10:33:21 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/21/2020 10:33:21 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/21/2020 10:33:21 PM DEBUG [spec] No of nodes: 6
03/21/2020 10:33:21 PM DEBUG [spec] No of edges: 10
03/21/2020 10:33:21 PM DEBUG 
End of translate


03/21/2020 10:33:21 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/21/2020 10:33:21 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/21/2020 10:33:21 PM DEBUG 

Start policy computation

03/21/2020 10:33:21 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/21/2020 10:33:21 PM INFO Constructing product automaton with infinity DFA!
03/21/2020 10:33:21 PM INFO Product automaton size is: (130, 977)
03/21/2020 10:33:21 PM INFO Max deadline: 1
03/21/2020 10:33:21 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/21/2020 10:33:42 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/21/2020 10:33:42 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/21/2020 10:33:42 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/21/2020 10:33:42 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/21/2020 10:33:42 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/21/2020 10:33:42 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/21/2020 10:33:42 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/21/2020 10:33:42 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/21/2020 10:33:42 PM DEBUG [spec] No of nodes: 6
03/21/2020 10:33:42 PM DEBUG [spec] No of edges: 10
03/21/2020 10:33:42 PM DEBUG 
End of translate


03/21/2020 10:33:42 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/21/2020 10:33:42 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/21/2020 10:33:42 PM DEBUG 

Start policy computation

03/21/2020 10:33:42 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/21/2020 10:33:42 PM INFO Constructing product automaton with infinity DFA!
03/21/2020 10:33:42 PM INFO Product automaton size is: (130, 977)
03/21/2020 10:33:42 PM INFO Max deadline: 1
03/21/2020 10:33:42 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/21/2020 10:33:42 PM DEBUG findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans (u'/usr/share/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000
03/21/2020 10:34:17 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/21/2020 10:34:17 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/21/2020 10:34:17 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/21/2020 10:34:17 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/21/2020 10:34:17 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/21/2020 10:34:17 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/21/2020 10:34:17 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/21/2020 10:34:17 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/21/2020 10:34:17 PM DEBUG [spec] No of nodes: 6
03/21/2020 10:34:17 PM DEBUG [spec] No of edges: 10
03/21/2020 10:34:17 PM DEBUG 
End of translate


03/21/2020 10:34:17 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/21/2020 10:34:17 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/21/2020 10:34:17 PM DEBUG 

Start policy computation

03/21/2020 10:34:17 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/21/2020 10:34:17 PM INFO Constructing product automaton with infinity DFA!
03/21/2020 10:34:17 PM INFO Product automaton size is: (130, 977)
03/21/2020 10:34:18 PM INFO Max deadline: 1
03/21/2020 10:34:18 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/21/2020 10:34:18 PM DEBUG findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans (u'/usr/share/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000
03/21/2020 10:36:13 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/21/2020 10:36:13 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/21/2020 10:36:13 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/21/2020 10:36:13 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/21/2020 10:36:13 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/21/2020 10:36:13 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/21/2020 10:36:13 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/21/2020 10:36:13 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/21/2020 10:36:13 PM DEBUG [spec] No of nodes: 6
03/21/2020 10:36:13 PM DEBUG [spec] No of edges: 10
03/21/2020 10:36:13 PM DEBUG 
End of translate


03/21/2020 10:36:13 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/21/2020 10:36:13 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/21/2020 10:36:13 PM DEBUG 

Start policy computation

03/21/2020 10:36:13 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/21/2020 10:36:13 PM INFO Constructing product automaton with infinity DFA!
03/21/2020 10:36:13 PM INFO Product automaton size is: (130, 977)
03/21/2020 10:36:13 PM INFO Max deadline: 1
03/21/2020 10:36:13 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/21/2020 10:36:13 PM DEBUG findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans (u'/usr/share/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000
03/21/2020 10:36:43 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/21/2020 10:36:43 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/21/2020 10:36:43 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/21/2020 10:36:43 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/21/2020 10:36:43 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/21/2020 10:36:43 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/21/2020 10:36:43 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/21/2020 10:36:43 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/21/2020 10:36:43 PM DEBUG [spec] No of nodes: 6
03/21/2020 10:36:43 PM DEBUG [spec] No of edges: 10
03/21/2020 10:36:43 PM DEBUG 
End of translate


03/21/2020 10:36:43 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/21/2020 10:36:43 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/21/2020 10:36:43 PM DEBUG 

Start policy computation

03/21/2020 10:36:44 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/21/2020 10:36:44 PM INFO Constructing product automaton with infinity DFA!
03/21/2020 10:36:44 PM INFO Product automaton size is: (130, 977)
03/21/2020 10:36:44 PM INFO Max deadline: 1
03/21/2020 10:36:44 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/21/2020 10:36:44 PM DEBUG findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans (u'/usr/share/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000
03/21/2020 10:37:27 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/21/2020 10:37:27 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/21/2020 10:37:27 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/21/2020 10:37:27 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/21/2020 10:37:27 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/21/2020 10:37:27 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/21/2020 10:37:27 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/21/2020 10:37:27 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/21/2020 10:37:27 PM DEBUG [spec] No of nodes: 6
03/21/2020 10:37:27 PM DEBUG [spec] No of edges: 10
03/21/2020 10:37:27 PM DEBUG 
End of translate


03/21/2020 10:37:27 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/21/2020 10:37:27 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/21/2020 10:37:27 PM DEBUG 

Start policy computation

03/21/2020 10:37:27 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/21/2020 10:37:27 PM INFO Constructing product automaton with infinity DFA!
03/21/2020 10:37:27 PM INFO Product automaton size is: (130, 977)
03/21/2020 10:37:27 PM INFO Max deadline: 1
03/21/2020 10:37:27 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/21/2020 10:37:27 PM DEBUG findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans (u'/usr/share/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000
03/21/2020 10:40:30 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/21/2020 10:40:30 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/21/2020 10:40:30 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/21/2020 10:40:30 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/21/2020 10:40:30 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/21/2020 10:40:30 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/21/2020 10:40:30 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/21/2020 10:40:30 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/21/2020 10:40:30 PM DEBUG [spec] No of nodes: 6
03/21/2020 10:40:30 PM DEBUG [spec] No of edges: 10
03/21/2020 10:40:30 PM DEBUG 
End of translate


03/21/2020 10:40:30 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/21/2020 10:40:30 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/21/2020 10:40:30 PM DEBUG 

Start policy computation

03/21/2020 10:40:30 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/21/2020 10:40:30 PM INFO Constructing product automaton with infinity DFA!
03/21/2020 10:40:30 PM INFO Product automaton size is: (130, 977)
03/21/2020 10:40:30 PM INFO Max deadline: 1
03/21/2020 10:40:30 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/21/2020 10:40:30 PM DEBUG findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans (u'/usr/share/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000
03/21/2020 10:41:16 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/21/2020 10:41:16 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/21/2020 10:41:16 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/21/2020 10:41:16 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/21/2020 10:41:16 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/21/2020 10:41:16 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/21/2020 10:41:16 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/21/2020 10:41:16 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/21/2020 10:41:16 PM DEBUG [spec] No of nodes: 6
03/21/2020 10:41:16 PM DEBUG [spec] No of edges: 10
03/21/2020 10:41:16 PM DEBUG 
End of translate


03/21/2020 10:41:16 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/21/2020 10:41:16 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/21/2020 10:41:16 PM DEBUG 

Start policy computation

03/21/2020 10:41:16 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/21/2020 10:41:16 PM INFO Constructing product automaton with infinity DFA!
03/21/2020 10:41:16 PM INFO Product automaton size is: (130, 977)
03/21/2020 10:41:16 PM INFO Max deadline: 1
03/21/2020 10:41:16 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/21/2020 10:41:16 PM DEBUG findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans (u'/usr/share/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000
03/21/2020 10:41:47 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/21/2020 10:41:47 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/21/2020 10:41:47 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/21/2020 10:41:47 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/21/2020 10:41:47 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/21/2020 10:41:47 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/21/2020 10:41:47 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/21/2020 10:41:47 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/21/2020 10:41:47 PM DEBUG [spec] No of nodes: 6
03/21/2020 10:41:47 PM DEBUG [spec] No of edges: 10
03/21/2020 10:41:47 PM DEBUG 
End of translate


03/21/2020 10:41:47 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/21/2020 10:41:47 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/21/2020 10:41:47 PM DEBUG 

Start policy computation

03/21/2020 10:41:47 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/21/2020 10:41:47 PM INFO Constructing product automaton with infinity DFA!
03/21/2020 10:41:47 PM INFO Product automaton size is: (130, 977)
03/21/2020 10:41:47 PM INFO Max deadline: 1
03/21/2020 10:41:47 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/21/2020 10:41:47 PM DEBUG findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans (u'/usr/share/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000
03/21/2020 10:46:05 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/21/2020 10:46:06 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/21/2020 10:46:06 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/21/2020 10:46:06 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/21/2020 10:46:06 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/21/2020 10:46:06 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/21/2020 10:46:06 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/21/2020 10:46:06 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/21/2020 10:46:06 PM DEBUG [spec] No of nodes: 6
03/21/2020 10:46:06 PM DEBUG [spec] No of edges: 10
03/21/2020 10:46:06 PM DEBUG 
End of translate


03/21/2020 10:46:06 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/21/2020 10:46:06 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/21/2020 10:46:06 PM DEBUG 

Start policy computation

03/21/2020 10:46:06 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/21/2020 10:46:06 PM INFO Constructing product automaton with infinity DFA!
03/21/2020 10:46:06 PM INFO Product automaton size is: (130, 977)
03/21/2020 10:46:06 PM INFO Max deadline: 1
03/21/2020 10:46:06 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/21/2020 10:46:06 PM DEBUG findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans (u'/usr/share/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000
03/21/2020 10:48:43 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/21/2020 10:48:43 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/21/2020 10:48:43 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/21/2020 10:48:43 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/21/2020 10:48:43 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/21/2020 10:48:43 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/21/2020 10:48:43 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/21/2020 10:48:43 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/21/2020 10:48:43 PM DEBUG [spec] No of nodes: 6
03/21/2020 10:48:43 PM DEBUG [spec] No of edges: 10
03/21/2020 10:48:43 PM DEBUG 
End of translate


03/21/2020 10:48:43 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/21/2020 10:48:43 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/21/2020 10:48:43 PM DEBUG 

Start policy computation

03/21/2020 10:48:43 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/21/2020 10:48:43 PM INFO Constructing product automaton with infinity DFA!
03/21/2020 10:48:43 PM INFO Product automaton size is: (130, 977)
03/21/2020 10:48:43 PM INFO Max deadline: 1
03/21/2020 10:48:43 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/21/2020 10:48:43 PM DEBUG findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans (u'/usr/share/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000
03/21/2020 10:49:01 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/21/2020 10:49:01 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/21/2020 10:49:01 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/21/2020 10:49:01 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/21/2020 10:49:01 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/21/2020 10:49:01 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/21/2020 10:49:01 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/21/2020 10:49:01 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/21/2020 10:49:01 PM DEBUG [spec] No of nodes: 6
03/21/2020 10:49:01 PM DEBUG [spec] No of edges: 10
03/21/2020 10:49:01 PM DEBUG 
End of translate


03/21/2020 10:49:01 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/21/2020 10:49:01 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/21/2020 10:49:01 PM DEBUG 

Start policy computation

03/21/2020 10:49:01 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/21/2020 10:49:01 PM INFO Constructing product automaton with infinity DFA!
03/21/2020 10:49:01 PM INFO Product automaton size is: (130, 977)
03/21/2020 10:49:01 PM INFO Max deadline: 1
03/21/2020 10:49:01 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/21/2020 10:49:02 PM DEBUG findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans (u'/usr/share/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000
03/21/2020 10:52:12 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/21/2020 10:52:12 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/21/2020 10:52:12 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/21/2020 10:52:12 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/21/2020 10:52:12 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/21/2020 10:52:12 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/21/2020 10:52:12 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/21/2020 10:52:12 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/21/2020 10:52:12 PM DEBUG [spec] No of nodes: 6
03/21/2020 10:52:12 PM DEBUG [spec] No of edges: 10
03/21/2020 10:52:12 PM DEBUG 
End of translate


03/21/2020 10:52:12 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/21/2020 10:52:12 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/21/2020 10:52:12 PM DEBUG 

Start policy computation

03/21/2020 10:52:12 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/21/2020 10:52:12 PM INFO Constructing product automaton with infinity DFA!
03/21/2020 10:52:12 PM INFO Product automaton size is: (130, 977)
03/21/2020 10:52:12 PM INFO Max deadline: 1
03/21/2020 10:52:12 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/21/2020 10:52:13 PM DEBUG findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans (u'/usr/share/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000
03/21/2020 10:54:32 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/21/2020 10:54:32 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/21/2020 10:54:32 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/21/2020 10:54:32 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/21/2020 10:54:32 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/21/2020 10:54:32 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/21/2020 10:54:32 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/21/2020 10:54:32 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/21/2020 10:54:32 PM DEBUG [spec] No of nodes: 6
03/21/2020 10:54:32 PM DEBUG [spec] No of edges: 10
03/21/2020 10:54:32 PM DEBUG 
End of translate


03/21/2020 10:54:32 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/21/2020 10:54:32 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/21/2020 10:54:32 PM DEBUG 

Start policy computation

03/21/2020 10:54:32 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/21/2020 10:54:32 PM INFO Constructing product automaton with infinity DFA!
03/21/2020 10:54:32 PM INFO Product automaton size is: (130, 977)
03/21/2020 10:54:32 PM INFO Max deadline: 1
03/21/2020 10:54:32 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/21/2020 10:54:47 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/21/2020 10:54:47 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/21/2020 10:54:47 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/21/2020 10:54:47 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/21/2020 10:54:47 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/21/2020 10:54:47 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/21/2020 10:54:47 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/21/2020 10:54:47 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/21/2020 10:54:47 PM DEBUG [spec] No of nodes: 6
03/21/2020 10:54:47 PM DEBUG [spec] No of edges: 10
03/21/2020 10:54:47 PM DEBUG 
End of translate


03/21/2020 10:54:47 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/21/2020 10:54:47 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/21/2020 10:54:47 PM DEBUG 

Start policy computation

03/21/2020 10:54:47 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/21/2020 10:54:47 PM INFO Constructing product automaton with infinity DFA!
03/21/2020 10:54:47 PM INFO Product automaton size is: (130, 977)
03/21/2020 10:54:47 PM INFO Max deadline: 1
03/21/2020 10:54:47 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/21/2020 11:32:11 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/21/2020 11:32:11 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/21/2020 11:32:11 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/21/2020 11:32:11 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/21/2020 11:32:11 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/21/2020 11:32:11 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/21/2020 11:32:11 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/21/2020 11:32:11 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/21/2020 11:32:11 PM DEBUG [spec] No of nodes: 6
03/21/2020 11:32:11 PM DEBUG [spec] No of edges: 10
03/21/2020 11:32:11 PM DEBUG 
End of translate


03/21/2020 11:32:11 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/21/2020 11:32:11 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/21/2020 11:32:11 PM DEBUG 

Start policy computation

03/21/2020 11:32:11 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/21/2020 11:32:11 PM INFO Constructing product automaton with infinity DFA!
03/21/2020 11:32:11 PM INFO Product automaton size is: (130, 977)
03/21/2020 11:32:11 PM INFO Max deadline: 1
03/21/2020 11:32:11 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/21/2020 11:33:22 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/21/2020 11:33:22 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/21/2020 11:33:22 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/21/2020 11:33:22 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/21/2020 11:33:22 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/21/2020 11:33:22 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/21/2020 11:33:22 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/21/2020 11:33:22 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/21/2020 11:33:22 PM DEBUG [spec] No of nodes: 6
03/21/2020 11:33:22 PM DEBUG [spec] No of edges: 10
03/21/2020 11:33:22 PM DEBUG 
End of translate


03/21/2020 11:33:22 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/21/2020 11:33:22 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/21/2020 11:33:22 PM DEBUG 

Start policy computation

03/21/2020 11:33:22 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/21/2020 11:33:22 PM INFO Constructing product automaton with infinity DFA!
03/21/2020 11:33:22 PM INFO Product automaton size is: (130, 977)
03/21/2020 11:33:23 PM INFO Max deadline: 1
03/21/2020 11:33:23 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/21/2020 11:33:46 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/21/2020 11:33:46 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/21/2020 11:33:46 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/21/2020 11:33:46 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/21/2020 11:33:46 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/21/2020 11:33:46 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/21/2020 11:33:46 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/21/2020 11:33:46 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/21/2020 11:33:46 PM DEBUG [spec] No of nodes: 6
03/21/2020 11:33:46 PM DEBUG [spec] No of edges: 10
03/21/2020 11:33:46 PM DEBUG 
End of translate


03/21/2020 11:33:46 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/21/2020 11:33:46 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/21/2020 11:33:46 PM DEBUG 

Start policy computation

03/21/2020 11:33:46 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/21/2020 11:33:46 PM INFO Constructing product automaton with infinity DFA!
03/21/2020 11:33:46 PM INFO Product automaton size is: (130, 977)
03/21/2020 11:33:47 PM INFO Max deadline: 1
03/21/2020 11:33:47 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/21/2020 11:38:07 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/21/2020 11:38:07 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/21/2020 11:38:07 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/21/2020 11:38:07 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/21/2020 11:38:07 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/21/2020 11:38:07 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/21/2020 11:38:07 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/21/2020 11:38:07 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/21/2020 11:38:07 PM DEBUG [spec] No of nodes: 6
03/21/2020 11:38:07 PM DEBUG [spec] No of edges: 10
03/21/2020 11:38:07 PM DEBUG 
End of translate


03/21/2020 11:38:07 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/21/2020 11:38:07 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/21/2020 11:38:07 PM DEBUG 

Start policy computation

03/21/2020 11:38:07 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/21/2020 11:38:07 PM INFO Constructing product automaton with infinity DFA!
03/21/2020 11:38:07 PM INFO Product automaton size is: (130, 977)
03/21/2020 11:38:07 PM INFO Max deadline: 1
03/21/2020 11:38:07 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/21/2020 11:38:07 PM DEBUG findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans (u'/usr/share/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000
03/21/2020 11:38:32 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/21/2020 11:38:32 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/21/2020 11:38:32 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/21/2020 11:38:32 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/21/2020 11:38:32 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/21/2020 11:38:32 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/21/2020 11:38:32 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/21/2020 11:38:32 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/21/2020 11:38:32 PM DEBUG [spec] No of nodes: 6
03/21/2020 11:38:32 PM DEBUG [spec] No of edges: 10
03/21/2020 11:38:32 PM DEBUG 
End of translate


03/21/2020 11:38:32 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/21/2020 11:38:32 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/21/2020 11:38:32 PM DEBUG 

Start policy computation

03/21/2020 11:38:32 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/21/2020 11:38:32 PM INFO Constructing product automaton with infinity DFA!
03/21/2020 11:38:32 PM INFO Product automaton size is: (130, 977)
03/21/2020 11:38:32 PM INFO Max deadline: 1
03/21/2020 11:38:32 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/21/2020 11:38:33 PM DEBUG findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans (u'/usr/share/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000
03/21/2020 11:39:43 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/21/2020 11:39:43 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/21/2020 11:39:43 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/21/2020 11:39:43 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/21/2020 11:39:43 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/21/2020 11:39:43 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/21/2020 11:39:43 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/21/2020 11:39:43 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/21/2020 11:39:43 PM DEBUG [spec] No of nodes: 6
03/21/2020 11:39:43 PM DEBUG [spec] No of edges: 10
03/21/2020 11:39:43 PM DEBUG 
End of translate


03/21/2020 11:39:43 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/21/2020 11:39:43 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/21/2020 11:39:43 PM DEBUG 

Start policy computation

03/21/2020 11:39:43 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/21/2020 11:39:43 PM INFO Constructing product automaton with infinity DFA!
03/21/2020 11:39:43 PM INFO Product automaton size is: (130, 977)
03/21/2020 11:39:43 PM INFO Max deadline: 1
03/21/2020 11:39:43 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/21/2020 11:39:43 PM DEBUG findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans (u'/usr/share/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000
03/21/2020 11:41:00 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/21/2020 11:41:00 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/21/2020 11:41:00 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/21/2020 11:41:00 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/21/2020 11:41:00 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/21/2020 11:41:00 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/21/2020 11:41:00 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/21/2020 11:41:00 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/21/2020 11:41:00 PM DEBUG [spec] No of nodes: 6
03/21/2020 11:41:00 PM DEBUG [spec] No of edges: 10
03/21/2020 11:41:00 PM DEBUG 
End of translate


03/21/2020 11:41:00 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/21/2020 11:41:00 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/21/2020 11:41:00 PM DEBUG 

Start policy computation

03/21/2020 11:41:00 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/21/2020 11:41:00 PM INFO Constructing product automaton with infinity DFA!
03/21/2020 11:41:00 PM INFO Product automaton size is: (130, 977)
03/21/2020 11:41:00 PM INFO Max deadline: 1
03/21/2020 11:41:00 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/21/2020 11:41:00 PM DEBUG findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans (u'/usr/share/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000
03/21/2020 11:41:19 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/21/2020 11:41:19 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/21/2020 11:41:19 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/21/2020 11:41:19 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/21/2020 11:41:19 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/21/2020 11:41:19 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/21/2020 11:41:19 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/21/2020 11:41:19 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/21/2020 11:41:19 PM DEBUG [spec] No of nodes: 6
03/21/2020 11:41:19 PM DEBUG [spec] No of edges: 10
03/21/2020 11:41:19 PM DEBUG 
End of translate


03/21/2020 11:41:19 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/21/2020 11:41:19 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/21/2020 11:41:19 PM DEBUG 

Start policy computation

03/21/2020 11:41:19 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/21/2020 11:41:19 PM INFO Constructing product automaton with infinity DFA!
03/21/2020 11:41:19 PM INFO Product automaton size is: (130, 977)
03/21/2020 11:41:19 PM INFO Max deadline: 1
03/21/2020 11:41:19 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/21/2020 11:41:20 PM DEBUG findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans (u'/usr/share/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000
03/21/2020 11:41:51 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/21/2020 11:41:51 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/21/2020 11:41:51 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/21/2020 11:41:51 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/21/2020 11:41:51 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/21/2020 11:41:51 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/21/2020 11:41:51 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/21/2020 11:41:51 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/21/2020 11:41:51 PM DEBUG [spec] No of nodes: 6
03/21/2020 11:41:51 PM DEBUG [spec] No of edges: 10
03/21/2020 11:41:51 PM DEBUG 
End of translate


03/21/2020 11:41:51 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/21/2020 11:41:51 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/21/2020 11:41:51 PM DEBUG 

Start policy computation

03/21/2020 11:41:51 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/21/2020 11:41:51 PM INFO Constructing product automaton with infinity DFA!
03/21/2020 11:41:51 PM INFO Product automaton size is: (130, 977)
03/21/2020 11:41:51 PM INFO Max deadline: 1
03/21/2020 11:41:51 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/21/2020 11:41:52 PM DEBUG findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans (u'/usr/share/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000
03/21/2020 11:42:33 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/21/2020 11:42:33 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/21/2020 11:42:33 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/21/2020 11:42:33 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/21/2020 11:42:33 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/21/2020 11:42:33 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/21/2020 11:42:33 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/21/2020 11:42:33 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/21/2020 11:42:33 PM DEBUG [spec] No of nodes: 6
03/21/2020 11:42:33 PM DEBUG [spec] No of edges: 10
03/21/2020 11:42:33 PM DEBUG 
End of translate


03/21/2020 11:42:33 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/21/2020 11:42:33 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/21/2020 11:42:33 PM DEBUG 

Start policy computation

03/21/2020 11:42:33 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/21/2020 11:42:33 PM INFO Constructing product automaton with infinity DFA!
03/21/2020 11:42:33 PM INFO Product automaton size is: (130, 977)
03/21/2020 11:42:33 PM INFO Max deadline: 1
03/21/2020 11:42:33 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/21/2020 11:42:34 PM DEBUG findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans (u'/usr/share/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000
03/21/2020 11:43:23 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/21/2020 11:43:23 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/21/2020 11:43:23 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/21/2020 11:43:23 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/21/2020 11:43:23 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/21/2020 11:43:23 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/21/2020 11:43:23 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/21/2020 11:43:23 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/21/2020 11:43:23 PM DEBUG [spec] No of nodes: 6
03/21/2020 11:43:23 PM DEBUG [spec] No of edges: 10
03/21/2020 11:43:23 PM DEBUG 
End of translate


03/21/2020 11:43:23 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/21/2020 11:43:23 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/21/2020 11:43:23 PM DEBUG 

Start policy computation

03/21/2020 11:43:23 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/21/2020 11:43:23 PM INFO Constructing product automaton with infinity DFA!
03/21/2020 11:43:23 PM INFO Product automaton size is: (130, 977)
03/21/2020 11:43:23 PM INFO Max deadline: 1
03/21/2020 11:43:23 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/21/2020 11:43:23 PM DEBUG findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans (u'/usr/share/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000
03/21/2020 11:43:35 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/21/2020 11:43:35 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/21/2020 11:43:35 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/21/2020 11:43:35 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/21/2020 11:43:35 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/21/2020 11:43:35 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/21/2020 11:43:35 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/21/2020 11:43:35 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/21/2020 11:43:35 PM DEBUG [spec] No of nodes: 6
03/21/2020 11:43:35 PM DEBUG [spec] No of edges: 10
03/21/2020 11:43:35 PM DEBUG 
End of translate


03/21/2020 11:43:35 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/21/2020 11:43:35 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/21/2020 11:43:35 PM DEBUG 

Start policy computation

03/21/2020 11:43:35 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/21/2020 11:43:35 PM INFO Constructing product automaton with infinity DFA!
03/21/2020 11:43:35 PM INFO Product automaton size is: (130, 977)
03/21/2020 11:43:35 PM INFO Max deadline: 1
03/21/2020 11:43:35 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/21/2020 11:43:35 PM DEBUG findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans (u'/usr/share/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000
03/21/2020 11:43:51 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/21/2020 11:43:51 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/21/2020 11:43:51 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/21/2020 11:43:51 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/21/2020 11:43:51 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/21/2020 11:43:51 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/21/2020 11:43:51 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/21/2020 11:43:51 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/21/2020 11:43:51 PM DEBUG [spec] No of nodes: 6
03/21/2020 11:43:51 PM DEBUG [spec] No of edges: 10
03/21/2020 11:43:51 PM DEBUG 
End of translate


03/21/2020 11:43:51 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/21/2020 11:43:51 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/21/2020 11:43:51 PM DEBUG 

Start policy computation

03/21/2020 11:43:51 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/21/2020 11:43:51 PM INFO Constructing product automaton with infinity DFA!
03/21/2020 11:43:51 PM INFO Product automaton size is: (130, 977)
03/21/2020 11:43:51 PM INFO Max deadline: 1
03/21/2020 11:43:51 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/21/2020 11:43:51 PM DEBUG findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans (u'/usr/share/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000
03/21/2020 11:44:26 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/21/2020 11:44:26 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/21/2020 11:44:26 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/21/2020 11:44:26 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/21/2020 11:44:26 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/21/2020 11:44:26 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/21/2020 11:44:26 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/21/2020 11:44:26 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/21/2020 11:44:26 PM DEBUG [spec] No of nodes: 6
03/21/2020 11:44:26 PM DEBUG [spec] No of edges: 10
03/21/2020 11:44:26 PM DEBUG 
End of translate


03/21/2020 11:44:26 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/21/2020 11:44:26 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/21/2020 11:44:26 PM DEBUG 

Start policy computation

03/21/2020 11:44:26 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/21/2020 11:44:26 PM INFO Constructing product automaton with infinity DFA!
03/21/2020 11:44:27 PM INFO Product automaton size is: (130, 977)
03/21/2020 11:44:27 PM INFO Max deadline: 1
03/21/2020 11:44:27 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/21/2020 11:44:27 PM DEBUG findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans (u'/usr/share/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000
03/21/2020 11:45:52 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/21/2020 11:45:52 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/21/2020 11:45:52 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/21/2020 11:45:52 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/21/2020 11:45:52 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/21/2020 11:45:52 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/21/2020 11:45:52 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/21/2020 11:45:52 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/21/2020 11:45:52 PM DEBUG [spec] No of nodes: 6
03/21/2020 11:45:52 PM DEBUG [spec] No of edges: 10
03/21/2020 11:45:52 PM DEBUG 
End of translate


03/21/2020 11:45:52 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/21/2020 11:45:52 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/21/2020 11:45:52 PM DEBUG 

Start policy computation

03/21/2020 11:45:52 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/21/2020 11:45:52 PM INFO Constructing product automaton with infinity DFA!
03/21/2020 11:45:52 PM INFO Product automaton size is: (130, 977)
03/21/2020 11:45:52 PM INFO Max deadline: 1
03/21/2020 11:45:52 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/21/2020 11:45:52 PM DEBUG findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans (u'/usr/share/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000
03/21/2020 11:46:07 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/21/2020 11:46:07 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/21/2020 11:46:07 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/21/2020 11:46:07 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/21/2020 11:46:07 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/21/2020 11:46:07 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/21/2020 11:46:07 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/21/2020 11:46:07 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/21/2020 11:46:07 PM DEBUG [spec] No of nodes: 6
03/21/2020 11:46:07 PM DEBUG [spec] No of edges: 10
03/21/2020 11:46:07 PM DEBUG 
End of translate


03/21/2020 11:46:07 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/21/2020 11:46:07 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/21/2020 11:46:07 PM DEBUG 

Start policy computation

03/21/2020 11:46:07 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/21/2020 11:46:07 PM INFO Constructing product automaton with infinity DFA!
03/21/2020 11:46:07 PM INFO Product automaton size is: (130, 977)
03/21/2020 11:46:07 PM INFO Max deadline: 1
03/21/2020 11:46:07 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/21/2020 11:46:07 PM DEBUG findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans (u'/usr/share/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000
03/21/2020 11:46:43 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/21/2020 11:46:43 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/21/2020 11:46:43 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/21/2020 11:46:43 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/21/2020 11:46:43 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/21/2020 11:46:43 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/21/2020 11:46:43 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/21/2020 11:46:43 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/21/2020 11:46:43 PM DEBUG [spec] No of nodes: 6
03/21/2020 11:46:43 PM DEBUG [spec] No of edges: 10
03/21/2020 11:46:43 PM DEBUG 
End of translate


03/21/2020 11:46:43 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/21/2020 11:46:43 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/21/2020 11:46:43 PM DEBUG 

Start policy computation

03/21/2020 11:46:43 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/21/2020 11:46:43 PM INFO Constructing product automaton with infinity DFA!
03/21/2020 11:46:43 PM INFO Product automaton size is: (130, 977)
03/21/2020 11:46:43 PM INFO Max deadline: 1
03/21/2020 11:46:43 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/21/2020 11:46:43 PM DEBUG findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans (u'/usr/share/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000
03/21/2020 11:47:27 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/21/2020 11:47:27 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/21/2020 11:47:27 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/21/2020 11:47:27 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/21/2020 11:47:27 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/21/2020 11:47:27 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/21/2020 11:47:27 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/21/2020 11:47:27 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/21/2020 11:47:27 PM DEBUG [spec] No of nodes: 6
03/21/2020 11:47:27 PM DEBUG [spec] No of edges: 10
03/21/2020 11:47:27 PM DEBUG 
End of translate


03/21/2020 11:47:27 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/21/2020 11:47:27 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/21/2020 11:47:27 PM DEBUG 

Start policy computation

03/21/2020 11:47:27 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/21/2020 11:47:27 PM INFO Constructing product automaton with infinity DFA!
03/21/2020 11:47:27 PM INFO Product automaton size is: (130, 977)
03/21/2020 11:47:27 PM INFO Max deadline: 1
03/21/2020 11:47:27 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/21/2020 11:47:27 PM DEBUG findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans (u'/usr/share/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000
03/21/2020 11:48:00 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/21/2020 11:48:00 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/21/2020 11:48:00 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/21/2020 11:48:00 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/21/2020 11:48:00 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/21/2020 11:48:00 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/21/2020 11:48:00 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/21/2020 11:48:00 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/21/2020 11:48:00 PM DEBUG [spec] No of nodes: 6
03/21/2020 11:48:00 PM DEBUG [spec] No of edges: 10
03/21/2020 11:48:00 PM DEBUG 
End of translate


03/21/2020 11:48:00 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/21/2020 11:48:00 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/21/2020 11:48:00 PM DEBUG 

Start policy computation

03/21/2020 11:48:00 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/21/2020 11:48:00 PM INFO Constructing product automaton with infinity DFA!
03/21/2020 11:48:00 PM INFO Product automaton size is: (130, 977)
03/21/2020 11:48:00 PM INFO Max deadline: 1
03/21/2020 11:48:00 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/21/2020 11:48:06 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/21/2020 11:48:06 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/21/2020 11:48:06 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/21/2020 11:48:06 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/21/2020 11:48:06 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/21/2020 11:48:06 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/21/2020 11:48:06 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/21/2020 11:48:06 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/21/2020 11:48:06 PM DEBUG [spec] No of nodes: 6
03/21/2020 11:48:06 PM DEBUG [spec] No of edges: 10
03/21/2020 11:48:06 PM DEBUG 
End of translate


03/21/2020 11:48:06 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/21/2020 11:48:06 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/21/2020 11:48:06 PM DEBUG 

Start policy computation

03/21/2020 11:48:06 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/21/2020 11:48:06 PM INFO Constructing product automaton with infinity DFA!
03/21/2020 11:48:06 PM INFO Product automaton size is: (130, 977)
03/21/2020 11:48:06 PM INFO Max deadline: 1
03/21/2020 11:48:06 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/21/2020 11:48:45 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/21/2020 11:48:45 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/21/2020 11:48:45 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/21/2020 11:48:45 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/21/2020 11:48:45 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/21/2020 11:48:45 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/21/2020 11:48:45 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/21/2020 11:48:45 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/21/2020 11:48:45 PM DEBUG [spec] No of nodes: 6
03/21/2020 11:48:45 PM DEBUG [spec] No of edges: 10
03/21/2020 11:48:45 PM DEBUG 
End of translate


03/21/2020 11:48:45 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/21/2020 11:48:45 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/21/2020 11:48:45 PM DEBUG 

Start policy computation

03/21/2020 11:48:45 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/21/2020 11:48:45 PM INFO Constructing product automaton with infinity DFA!
03/21/2020 11:48:45 PM INFO Product automaton size is: (130, 977)
03/21/2020 11:48:45 PM INFO Max deadline: 1
03/21/2020 11:48:45 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/21/2020 11:50:55 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/21/2020 11:50:55 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/21/2020 11:50:55 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/21/2020 11:50:55 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/21/2020 11:50:55 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/21/2020 11:50:55 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/21/2020 11:50:55 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/21/2020 11:50:55 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/21/2020 11:50:55 PM DEBUG [spec] No of nodes: 6
03/21/2020 11:50:55 PM DEBUG [spec] No of edges: 10
03/21/2020 11:50:55 PM DEBUG 
End of translate


03/21/2020 11:50:55 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/21/2020 11:50:55 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/21/2020 11:50:55 PM DEBUG 

Start policy computation

03/21/2020 11:50:55 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/21/2020 11:50:55 PM INFO Constructing product automaton with infinity DFA!
03/21/2020 11:50:55 PM INFO Product automaton size is: (130, 977)
03/21/2020 11:50:55 PM INFO Max deadline: 1
03/21/2020 11:50:55 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/21/2020 11:54:10 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/21/2020 11:54:10 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/21/2020 11:54:10 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/21/2020 11:54:10 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/21/2020 11:54:10 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/21/2020 11:54:10 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/21/2020 11:54:10 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/21/2020 11:54:10 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/21/2020 11:54:10 PM DEBUG [spec] No of nodes: 6
03/21/2020 11:54:10 PM DEBUG [spec] No of edges: 10
03/21/2020 11:54:10 PM DEBUG 
End of translate


03/21/2020 11:54:10 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/21/2020 11:54:10 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/21/2020 11:54:10 PM DEBUG 

Start policy computation

03/21/2020 11:54:10 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/21/2020 11:54:10 PM INFO Constructing product automaton with infinity DFA!
03/21/2020 11:54:10 PM INFO Product automaton size is: (130, 977)
03/21/2020 11:54:10 PM INFO Max deadline: 1
03/21/2020 11:54:10 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/21/2020 11:54:29 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/21/2020 11:54:29 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/21/2020 11:54:29 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/21/2020 11:54:29 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/21/2020 11:54:29 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/21/2020 11:54:29 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/21/2020 11:54:29 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/21/2020 11:54:29 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/21/2020 11:54:29 PM DEBUG [spec] No of nodes: 6
03/21/2020 11:54:29 PM DEBUG [spec] No of edges: 10
03/21/2020 11:54:29 PM DEBUG 
End of translate


03/21/2020 11:54:29 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/21/2020 11:54:29 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/21/2020 11:54:29 PM DEBUG 

Start policy computation

03/21/2020 11:54:29 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/21/2020 11:54:29 PM INFO Constructing product automaton with infinity DFA!
03/21/2020 11:54:29 PM INFO Product automaton size is: (130, 977)
03/21/2020 11:54:30 PM INFO Max deadline: 1
03/21/2020 11:54:30 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/21/2020 11:54:30 PM DEBUG findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans (u'/usr/share/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000
03/22/2020 12:01:21 AM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/22/2020 12:01:21 AM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/22/2020 12:01:21 AM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/22/2020 12:01:21 AM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/22/2020 12:01:21 AM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/22/2020 12:01:21 AM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/22/2020 12:01:21 AM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/22/2020 12:01:21 AM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/22/2020 12:01:21 AM DEBUG [spec] No of nodes: 6
03/22/2020 12:01:21 AM DEBUG [spec] No of edges: 10
03/22/2020 12:01:21 AM DEBUG 
End of translate


03/22/2020 12:01:21 AM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/22/2020 12:01:21 AM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/22/2020 12:01:21 AM DEBUG 

Start policy computation

03/22/2020 12:01:21 AM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/22/2020 12:01:21 AM INFO Constructing product automaton with infinity DFA!
03/22/2020 12:01:21 AM INFO Product automaton size is: (130, 977)
03/22/2020 12:01:21 AM INFO Max deadline: 1
03/22/2020 12:01:21 AM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/22/2020 12:01:21 AM DEBUG findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans (u'/usr/share/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000
03/22/2020 12:02:16 AM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/22/2020 12:02:16 AM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/22/2020 12:02:16 AM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/22/2020 12:02:16 AM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/22/2020 12:02:16 AM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/22/2020 12:02:16 AM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/22/2020 12:02:16 AM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/22/2020 12:02:16 AM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/22/2020 12:02:16 AM DEBUG [spec] No of nodes: 6
03/22/2020 12:02:16 AM DEBUG [spec] No of edges: 10
03/22/2020 12:02:16 AM DEBUG 
End of translate


03/22/2020 12:02:16 AM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/22/2020 12:02:16 AM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/22/2020 12:02:16 AM DEBUG 

Start policy computation

03/22/2020 12:02:16 AM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/22/2020 12:02:16 AM INFO Constructing product automaton with infinity DFA!
03/22/2020 12:02:16 AM INFO Product automaton size is: (130, 977)
03/22/2020 12:02:16 AM INFO Max deadline: 1
03/22/2020 12:02:16 AM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/22/2020 12:02:17 AM DEBUG findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans (u'/usr/share/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000
03/22/2020 12:08:22 AM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/22/2020 12:08:22 AM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/22/2020 12:08:22 AM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/22/2020 12:08:22 AM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/22/2020 12:08:22 AM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/22/2020 12:08:22 AM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/22/2020 12:08:22 AM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/22/2020 12:08:22 AM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/22/2020 12:08:22 AM DEBUG [spec] No of nodes: 6
03/22/2020 12:08:22 AM DEBUG [spec] No of edges: 10
03/22/2020 12:08:22 AM DEBUG 
End of translate


03/22/2020 12:08:22 AM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/22/2020 12:08:22 AM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/22/2020 12:08:22 AM DEBUG 

Start policy computation

03/22/2020 12:08:22 AM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/22/2020 12:08:22 AM INFO Constructing product automaton with infinity DFA!
03/22/2020 12:08:22 AM INFO Product automaton size is: (130, 977)
03/22/2020 12:08:23 AM INFO Max deadline: 1
03/22/2020 12:08:23 AM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/22/2020 12:08:23 AM DEBUG findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans (u'/usr/share/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000
03/22/2020 12:10:22 AM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/22/2020 12:10:22 AM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/22/2020 12:10:22 AM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/22/2020 12:10:22 AM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/22/2020 12:10:22 AM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/22/2020 12:10:22 AM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/22/2020 12:10:22 AM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/22/2020 12:10:22 AM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/22/2020 12:10:22 AM DEBUG [spec] No of nodes: 6
03/22/2020 12:10:22 AM DEBUG [spec] No of edges: 10
03/22/2020 12:10:22 AM DEBUG 
End of translate


03/22/2020 12:10:22 AM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/22/2020 12:10:22 AM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/22/2020 12:10:22 AM DEBUG 

Start policy computation

03/22/2020 12:10:22 AM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/22/2020 12:10:22 AM INFO Constructing product automaton with infinity DFA!
03/22/2020 12:10:22 AM INFO Product automaton size is: (130, 977)
03/22/2020 12:10:22 AM INFO Max deadline: 1
03/22/2020 12:10:22 AM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/22/2020 12:10:22 AM DEBUG findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans (u'/usr/share/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000
03/22/2020 12:11:24 AM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/22/2020 12:11:24 AM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/22/2020 12:11:24 AM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/22/2020 12:11:24 AM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/22/2020 12:11:24 AM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/22/2020 12:11:24 AM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/22/2020 12:11:24 AM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/22/2020 12:11:24 AM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/22/2020 12:11:24 AM DEBUG [spec] No of nodes: 6
03/22/2020 12:11:24 AM DEBUG [spec] No of edges: 10
03/22/2020 12:11:24 AM DEBUG 
End of translate


03/22/2020 12:11:24 AM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/22/2020 12:11:24 AM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/22/2020 12:11:24 AM DEBUG 

Start policy computation

03/22/2020 12:11:24 AM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/22/2020 12:11:24 AM INFO Constructing product automaton with infinity DFA!
03/22/2020 12:11:24 AM INFO Product automaton size is: (130, 977)
03/22/2020 12:11:24 AM INFO Max deadline: 1
03/22/2020 12:11:24 AM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/22/2020 12:11:24 AM DEBUG findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans (u'/usr/share/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000
03/22/2020 12:12:56 AM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/22/2020 12:12:56 AM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/22/2020 12:12:56 AM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/22/2020 12:12:56 AM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/22/2020 12:12:56 AM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/22/2020 12:12:56 AM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/22/2020 12:12:56 AM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/22/2020 12:12:56 AM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/22/2020 12:12:56 AM DEBUG [spec] No of nodes: 6
03/22/2020 12:12:56 AM DEBUG [spec] No of edges: 10
03/22/2020 12:12:56 AM DEBUG 
End of translate


03/22/2020 12:12:56 AM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/22/2020 12:12:56 AM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/22/2020 12:12:56 AM DEBUG 

Start policy computation

03/22/2020 12:12:56 AM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/22/2020 12:12:56 AM INFO Constructing product automaton with infinity DFA!
03/22/2020 12:12:56 AM INFO Product automaton size is: (130, 977)
03/22/2020 12:12:56 AM INFO Max deadline: 1
03/22/2020 12:12:56 AM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/22/2020 12:13:02 AM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/22/2020 12:13:02 AM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/22/2020 12:13:02 AM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/22/2020 12:13:02 AM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/22/2020 12:13:02 AM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/22/2020 12:13:02 AM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/22/2020 12:13:02 AM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/22/2020 12:13:02 AM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/22/2020 12:13:02 AM DEBUG [spec] No of nodes: 6
03/22/2020 12:13:02 AM DEBUG [spec] No of edges: 10
03/22/2020 12:13:02 AM DEBUG 
End of translate


03/22/2020 12:13:02 AM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/22/2020 12:13:02 AM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/22/2020 12:13:02 AM DEBUG 

Start policy computation

03/22/2020 12:13:02 AM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/22/2020 12:13:02 AM INFO Constructing product automaton with infinity DFA!
03/22/2020 12:13:02 AM INFO Product automaton size is: (130, 977)
03/22/2020 12:13:02 AM INFO Max deadline: 1
03/22/2020 12:13:02 AM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/22/2020 12:13:03 AM DEBUG findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans (u'/usr/share/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000
03/22/2020 12:13:31 AM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/22/2020 12:13:31 AM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/22/2020 12:13:31 AM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/22/2020 12:13:31 AM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/22/2020 12:13:31 AM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/22/2020 12:13:31 AM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/22/2020 12:13:31 AM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/22/2020 12:13:31 AM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/22/2020 12:13:31 AM DEBUG [spec] No of nodes: 6
03/22/2020 12:13:31 AM DEBUG [spec] No of edges: 10
03/22/2020 12:13:31 AM DEBUG 
End of translate


03/22/2020 12:13:31 AM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/22/2020 12:13:31 AM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/22/2020 12:13:31 AM DEBUG 

Start policy computation

03/22/2020 12:13:31 AM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/22/2020 12:13:31 AM INFO Constructing product automaton with infinity DFA!
03/22/2020 12:13:31 AM INFO Product automaton size is: (130, 977)
03/22/2020 12:13:31 AM INFO Max deadline: 1
03/22/2020 12:13:31 AM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/22/2020 12:13:31 AM DEBUG findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans (u'/usr/share/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000
03/22/2020 12:14:36 AM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/22/2020 12:14:36 AM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/22/2020 12:14:36 AM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/22/2020 12:14:36 AM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/22/2020 12:14:36 AM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/22/2020 12:14:36 AM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/22/2020 12:14:36 AM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/22/2020 12:14:36 AM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/22/2020 12:14:36 AM DEBUG [spec] No of nodes: 6
03/22/2020 12:14:36 AM DEBUG [spec] No of edges: 10
03/22/2020 12:14:36 AM DEBUG 
End of translate


03/22/2020 12:14:36 AM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/22/2020 12:14:36 AM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/22/2020 12:14:36 AM DEBUG 

Start policy computation

03/22/2020 12:14:36 AM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/22/2020 12:14:36 AM INFO Constructing product automaton with infinity DFA!
03/22/2020 12:14:36 AM INFO Product automaton size is: (130, 977)
03/22/2020 12:14:37 AM INFO Max deadline: 1
03/22/2020 12:14:37 AM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/22/2020 12:14:37 AM DEBUG findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans (u'/usr/share/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000
03/22/2020 12:16:40 AM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/22/2020 12:16:40 AM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/22/2020 12:16:40 AM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/22/2020 12:16:40 AM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/22/2020 12:16:40 AM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/22/2020 12:16:40 AM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/22/2020 12:16:40 AM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/22/2020 12:16:40 AM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/22/2020 12:16:40 AM DEBUG [spec] No of nodes: 6
03/22/2020 12:16:40 AM DEBUG [spec] No of edges: 10
03/22/2020 12:16:40 AM DEBUG 
End of translate


03/22/2020 12:16:40 AM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/22/2020 12:16:40 AM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/22/2020 12:16:40 AM DEBUG 

Start policy computation

03/22/2020 12:16:41 AM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/22/2020 12:16:41 AM INFO Constructing product automaton with infinity DFA!
03/22/2020 12:16:41 AM INFO Product automaton size is: (130, 977)
03/22/2020 12:16:41 AM INFO Max deadline: 1
03/22/2020 12:16:41 AM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/22/2020 12:16:41 AM DEBUG findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans (u'/usr/share/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000
03/22/2020 12:23:04 AM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/22/2020 12:23:04 AM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/22/2020 12:23:04 AM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/22/2020 12:23:04 AM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/22/2020 12:23:04 AM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/22/2020 12:23:04 AM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/22/2020 12:23:04 AM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/22/2020 12:23:04 AM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/22/2020 12:23:04 AM DEBUG [spec] No of nodes: 6
03/22/2020 12:23:04 AM DEBUG [spec] No of edges: 10
03/22/2020 12:23:04 AM DEBUG 
End of translate


03/22/2020 12:23:04 AM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/22/2020 12:23:04 AM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/22/2020 12:23:04 AM DEBUG 

Start policy computation

03/22/2020 12:23:04 AM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/22/2020 12:23:04 AM INFO Constructing product automaton with infinity DFA!
03/22/2020 12:23:04 AM INFO Product automaton size is: (130, 977)
03/22/2020 12:23:04 AM INFO Max deadline: 1
03/22/2020 12:23:04 AM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/22/2020 12:23:04 AM DEBUG findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans (u'/usr/share/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000
03/22/2020 12:23:58 AM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/22/2020 12:23:58 AM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/22/2020 12:23:58 AM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/22/2020 12:23:58 AM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/22/2020 12:23:58 AM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/22/2020 12:23:58 AM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/22/2020 12:23:58 AM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/22/2020 12:23:58 AM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/22/2020 12:23:58 AM DEBUG [spec] No of nodes: 6
03/22/2020 12:23:58 AM DEBUG [spec] No of edges: 10
03/22/2020 12:23:58 AM DEBUG 
End of translate


03/22/2020 12:23:58 AM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/22/2020 12:23:58 AM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/22/2020 12:23:58 AM DEBUG 

Start policy computation

03/22/2020 12:23:58 AM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/22/2020 12:23:58 AM INFO Constructing product automaton with infinity DFA!
03/22/2020 12:23:58 AM INFO Product automaton size is: (130, 977)
03/22/2020 12:23:58 AM INFO Max deadline: 1
03/22/2020 12:23:58 AM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/22/2020 12:24:06 AM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/22/2020 12:24:06 AM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/22/2020 12:24:06 AM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/22/2020 12:24:06 AM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/22/2020 12:24:06 AM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/22/2020 12:24:06 AM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/22/2020 12:24:06 AM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/22/2020 12:24:06 AM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/22/2020 12:24:06 AM DEBUG [spec] No of nodes: 6
03/22/2020 12:24:06 AM DEBUG [spec] No of edges: 10
03/22/2020 12:24:06 AM DEBUG 
End of translate


03/22/2020 12:24:06 AM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/22/2020 12:24:06 AM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/22/2020 12:24:06 AM DEBUG 

Start policy computation

03/22/2020 12:24:06 AM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/22/2020 12:24:06 AM INFO Constructing product automaton with infinity DFA!
03/22/2020 12:24:06 AM INFO Product automaton size is: (130, 977)
03/22/2020 12:24:06 AM INFO Max deadline: 1
03/22/2020 12:24:06 AM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/22/2020 12:24:06 AM DEBUG findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans (u'/usr/share/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000
03/22/2020 12:26:55 AM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/22/2020 12:26:55 AM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/22/2020 12:26:55 AM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/22/2020 12:26:55 AM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/22/2020 12:26:55 AM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/22/2020 12:26:55 AM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/22/2020 12:26:55 AM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/22/2020 12:26:55 AM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/22/2020 12:26:55 AM DEBUG [spec] No of nodes: 6
03/22/2020 12:26:55 AM DEBUG [spec] No of edges: 10
03/22/2020 12:26:55 AM DEBUG 
End of translate


03/22/2020 12:26:55 AM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/22/2020 12:26:55 AM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/22/2020 12:26:55 AM DEBUG 

Start policy computation

03/22/2020 12:26:55 AM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/22/2020 12:26:55 AM INFO Constructing product automaton with infinity DFA!
03/22/2020 12:26:55 AM INFO Product automaton size is: (130, 977)
03/22/2020 12:26:56 AM INFO Max deadline: 1
03/22/2020 12:26:56 AM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/22/2020 12:26:56 AM DEBUG findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans (u'/usr/share/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000
03/22/2020 12:29:00 AM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/22/2020 12:29:00 AM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/22/2020 12:29:00 AM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/22/2020 12:29:00 AM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/22/2020 12:29:00 AM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/22/2020 12:29:00 AM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/22/2020 12:29:00 AM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/22/2020 12:29:00 AM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/22/2020 12:29:00 AM DEBUG [spec] No of nodes: 6
03/22/2020 12:29:00 AM DEBUG [spec] No of edges: 10
03/22/2020 12:29:00 AM DEBUG 
End of translate


03/22/2020 12:29:00 AM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/22/2020 12:29:00 AM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/22/2020 12:29:00 AM DEBUG 

Start policy computation

03/22/2020 12:29:00 AM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/22/2020 12:29:00 AM INFO Constructing product automaton with infinity DFA!
03/22/2020 12:29:00 AM INFO Product automaton size is: (130, 977)
03/22/2020 12:29:00 AM INFO Max deadline: 1
03/22/2020 12:29:00 AM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/22/2020 12:29:00 AM DEBUG findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans (u'/usr/share/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000
03/22/2020 12:29:33 AM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/22/2020 12:29:33 AM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/22/2020 12:29:33 AM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/22/2020 12:29:33 AM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/22/2020 12:29:33 AM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/22/2020 12:29:33 AM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/22/2020 12:29:33 AM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/22/2020 12:29:33 AM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/22/2020 12:29:33 AM DEBUG [spec] No of nodes: 6
03/22/2020 12:29:33 AM DEBUG [spec] No of edges: 10
03/22/2020 12:29:33 AM DEBUG 
End of translate


03/22/2020 12:29:33 AM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/22/2020 12:29:33 AM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/22/2020 12:29:33 AM DEBUG 

Start policy computation

03/22/2020 12:29:33 AM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/22/2020 12:29:33 AM INFO Constructing product automaton with infinity DFA!
03/22/2020 12:29:33 AM INFO Product automaton size is: (130, 977)
03/22/2020 12:29:33 AM INFO Max deadline: 1
03/22/2020 12:29:33 AM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/22/2020 12:29:34 AM DEBUG findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans (u'/usr/share/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000
03/22/2020 12:34:28 AM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/22/2020 12:34:28 AM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/22/2020 12:34:28 AM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/22/2020 12:34:28 AM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/22/2020 12:34:28 AM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/22/2020 12:34:28 AM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/22/2020 12:34:28 AM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/22/2020 12:34:28 AM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/22/2020 12:34:28 AM DEBUG [spec] No of nodes: 6
03/22/2020 12:34:28 AM DEBUG [spec] No of edges: 10
03/22/2020 12:34:28 AM DEBUG 
End of translate


03/22/2020 12:34:28 AM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/22/2020 12:34:28 AM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/22/2020 12:34:28 AM DEBUG 

Start policy computation

03/22/2020 12:34:28 AM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/22/2020 12:34:28 AM INFO Constructing product automaton with infinity DFA!
03/22/2020 12:34:28 AM INFO Product automaton size is: (130, 977)
03/22/2020 12:34:29 AM INFO Max deadline: 1
03/22/2020 12:34:29 AM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/22/2020 12:34:29 AM DEBUG findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans (u'/usr/share/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000
03/22/2020 12:37:10 AM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/22/2020 12:37:10 AM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/22/2020 12:37:10 AM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/22/2020 12:37:10 AM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/22/2020 12:37:10 AM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/22/2020 12:37:10 AM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/22/2020 12:37:10 AM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/22/2020 12:37:10 AM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/22/2020 12:37:10 AM DEBUG [spec] No of nodes: 6
03/22/2020 12:37:10 AM DEBUG [spec] No of edges: 10
03/22/2020 12:37:10 AM DEBUG 
End of translate


03/22/2020 12:37:10 AM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/22/2020 12:37:10 AM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/22/2020 12:37:10 AM DEBUG 

Start policy computation

03/22/2020 12:37:10 AM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/22/2020 12:37:10 AM INFO Constructing product automaton with infinity DFA!
03/22/2020 12:37:10 AM INFO Product automaton size is: (130, 977)
03/22/2020 12:37:10 AM INFO Max deadline: 1
03/22/2020 12:37:10 AM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/22/2020 12:37:11 AM DEBUG findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans (u'/usr/share/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000
03/22/2020 12:39:43 AM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/22/2020 12:39:43 AM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/22/2020 12:39:43 AM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/22/2020 12:39:43 AM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/22/2020 12:39:43 AM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/22/2020 12:39:43 AM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/22/2020 12:39:43 AM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/22/2020 12:39:43 AM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/22/2020 12:39:43 AM DEBUG [spec] No of nodes: 6
03/22/2020 12:39:43 AM DEBUG [spec] No of edges: 10
03/22/2020 12:39:43 AM DEBUG 
End of translate


03/22/2020 12:39:43 AM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/22/2020 12:39:43 AM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/22/2020 12:39:43 AM DEBUG 

Start policy computation

03/22/2020 12:39:43 AM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/22/2020 12:39:43 AM INFO Constructing product automaton with infinity DFA!
03/22/2020 12:39:43 AM INFO Product automaton size is: (130, 977)
03/22/2020 12:39:43 AM INFO Max deadline: 1
03/22/2020 12:39:43 AM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/22/2020 12:39:44 AM DEBUG findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans (u'/usr/share/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000
03/22/2020 07:11:09 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/22/2020 07:11:09 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/22/2020 07:11:09 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/22/2020 07:11:09 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/22/2020 07:11:09 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/22/2020 07:11:09 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/22/2020 07:11:09 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/22/2020 07:11:09 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/22/2020 07:11:09 PM DEBUG [spec] No of nodes: 6
03/22/2020 07:11:09 PM DEBUG [spec] No of edges: 10
03/22/2020 07:11:09 PM DEBUG 
End of translate


03/22/2020 07:11:09 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/22/2020 07:11:09 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/22/2020 07:11:09 PM DEBUG 

Start policy computation

03/22/2020 07:11:09 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/22/2020 07:11:09 PM INFO Constructing product automaton with infinity DFA!
03/22/2020 07:11:09 PM INFO Product automaton size is: (130, 977)
03/22/2020 07:11:10 PM INFO Max deadline: 1
03/22/2020 07:11:10 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/22/2020 07:11:10 PM DEBUG findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans (u'/usr/share/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000
03/22/2020 07:12:41 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/22/2020 07:12:41 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/22/2020 07:12:41 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/22/2020 07:12:41 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/22/2020 07:12:41 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/22/2020 07:12:41 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/22/2020 07:12:41 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/22/2020 07:12:41 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/22/2020 07:12:41 PM DEBUG [spec] No of nodes: 6
03/22/2020 07:12:41 PM DEBUG [spec] No of edges: 10
03/22/2020 07:12:41 PM DEBUG 
End of translate


03/22/2020 07:12:41 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/22/2020 07:12:41 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/22/2020 07:12:41 PM DEBUG 

Start policy computation

03/22/2020 07:12:41 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/22/2020 07:12:41 PM INFO Constructing product automaton with infinity DFA!
03/22/2020 07:12:41 PM INFO Product automaton size is: (130, 977)
03/22/2020 07:12:41 PM INFO Max deadline: 1
03/22/2020 07:12:41 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/22/2020 07:17:07 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/22/2020 07:17:07 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/22/2020 07:17:07 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/22/2020 07:17:07 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/22/2020 07:17:07 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/22/2020 07:17:07 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/22/2020 07:17:07 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/22/2020 07:17:07 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/22/2020 07:17:07 PM DEBUG [spec] No of nodes: 6
03/22/2020 07:17:07 PM DEBUG [spec] No of edges: 10
03/22/2020 07:17:07 PM DEBUG 
End of translate


03/22/2020 07:17:07 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/22/2020 07:17:07 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/22/2020 07:17:07 PM DEBUG 

Start policy computation

03/22/2020 07:17:07 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/22/2020 07:17:07 PM INFO Constructing product automaton with infinity DFA!
03/22/2020 07:17:07 PM INFO Product automaton size is: (130, 977)
03/22/2020 07:17:08 PM INFO Max deadline: 1
03/22/2020 07:17:08 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/22/2020 07:17:50 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/22/2020 07:17:50 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/22/2020 07:17:50 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/22/2020 07:17:50 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/22/2020 07:17:50 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/22/2020 07:17:50 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/22/2020 07:17:50 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/22/2020 07:17:50 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/22/2020 07:17:50 PM DEBUG [spec] No of nodes: 6
03/22/2020 07:17:50 PM DEBUG [spec] No of edges: 10
03/22/2020 07:17:50 PM DEBUG 
End of translate


03/22/2020 07:17:50 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/22/2020 07:17:50 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/22/2020 07:17:50 PM DEBUG 

Start policy computation

03/22/2020 07:17:50 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/22/2020 07:17:50 PM INFO Constructing product automaton with infinity DFA!
03/22/2020 07:17:51 PM INFO Product automaton size is: (130, 977)
03/22/2020 07:17:51 PM INFO Max deadline: 1
03/22/2020 07:17:51 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/22/2020 07:18:57 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/22/2020 07:18:57 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/22/2020 07:18:57 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/22/2020 07:18:57 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/22/2020 07:18:57 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/22/2020 07:18:57 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/22/2020 07:18:57 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/22/2020 07:18:57 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/22/2020 07:18:57 PM DEBUG [spec] No of nodes: 6
03/22/2020 07:18:57 PM DEBUG [spec] No of edges: 10
03/22/2020 07:18:57 PM DEBUG 
End of translate


03/22/2020 07:18:57 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/22/2020 07:18:57 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/22/2020 07:18:57 PM DEBUG 

Start policy computation

03/22/2020 07:18:57 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/22/2020 07:18:57 PM INFO Constructing product automaton with infinity DFA!
03/22/2020 07:18:57 PM INFO Product automaton size is: (130, 977)
03/22/2020 07:19:12 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/22/2020 07:19:12 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/22/2020 07:19:12 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/22/2020 07:19:12 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/22/2020 07:19:12 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/22/2020 07:19:12 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/22/2020 07:19:12 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/22/2020 07:19:12 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/22/2020 07:19:12 PM DEBUG [spec] No of nodes: 6
03/22/2020 07:19:12 PM DEBUG [spec] No of edges: 10
03/22/2020 07:19:12 PM DEBUG 
End of translate


03/22/2020 07:19:12 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/22/2020 07:19:12 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/22/2020 07:19:12 PM DEBUG 

Start policy computation

03/22/2020 07:19:12 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/22/2020 07:19:12 PM INFO Constructing product automaton with infinity DFA!
03/22/2020 07:19:12 PM INFO Product automaton size is: (130, 977)
03/22/2020 07:20:16 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/22/2020 07:20:16 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/22/2020 07:20:16 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/22/2020 07:20:16 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/22/2020 07:20:16 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/22/2020 07:20:16 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/22/2020 07:20:16 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/22/2020 07:20:16 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/22/2020 07:20:16 PM DEBUG [spec] No of nodes: 6
03/22/2020 07:20:16 PM DEBUG [spec] No of edges: 10
03/22/2020 07:20:16 PM DEBUG 
End of translate


03/22/2020 07:20:16 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/22/2020 07:20:16 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/22/2020 07:20:16 PM DEBUG 

Start policy computation

03/22/2020 07:20:16 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/22/2020 07:20:16 PM INFO Constructing product automaton with infinity DFA!
03/22/2020 07:20:16 PM INFO Product automaton size is: (130, 977)
03/22/2020 07:20:16 PM INFO Max deadline: 1
03/22/2020 07:20:16 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/22/2020 07:23:01 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/22/2020 07:23:01 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/22/2020 07:23:01 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/22/2020 07:23:01 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/22/2020 07:23:01 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/22/2020 07:23:01 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/22/2020 07:23:01 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/22/2020 07:23:01 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/22/2020 07:23:01 PM DEBUG [spec] No of nodes: 6
03/22/2020 07:23:01 PM DEBUG [spec] No of edges: 10
03/22/2020 07:23:01 PM DEBUG 
End of translate


03/22/2020 07:23:01 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/22/2020 07:23:01 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/22/2020 07:23:01 PM DEBUG 

Start policy computation

03/22/2020 07:23:01 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/22/2020 07:23:01 PM INFO Constructing product automaton with infinity DFA!
03/22/2020 07:23:02 PM INFO Product automaton size is: (130, 977)
03/22/2020 07:26:29 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/22/2020 07:26:29 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/22/2020 07:26:29 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/22/2020 07:26:29 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/22/2020 07:26:29 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/22/2020 07:26:29 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/22/2020 07:26:29 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/22/2020 07:26:29 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/22/2020 07:26:29 PM DEBUG [spec] No of nodes: 6
03/22/2020 07:26:29 PM DEBUG [spec] No of edges: 10
03/22/2020 07:26:29 PM DEBUG 
End of translate


03/22/2020 07:26:29 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/22/2020 07:26:29 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/22/2020 07:26:29 PM DEBUG 

Start policy computation

03/22/2020 07:26:29 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/22/2020 07:26:29 PM INFO Constructing product automaton with infinity DFA!
03/22/2020 07:26:29 PM INFO Product automaton size is: (130, 977)
03/22/2020 07:29:51 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/22/2020 07:29:51 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/22/2020 07:29:51 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/22/2020 07:29:51 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/22/2020 07:29:51 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/22/2020 07:29:51 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/22/2020 07:29:51 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/22/2020 07:29:51 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/22/2020 07:29:51 PM DEBUG [spec] No of nodes: 6
03/22/2020 07:29:51 PM DEBUG [spec] No of edges: 10
03/22/2020 07:29:51 PM DEBUG 
End of translate


03/22/2020 07:29:51 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/22/2020 07:29:51 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/22/2020 07:29:51 PM DEBUG 

Start policy computation

03/22/2020 07:29:51 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/22/2020 07:29:51 PM INFO Constructing product automaton with infinity DFA!
03/22/2020 07:29:51 PM INFO Product automaton size is: (130, 977)
03/22/2020 07:30:18 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/22/2020 07:30:18 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/22/2020 07:30:18 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/22/2020 07:30:18 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/22/2020 07:30:18 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/22/2020 07:30:18 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/22/2020 07:30:18 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/22/2020 07:30:18 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/22/2020 07:30:18 PM DEBUG [spec] No of nodes: 6
03/22/2020 07:30:18 PM DEBUG [spec] No of edges: 10
03/22/2020 07:30:18 PM DEBUG 
End of translate


03/22/2020 07:30:18 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/22/2020 07:30:18 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/22/2020 07:30:18 PM DEBUG 

Start policy computation

03/22/2020 07:30:18 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/22/2020 07:30:18 PM INFO Constructing product automaton with infinity DFA!
03/22/2020 07:30:18 PM INFO Product automaton size is: (130, 977)
03/22/2020 07:30:57 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/22/2020 07:30:57 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/22/2020 07:30:57 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/22/2020 07:30:57 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/22/2020 07:30:57 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/22/2020 07:30:57 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/22/2020 07:30:57 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/22/2020 07:30:57 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/22/2020 07:30:57 PM DEBUG [spec] No of nodes: 6
03/22/2020 07:30:57 PM DEBUG [spec] No of edges: 10
03/22/2020 07:30:57 PM DEBUG 
End of translate


03/22/2020 07:30:57 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/22/2020 07:30:57 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/22/2020 07:30:57 PM DEBUG 

Start policy computation

03/22/2020 07:30:57 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/22/2020 07:30:57 PM INFO Constructing product automaton with infinity DFA!
03/22/2020 07:30:57 PM INFO Product automaton size is: (130, 977)
03/22/2020 07:30:57 PM INFO Max deadline: 1
03/22/2020 07:30:57 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/22/2020 07:33:48 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/22/2020 07:33:48 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/22/2020 07:33:48 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/22/2020 07:33:48 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/22/2020 07:33:48 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/22/2020 07:33:48 PM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/22/2020 07:33:48 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/22/2020 07:33:48 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/22/2020 07:33:48 PM DEBUG [spec] No of nodes: 6
03/22/2020 07:33:48 PM DEBUG [spec] No of edges: 10
03/22/2020 07:33:48 PM DEBUG 
End of translate


03/22/2020 07:33:48 PM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/22/2020 07:33:48 PM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/22/2020 07:33:48 PM DEBUG 

Start policy computation

03/22/2020 07:33:48 PM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/22/2020 07:33:48 PM INFO Constructing product automaton with infinity DFA!
03/22/2020 07:33:48 PM INFO Product automaton size is: (130, 977)
03/22/2020 07:33:49 PM INFO Max deadline: 1
03/22/2020 07:33:49 PM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/23/2020 12:00:11 AM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/23/2020 12:00:11 AM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/23/2020 12:00:11 AM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/23/2020 12:00:11 AM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/23/2020 12:00:11 AM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/23/2020 12:00:11 AM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/23/2020 12:00:11 AM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/23/2020 12:00:11 AM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/23/2020 12:00:11 AM DEBUG [spec] No of nodes: 6
03/23/2020 12:00:11 AM DEBUG [spec] No of edges: 10
03/23/2020 12:00:11 AM DEBUG 
End of translate


03/23/2020 12:00:11 AM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/23/2020 12:00:11 AM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/23/2020 12:00:11 AM DEBUG 

Start policy computation

03/23/2020 12:00:11 AM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/23/2020 12:00:11 AM INFO Constructing product automaton with infinity DFA!
03/23/2020 12:00:11 AM INFO Product automaton size is: (130, 977)
03/23/2020 12:00:12 AM INFO Max deadline: 1
03/23/2020 12:00:12 AM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
03/23/2020 12:00:25 AM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/23/2020 12:00:25 AM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/23/2020 12:00:25 AM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/23/2020 12:00:25 AM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/23/2020 12:00:25 AM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/23/2020 12:00:25 AM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/23/2020 12:00:25 AM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/23/2020 12:00:25 AM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/23/2020 12:00:25 AM DEBUG [spec] No of nodes: 6
03/23/2020 12:00:25 AM DEBUG [spec] No of edges: 10
03/23/2020 12:00:25 AM DEBUG 
End of translate


03/23/2020 12:00:25 AM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/23/2020 12:00:25 AM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/23/2020 12:00:25 AM DEBUG 

Start policy computation

03/23/2020 12:00:25 AM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/23/2020 12:00:25 AM INFO Constructing product automaton with infinity DFA!
03/23/2020 12:00:26 AM INFO Product automaton size is: (130, 977)
03/23/2020 12:20:30 AM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/23/2020 12:20:30 AM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/23/2020 12:20:30 AM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/23/2020 12:20:30 AM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/23/2020 12:20:30 AM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/23/2020 12:20:30 AM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/23/2020 12:20:30 AM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/23/2020 12:20:30 AM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/23/2020 12:20:30 AM DEBUG [spec] No of nodes: 6
03/23/2020 12:20:30 AM DEBUG [spec] No of edges: 10
03/23/2020 12:20:30 AM DEBUG 
End of translate


03/23/2020 12:20:30 AM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/23/2020 12:20:30 AM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/23/2020 12:20:30 AM DEBUG 

Start policy computation

03/23/2020 12:20:30 AM DEBUG [extend_ts] TS: (64, 484) ETS:(64, 484)
03/23/2020 12:20:30 AM INFO Constructing product automaton with infinity DFA!
03/23/2020 12:20:30 AM INFO Product automaton size is: (130, 977)
03/23/2020 12:20:30 AM INFO Max deadline: 1
03/23/2020 12:20:30 AM INFO Generated control policy is: Base1 -> 1 -> r41 -> 1 -> r42 -> 1 -> r35 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r12 -> 1 -> r12
